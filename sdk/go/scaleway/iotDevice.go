// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// IoT devices can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/iotDevice:IotDevice device01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type IotDevice struct {
	pulumi.CustomResourceState

	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure pulumi.BoolPtrOutput `pulumi:"allowInsecure"`
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections pulumi.BoolPtrOutput `pulumi:"allowMultipleConnections"`
	// The certificate bundle of the device.
	Certificate IotDeviceCertificateOutput `pulumi:"certificate"`
	// The date and time the device was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the IoT device (e.g. `living room`).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the hub on which this device will be created.
	HubId pulumi.StringOutput `pulumi:"hubId"`
	// The current connection status of the device.
	IsConnected pulumi.BoolOutput `pulumi:"isConnected"`
	// The last MQTT activity of the device.
	LastActivityAt pulumi.StringOutput `pulumi:"lastActivityAt"`
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters IotDeviceMessageFiltersPtrOutput `pulumi:"messageFilters"`
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name pulumi.StringOutput `pulumi:"name"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// The current status of the device.
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time the device resource was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewIotDevice registers a new resource with the given unique name, arguments, and options.
func NewIotDevice(ctx *pulumi.Context,
	name string, args *IotDeviceArgs, opts ...pulumi.ResourceOption) (*IotDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubId == nil {
		return nil, errors.New("invalid value for required argument 'HubId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IotDevice
	err := ctx.RegisterResource("scaleway:index/iotDevice:IotDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIotDevice gets an existing IotDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIotDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IotDeviceState, opts ...pulumi.ResourceOption) (*IotDevice, error) {
	var resource IotDevice
	err := ctx.ReadResource("scaleway:index/iotDevice:IotDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IotDevice resources.
type iotDeviceState struct {
	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections *bool `pulumi:"allowMultipleConnections"`
	// The certificate bundle of the device.
	Certificate *IotDeviceCertificate `pulumi:"certificate"`
	// The date and time the device was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the IoT device (e.g. `living room`).
	Description *string `pulumi:"description"`
	// The ID of the hub on which this device will be created.
	HubId *string `pulumi:"hubId"`
	// The current connection status of the device.
	IsConnected *bool `pulumi:"isConnected"`
	// The last MQTT activity of the device.
	LastActivityAt *string `pulumi:"lastActivityAt"`
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters *IotDeviceMessageFilters `pulumi:"messageFilters"`
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// The current status of the device.
	Status *string `pulumi:"status"`
	// The date and time the device resource was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type IotDeviceState struct {
	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure pulumi.BoolPtrInput
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections pulumi.BoolPtrInput
	// The certificate bundle of the device.
	Certificate IotDeviceCertificatePtrInput
	// The date and time the device was created.
	CreatedAt pulumi.StringPtrInput
	// The description of the IoT device (e.g. `living room`).
	Description pulumi.StringPtrInput
	// The ID of the hub on which this device will be created.
	HubId pulumi.StringPtrInput
	// The current connection status of the device.
	IsConnected pulumi.BoolPtrInput
	// The last MQTT activity of the device.
	LastActivityAt pulumi.StringPtrInput
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters IotDeviceMessageFiltersPtrInput
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// The current status of the device.
	Status pulumi.StringPtrInput
	// The date and time the device resource was updated.
	UpdatedAt pulumi.StringPtrInput
}

func (IotDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotDeviceState)(nil)).Elem()
}

type iotDeviceArgs struct {
	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections *bool `pulumi:"allowMultipleConnections"`
	// The certificate bundle of the device.
	Certificate *IotDeviceCertificate `pulumi:"certificate"`
	// The description of the IoT device (e.g. `living room`).
	Description *string `pulumi:"description"`
	// The ID of the hub on which this device will be created.
	HubId string `pulumi:"hubId"`
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters *IotDeviceMessageFilters `pulumi:"messageFilters"`
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a IotDevice resource.
type IotDeviceArgs struct {
	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure pulumi.BoolPtrInput
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections pulumi.BoolPtrInput
	// The certificate bundle of the device.
	Certificate IotDeviceCertificatePtrInput
	// The description of the IoT device (e.g. `living room`).
	Description pulumi.StringPtrInput
	// The ID of the hub on which this device will be created.
	HubId pulumi.StringInput
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters IotDeviceMessageFiltersPtrInput
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (IotDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotDeviceArgs)(nil)).Elem()
}

type IotDeviceInput interface {
	pulumi.Input

	ToIotDeviceOutput() IotDeviceOutput
	ToIotDeviceOutputWithContext(ctx context.Context) IotDeviceOutput
}

func (*IotDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDevice)(nil)).Elem()
}

func (i *IotDevice) ToIotDeviceOutput() IotDeviceOutput {
	return i.ToIotDeviceOutputWithContext(context.Background())
}

func (i *IotDevice) ToIotDeviceOutputWithContext(ctx context.Context) IotDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceOutput)
}

type IotDeviceOutput struct{ *pulumi.OutputState }

func (IotDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDevice)(nil)).Elem()
}

func (o IotDeviceOutput) ToIotDeviceOutput() IotDeviceOutput {
	return o
}

func (o IotDeviceOutput) ToIotDeviceOutputWithContext(ctx context.Context) IotDeviceOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceInput)(nil)).Elem(), &IotDevice{})
	pulumi.RegisterOutputType(IotDeviceOutput{})
}
