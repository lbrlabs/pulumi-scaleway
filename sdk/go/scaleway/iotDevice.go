// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IotDevice struct {
	pulumi.CustomResourceState

	// Allow plain and server-authenticated SSL connections in addition to mutually-authenticated ones
	AllowInsecure pulumi.BoolPtrOutput `pulumi:"allowInsecure"`
	// Allow multiple connections
	AllowMultipleConnections pulumi.BoolPtrOutput `pulumi:"allowMultipleConnections"`
	// Certificate section of the device
	Certificate IotDeviceCertificateOutput `pulumi:"certificate"`
	// The date and time of the creation of the device
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the device
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the hub on which this device will be created
	HubId pulumi.StringOutput `pulumi:"hubId"`
	// The MQTT connection status of the device
	IsConnected pulumi.BoolOutput `pulumi:"isConnected"`
	// The date and time of last MQTT activity of the device
	LastActivityAt pulumi.StringOutput `pulumi:"lastActivityAt"`
	// Rules to authorize or deny the device to publish/subscribe to specific topics
	MessageFilters IotDeviceMessageFiltersPtrOutput `pulumi:"messageFilters"`
	// The name of the device
	Name pulumi.StringOutput `pulumi:"name"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of the device
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time of the last update of the device
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewIotDevice registers a new resource with the given unique name, arguments, and options.
func NewIotDevice(ctx *pulumi.Context,
	name string, args *IotDeviceArgs, opts ...pulumi.ResourceOption) (*IotDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubId == nil {
		return nil, errors.New("invalid value for required argument 'HubId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IotDevice
	err := ctx.RegisterResource("scaleway:index/iotDevice:IotDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIotDevice gets an existing IotDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIotDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IotDeviceState, opts ...pulumi.ResourceOption) (*IotDevice, error) {
	var resource IotDevice
	err := ctx.ReadResource("scaleway:index/iotDevice:IotDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IotDevice resources.
type iotDeviceState struct {
	// Allow plain and server-authenticated SSL connections in addition to mutually-authenticated ones
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// Allow multiple connections
	AllowMultipleConnections *bool `pulumi:"allowMultipleConnections"`
	// Certificate section of the device
	Certificate *IotDeviceCertificate `pulumi:"certificate"`
	// The date and time of the creation of the device
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the device
	Description *string `pulumi:"description"`
	// The ID of the hub on which this device will be created
	HubId *string `pulumi:"hubId"`
	// The MQTT connection status of the device
	IsConnected *bool `pulumi:"isConnected"`
	// The date and time of last MQTT activity of the device
	LastActivityAt *string `pulumi:"lastActivityAt"`
	// Rules to authorize or deny the device to publish/subscribe to specific topics
	MessageFilters *IotDeviceMessageFilters `pulumi:"messageFilters"`
	// The name of the device
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// The status of the device
	Status *string `pulumi:"status"`
	// The date and time of the last update of the device
	UpdatedAt *string `pulumi:"updatedAt"`
}

type IotDeviceState struct {
	// Allow plain and server-authenticated SSL connections in addition to mutually-authenticated ones
	AllowInsecure pulumi.BoolPtrInput
	// Allow multiple connections
	AllowMultipleConnections pulumi.BoolPtrInput
	// Certificate section of the device
	Certificate IotDeviceCertificatePtrInput
	// The date and time of the creation of the device
	CreatedAt pulumi.StringPtrInput
	// The description of the device
	Description pulumi.StringPtrInput
	// The ID of the hub on which this device will be created
	HubId pulumi.StringPtrInput
	// The MQTT connection status of the device
	IsConnected pulumi.BoolPtrInput
	// The date and time of last MQTT activity of the device
	LastActivityAt pulumi.StringPtrInput
	// Rules to authorize or deny the device to publish/subscribe to specific topics
	MessageFilters IotDeviceMessageFiltersPtrInput
	// The name of the device
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// The status of the device
	Status pulumi.StringPtrInput
	// The date and time of the last update of the device
	UpdatedAt pulumi.StringPtrInput
}

func (IotDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotDeviceState)(nil)).Elem()
}

type iotDeviceArgs struct {
	// Allow plain and server-authenticated SSL connections in addition to mutually-authenticated ones
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// Allow multiple connections
	AllowMultipleConnections *bool `pulumi:"allowMultipleConnections"`
	// Certificate section of the device
	Certificate *IotDeviceCertificate `pulumi:"certificate"`
	// The description of the device
	Description *string `pulumi:"description"`
	// The ID of the hub on which this device will be created
	HubId string `pulumi:"hubId"`
	// Rules to authorize or deny the device to publish/subscribe to specific topics
	MessageFilters *IotDeviceMessageFilters `pulumi:"messageFilters"`
	// The name of the device
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a IotDevice resource.
type IotDeviceArgs struct {
	// Allow plain and server-authenticated SSL connections in addition to mutually-authenticated ones
	AllowInsecure pulumi.BoolPtrInput
	// Allow multiple connections
	AllowMultipleConnections pulumi.BoolPtrInput
	// Certificate section of the device
	Certificate IotDeviceCertificatePtrInput
	// The description of the device
	Description pulumi.StringPtrInput
	// The ID of the hub on which this device will be created
	HubId pulumi.StringInput
	// Rules to authorize or deny the device to publish/subscribe to specific topics
	MessageFilters IotDeviceMessageFiltersPtrInput
	// The name of the device
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (IotDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotDeviceArgs)(nil)).Elem()
}

type IotDeviceInput interface {
	pulumi.Input

	ToIotDeviceOutput() IotDeviceOutput
	ToIotDeviceOutputWithContext(ctx context.Context) IotDeviceOutput
}

func (*IotDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDevice)(nil)).Elem()
}

func (i *IotDevice) ToIotDeviceOutput() IotDeviceOutput {
	return i.ToIotDeviceOutputWithContext(context.Background())
}

func (i *IotDevice) ToIotDeviceOutputWithContext(ctx context.Context) IotDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceOutput)
}

// IotDeviceArrayInput is an input type that accepts IotDeviceArray and IotDeviceArrayOutput values.
// You can construct a concrete instance of `IotDeviceArrayInput` via:
//
//          IotDeviceArray{ IotDeviceArgs{...} }
type IotDeviceArrayInput interface {
	pulumi.Input

	ToIotDeviceArrayOutput() IotDeviceArrayOutput
	ToIotDeviceArrayOutputWithContext(context.Context) IotDeviceArrayOutput
}

type IotDeviceArray []IotDeviceInput

func (IotDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IotDevice)(nil)).Elem()
}

func (i IotDeviceArray) ToIotDeviceArrayOutput() IotDeviceArrayOutput {
	return i.ToIotDeviceArrayOutputWithContext(context.Background())
}

func (i IotDeviceArray) ToIotDeviceArrayOutputWithContext(ctx context.Context) IotDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceArrayOutput)
}

// IotDeviceMapInput is an input type that accepts IotDeviceMap and IotDeviceMapOutput values.
// You can construct a concrete instance of `IotDeviceMapInput` via:
//
//          IotDeviceMap{ "key": IotDeviceArgs{...} }
type IotDeviceMapInput interface {
	pulumi.Input

	ToIotDeviceMapOutput() IotDeviceMapOutput
	ToIotDeviceMapOutputWithContext(context.Context) IotDeviceMapOutput
}

type IotDeviceMap map[string]IotDeviceInput

func (IotDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IotDevice)(nil)).Elem()
}

func (i IotDeviceMap) ToIotDeviceMapOutput() IotDeviceMapOutput {
	return i.ToIotDeviceMapOutputWithContext(context.Background())
}

func (i IotDeviceMap) ToIotDeviceMapOutputWithContext(ctx context.Context) IotDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotDeviceMapOutput)
}

type IotDeviceOutput struct{ *pulumi.OutputState }

func (IotDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotDevice)(nil)).Elem()
}

func (o IotDeviceOutput) ToIotDeviceOutput() IotDeviceOutput {
	return o
}

func (o IotDeviceOutput) ToIotDeviceOutputWithContext(ctx context.Context) IotDeviceOutput {
	return o
}

// Allow plain and server-authenticated SSL connections in addition to mutually-authenticated ones
func (o IotDeviceOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.BoolPtrOutput { return v.AllowInsecure }).(pulumi.BoolPtrOutput)
}

// Allow multiple connections
func (o IotDeviceOutput) AllowMultipleConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.BoolPtrOutput { return v.AllowMultipleConnections }).(pulumi.BoolPtrOutput)
}

// Certificate section of the device
func (o IotDeviceOutput) Certificate() IotDeviceCertificateOutput {
	return o.ApplyT(func(v *IotDevice) IotDeviceCertificateOutput { return v.Certificate }).(IotDeviceCertificateOutput)
}

// The date and time of the creation of the device
func (o IotDeviceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the device
func (o IotDeviceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the hub on which this device will be created
func (o IotDeviceOutput) HubId() pulumi.StringOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.StringOutput { return v.HubId }).(pulumi.StringOutput)
}

// The MQTT connection status of the device
func (o IotDeviceOutput) IsConnected() pulumi.BoolOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.BoolOutput { return v.IsConnected }).(pulumi.BoolOutput)
}

// The date and time of last MQTT activity of the device
func (o IotDeviceOutput) LastActivityAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.StringOutput { return v.LastActivityAt }).(pulumi.StringOutput)
}

// Rules to authorize or deny the device to publish/subscribe to specific topics
func (o IotDeviceOutput) MessageFilters() IotDeviceMessageFiltersPtrOutput {
	return o.ApplyT(func(v *IotDevice) IotDeviceMessageFiltersPtrOutput { return v.MessageFilters }).(IotDeviceMessageFiltersPtrOutput)
}

// The name of the device
func (o IotDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region you want to attach the resource to
func (o IotDeviceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The status of the device
func (o IotDeviceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The date and time of the last update of the device
func (o IotDeviceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IotDevice) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type IotDeviceArrayOutput struct{ *pulumi.OutputState }

func (IotDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IotDevice)(nil)).Elem()
}

func (o IotDeviceArrayOutput) ToIotDeviceArrayOutput() IotDeviceArrayOutput {
	return o
}

func (o IotDeviceArrayOutput) ToIotDeviceArrayOutputWithContext(ctx context.Context) IotDeviceArrayOutput {
	return o
}

func (o IotDeviceArrayOutput) Index(i pulumi.IntInput) IotDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IotDevice {
		return vs[0].([]*IotDevice)[vs[1].(int)]
	}).(IotDeviceOutput)
}

type IotDeviceMapOutput struct{ *pulumi.OutputState }

func (IotDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IotDevice)(nil)).Elem()
}

func (o IotDeviceMapOutput) ToIotDeviceMapOutput() IotDeviceMapOutput {
	return o
}

func (o IotDeviceMapOutput) ToIotDeviceMapOutputWithContext(ctx context.Context) IotDeviceMapOutput {
	return o
}

func (o IotDeviceMapOutput) MapIndex(k pulumi.StringInput) IotDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IotDevice {
		return vs[0].(map[string]*IotDevice)[vs[1].(string)]
	}).(IotDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceInput)(nil)).Elem(), &IotDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceArrayInput)(nil)).Elem(), IotDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotDeviceMapInput)(nil)).Elem(), IotDeviceMap{})
	pulumi.RegisterOutputType(IotDeviceOutput{})
	pulumi.RegisterOutputType(IotDeviceArrayOutput{})
	pulumi.RegisterOutputType(IotDeviceMapOutput{})
}
