// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Database Users.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).
//
// ## Examples
//
// ### Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		dbPassword, err := random.NewRandomPassword(ctx, "dbPassword", &random.RandomPasswordArgs{
// 			Length:  pulumi.Int(16),
// 			Special: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = scaleway.NewDatabaseUser(ctx, "dbAdmin", &scaleway.DatabaseUserArgs{
// 			InstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),
// 			Password:   dbPassword.Result,
// 			IsAdmin:    pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Database User can be imported using `{region}/{instance_id}/{name}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/databaseUser:DatabaseUser admin fr-par/11111111-1111-1111-1111-111111111111/admin
// ```
type DatabaseUser struct {
	pulumi.CustomResourceState

	// The instance on which to create the user.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Grant admin permissions to the Database User.
	IsAdmin pulumi.BoolPtrOutput `pulumi:"isAdmin"`
	// Database User name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Database User password.
	Password pulumi.StringOutput `pulumi:"password"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewDatabaseUser(ctx *pulumi.Context,
	name string, args *DatabaseUserArgs, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	var resource DatabaseUser
	err := ctx.RegisterResource("scaleway:index/databaseUser:DatabaseUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseUser gets an existing DatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseUserState, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	var resource DatabaseUser
	err := ctx.ReadResource("scaleway:index/databaseUser:DatabaseUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseUser resources.
type databaseUserState struct {
	// The instance on which to create the user.
	InstanceId *string `pulumi:"instanceId"`
	// Grant admin permissions to the Database User.
	IsAdmin *bool `pulumi:"isAdmin"`
	// Database User name.
	Name *string `pulumi:"name"`
	// Database User password.
	Password *string `pulumi:"password"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

type DatabaseUserState struct {
	// The instance on which to create the user.
	InstanceId pulumi.StringPtrInput
	// Grant admin permissions to the Database User.
	IsAdmin pulumi.BoolPtrInput
	// Database User name.
	Name pulumi.StringPtrInput
	// Database User password.
	Password pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (DatabaseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserState)(nil)).Elem()
}

type databaseUserArgs struct {
	// The instance on which to create the user.
	InstanceId string `pulumi:"instanceId"`
	// Grant admin permissions to the Database User.
	IsAdmin *bool `pulumi:"isAdmin"`
	// Database User name.
	Name *string `pulumi:"name"`
	// Database User password.
	Password string `pulumi:"password"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a DatabaseUser resource.
type DatabaseUserArgs struct {
	// The instance on which to create the user.
	InstanceId pulumi.StringInput
	// Grant admin permissions to the Database User.
	IsAdmin pulumi.BoolPtrInput
	// Database User name.
	Name pulumi.StringPtrInput
	// Database User password.
	Password pulumi.StringInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (DatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserArgs)(nil)).Elem()
}

type DatabaseUserInput interface {
	pulumi.Input

	ToDatabaseUserOutput() DatabaseUserOutput
	ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput
}

func (*DatabaseUser) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUser)(nil))
}

func (i *DatabaseUser) ToDatabaseUserOutput() DatabaseUserOutput {
	return i.ToDatabaseUserOutputWithContext(context.Background())
}

func (i *DatabaseUser) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserOutput)
}

type DatabaseUserOutput struct{ *pulumi.OutputState }

func (DatabaseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseUser)(nil))
}

func (o DatabaseUserOutput) ToDatabaseUserOutput() DatabaseUserOutput {
	return o
}

func (o DatabaseUserOutput) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserInput)(nil)).Elem(), &DatabaseUser{})
	pulumi.RegisterOutputType(DatabaseUserOutput{})
}
