// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseUser struct {
	pulumi.CustomResourceState

	// Instance on which the user is created
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Grant admin permissions to database user
	IsAdmin pulumi.BoolPtrOutput `pulumi:"isAdmin"`
	// Database user name
	Name pulumi.StringOutput `pulumi:"name"`
	// Database user password
	Password pulumi.StringOutput `pulumi:"password"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewDatabaseUser(ctx *pulumi.Context,
	name string, args *DatabaseUserArgs, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DatabaseUser
	err := ctx.RegisterResource("scaleway:index/databaseUser:DatabaseUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseUser gets an existing DatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseUserState, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	var resource DatabaseUser
	err := ctx.ReadResource("scaleway:index/databaseUser:DatabaseUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseUser resources.
type databaseUserState struct {
	// Instance on which the user is created
	InstanceId *string `pulumi:"instanceId"`
	// Grant admin permissions to database user
	IsAdmin *bool `pulumi:"isAdmin"`
	// Database user name
	Name *string `pulumi:"name"`
	// Database user password
	Password *string `pulumi:"password"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

type DatabaseUserState struct {
	// Instance on which the user is created
	InstanceId pulumi.StringPtrInput
	// Grant admin permissions to database user
	IsAdmin pulumi.BoolPtrInput
	// Database user name
	Name pulumi.StringPtrInput
	// Database user password
	Password pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (DatabaseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserState)(nil)).Elem()
}

type databaseUserArgs struct {
	// Instance on which the user is created
	InstanceId string `pulumi:"instanceId"`
	// Grant admin permissions to database user
	IsAdmin *bool `pulumi:"isAdmin"`
	// Database user name
	Name *string `pulumi:"name"`
	// Database user password
	Password string `pulumi:"password"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a DatabaseUser resource.
type DatabaseUserArgs struct {
	// Instance on which the user is created
	InstanceId pulumi.StringInput
	// Grant admin permissions to database user
	IsAdmin pulumi.BoolPtrInput
	// Database user name
	Name pulumi.StringPtrInput
	// Database user password
	Password pulumi.StringInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (DatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserArgs)(nil)).Elem()
}

type DatabaseUserInput interface {
	pulumi.Input

	ToDatabaseUserOutput() DatabaseUserOutput
	ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput
}

func (*DatabaseUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseUser)(nil)).Elem()
}

func (i *DatabaseUser) ToDatabaseUserOutput() DatabaseUserOutput {
	return i.ToDatabaseUserOutputWithContext(context.Background())
}

func (i *DatabaseUser) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseUserOutput)
}

type DatabaseUserOutput struct{ *pulumi.OutputState }

func (DatabaseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseUser)(nil)).Elem()
}

func (o DatabaseUserOutput) ToDatabaseUserOutput() DatabaseUserOutput {
	return o
}

func (o DatabaseUserOutput) ToDatabaseUserOutputWithContext(ctx context.Context) DatabaseUserOutput {
	return o
}

// Instance on which the user is created
func (o DatabaseUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Grant admin permissions to database user
func (o DatabaseUserOutput) IsAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.BoolPtrOutput { return v.IsAdmin }).(pulumi.BoolPtrOutput)
}

// Database user name
func (o DatabaseUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Database user password
func (o DatabaseUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The region you want to attach the resource to
func (o DatabaseUserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseUser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseUserInput)(nil)).Elem(), &DatabaseUser{})
	pulumi.RegisterOutputType(DatabaseUserOutput{})
}
