// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccountSshKey struct {
	pulumi.CustomResourceState

	// The name of the SSH key
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The public SSH key
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
}

// NewAccountSshKey registers a new resource with the given unique name, arguments, and options.
func NewAccountSshKey(ctx *pulumi.Context,
	name string, args *AccountSshKeyArgs, opts ...pulumi.ResourceOption) (*AccountSshKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AccountSshKey
	err := ctx.RegisterResource("scaleway:index/accountSshKey:AccountSshKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountSshKey gets an existing AccountSshKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountSshKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountSshKeyState, opts ...pulumi.ResourceOption) (*AccountSshKey, error) {
	var resource AccountSshKey
	err := ctx.ReadResource("scaleway:index/accountSshKey:AccountSshKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountSshKey resources.
type accountSshKeyState struct {
	// The name of the SSH key
	Name *string `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The public SSH key
	PublicKey *string `pulumi:"publicKey"`
}

type AccountSshKeyState struct {
	// The name of the SSH key
	Name pulumi.StringPtrInput
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The public SSH key
	PublicKey pulumi.StringPtrInput
}

func (AccountSshKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountSshKeyState)(nil)).Elem()
}

type accountSshKeyArgs struct {
	// The name of the SSH key
	Name *string `pulumi:"name"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The public SSH key
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a AccountSshKey resource.
type AccountSshKeyArgs struct {
	// The name of the SSH key
	Name pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The public SSH key
	PublicKey pulumi.StringInput
}

func (AccountSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountSshKeyArgs)(nil)).Elem()
}

type AccountSshKeyInput interface {
	pulumi.Input

	ToAccountSshKeyOutput() AccountSshKeyOutput
	ToAccountSshKeyOutputWithContext(ctx context.Context) AccountSshKeyOutput
}

func (*AccountSshKey) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountSshKey)(nil)).Elem()
}

func (i *AccountSshKey) ToAccountSshKeyOutput() AccountSshKeyOutput {
	return i.ToAccountSshKeyOutputWithContext(context.Background())
}

func (i *AccountSshKey) ToAccountSshKeyOutputWithContext(ctx context.Context) AccountSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountSshKeyOutput)
}

type AccountSshKeyOutput struct{ *pulumi.OutputState }

func (AccountSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountSshKey)(nil)).Elem()
}

func (o AccountSshKeyOutput) ToAccountSshKeyOutput() AccountSshKeyOutput {
	return o
}

func (o AccountSshKeyOutput) ToAccountSshKeyOutputWithContext(ctx context.Context) AccountSshKeyOutput {
	return o
}

// The name of the SSH key
func (o AccountSshKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountSshKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization_id you want to attach the resource to
func (o AccountSshKeyOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountSshKey) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The project_id you want to attach the resource to
func (o AccountSshKeyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountSshKey) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The public SSH key
func (o AccountSshKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountSshKey) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountSshKeyInput)(nil)).Elem(), &AccountSshKey{})
	pulumi.RegisterOutputType(AccountSshKeyOutput{})
}
