// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages user SSH keys to access servers provisioned on Scaleway.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := scaleway.NewAccountSshKey(ctx, "main", &scaleway.AccountSshKeyArgs{
// 			PublicKey: pulumi.String("<YOUR-PUBLIC-SSH-KEY>"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SSH keys can be imported using the `id`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/accountSshKey:AccountSshKey main 11111111-1111-1111-1111-111111111111
// ```
type AccountSshKey struct {
	pulumi.CustomResourceState

	// The name of the SSH key.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID the SSH key is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The public SSH key to be added.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
}

// NewAccountSshKey registers a new resource with the given unique name, arguments, and options.
func NewAccountSshKey(ctx *pulumi.Context,
	name string, args *AccountSshKeyArgs, opts ...pulumi.ResourceOption) (*AccountSshKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AccountSshKey
	err := ctx.RegisterResource("scaleway:index/accountSshKey:AccountSshKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountSshKey gets an existing AccountSshKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountSshKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountSshKeyState, opts ...pulumi.ResourceOption) (*AccountSshKey, error) {
	var resource AccountSshKey
	err := ctx.ReadResource("scaleway:index/accountSshKey:AccountSshKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountSshKey resources.
type accountSshKeyState struct {
	// The name of the SSH key.
	Name *string `pulumi:"name"`
	// The organization ID the SSH key is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The public SSH key to be added.
	PublicKey *string `pulumi:"publicKey"`
}

type AccountSshKeyState struct {
	// The name of the SSH key.
	Name pulumi.StringPtrInput
	// The organization ID the SSH key is associated with.
	OrganizationId pulumi.StringPtrInput
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId pulumi.StringPtrInput
	// The public SSH key to be added.
	PublicKey pulumi.StringPtrInput
}

func (AccountSshKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountSshKeyState)(nil)).Elem()
}

type accountSshKeyArgs struct {
	// The name of the SSH key.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The public SSH key to be added.
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a AccountSshKey resource.
type AccountSshKeyArgs struct {
	// The name of the SSH key.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId pulumi.StringPtrInput
	// The public SSH key to be added.
	PublicKey pulumi.StringInput
}

func (AccountSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountSshKeyArgs)(nil)).Elem()
}

type AccountSshKeyInput interface {
	pulumi.Input

	ToAccountSshKeyOutput() AccountSshKeyOutput
	ToAccountSshKeyOutputWithContext(ctx context.Context) AccountSshKeyOutput
}

func (*AccountSshKey) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountSshKey)(nil)).Elem()
}

func (i *AccountSshKey) ToAccountSshKeyOutput() AccountSshKeyOutput {
	return i.ToAccountSshKeyOutputWithContext(context.Background())
}

func (i *AccountSshKey) ToAccountSshKeyOutputWithContext(ctx context.Context) AccountSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountSshKeyOutput)
}

type AccountSshKeyOutput struct{ *pulumi.OutputState }

func (AccountSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountSshKey)(nil)).Elem()
}

func (o AccountSshKeyOutput) ToAccountSshKeyOutput() AccountSshKeyOutput {
	return o
}

func (o AccountSshKeyOutput) ToAccountSshKeyOutputWithContext(ctx context.Context) AccountSshKeyOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountSshKeyInput)(nil)).Elem(), &AccountSshKey{})
	pulumi.RegisterOutputType(AccountSshKeyOutput{})
}
