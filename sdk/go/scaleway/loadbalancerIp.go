// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoadbalancerIp struct {
	pulumi.CustomResourceState

	// The load-balancer public IP address
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The ID of the load balancer attached to this IP, if any
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region of the resource
	Region pulumi.StringOutput `pulumi:"region"`
	// The reverse domain name for this IP
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// The zone you want to attach the resource to
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewLoadbalancerIp registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerIp(ctx *pulumi.Context,
	name string, args *LoadbalancerIpArgs, opts ...pulumi.ResourceOption) (*LoadbalancerIp, error) {
	if args == nil {
		args = &LoadbalancerIpArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource LoadbalancerIp
	err := ctx.RegisterResource("scaleway:index/loadbalancerIp:LoadbalancerIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerIp gets an existing LoadbalancerIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerIpState, opts ...pulumi.ResourceOption) (*LoadbalancerIp, error) {
	var resource LoadbalancerIp
	err := ctx.ReadResource("scaleway:index/loadbalancerIp:LoadbalancerIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerIp resources.
type loadbalancerIpState struct {
	// The load-balancer public IP address
	IpAddress *string `pulumi:"ipAddress"`
	// The ID of the load balancer attached to this IP, if any
	LbId *string `pulumi:"lbId"`
	// The organization_id you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region of the resource
	Region *string `pulumi:"region"`
	// The reverse domain name for this IP
	Reverse *string `pulumi:"reverse"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

type LoadbalancerIpState struct {
	// The load-balancer public IP address
	IpAddress pulumi.StringPtrInput
	// The ID of the load balancer attached to this IP, if any
	LbId pulumi.StringPtrInput
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region of the resource
	Region pulumi.StringPtrInput
	// The reverse domain name for this IP
	Reverse pulumi.StringPtrInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (LoadbalancerIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerIpState)(nil)).Elem()
}

type loadbalancerIpArgs struct {
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The reverse domain name for this IP
	Reverse *string `pulumi:"reverse"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a LoadbalancerIp resource.
type LoadbalancerIpArgs struct {
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The reverse domain name for this IP
	Reverse pulumi.StringPtrInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (LoadbalancerIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerIpArgs)(nil)).Elem()
}

type LoadbalancerIpInput interface {
	pulumi.Input

	ToLoadbalancerIpOutput() LoadbalancerIpOutput
	ToLoadbalancerIpOutputWithContext(ctx context.Context) LoadbalancerIpOutput
}

func (*LoadbalancerIp) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerIp)(nil)).Elem()
}

func (i *LoadbalancerIp) ToLoadbalancerIpOutput() LoadbalancerIpOutput {
	return i.ToLoadbalancerIpOutputWithContext(context.Background())
}

func (i *LoadbalancerIp) ToLoadbalancerIpOutputWithContext(ctx context.Context) LoadbalancerIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerIpOutput)
}

type LoadbalancerIpOutput struct{ *pulumi.OutputState }

func (LoadbalancerIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerIp)(nil)).Elem()
}

func (o LoadbalancerIpOutput) ToLoadbalancerIpOutput() LoadbalancerIpOutput {
	return o
}

func (o LoadbalancerIpOutput) ToLoadbalancerIpOutputWithContext(ctx context.Context) LoadbalancerIpOutput {
	return o
}

// The load-balancer public IP address
func (o LoadbalancerIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// The ID of the load balancer attached to this IP, if any
func (o LoadbalancerIpOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.LbId }).(pulumi.StringOutput)
}

// The organization_id you want to attach the resource to
func (o LoadbalancerIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The project_id you want to attach the resource to
func (o LoadbalancerIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region of the resource
func (o LoadbalancerIpOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The reverse domain name for this IP
func (o LoadbalancerIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// The zone you want to attach the resource to
func (o LoadbalancerIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerIpInput)(nil)).Elem(), &LoadbalancerIp{})
	pulumi.RegisterOutputType(LoadbalancerIpOutput{})
}
