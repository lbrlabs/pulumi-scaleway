// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstancePrivateNic struct {
	pulumi.CustomResourceState

	// MAC address of the NIC
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// The private network ID
	PrivateNetworkId pulumi.StringOutput `pulumi:"privateNetworkId"`
	// The server ID
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The zone you want to attach the resource to
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstancePrivateNic registers a new resource with the given unique name, arguments, and options.
func NewInstancePrivateNic(ctx *pulumi.Context,
	name string, args *InstancePrivateNicArgs, opts ...pulumi.ResourceOption) (*InstancePrivateNic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateNetworkId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InstancePrivateNic
	err := ctx.RegisterResource("scaleway:index/instancePrivateNic:InstancePrivateNic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstancePrivateNic gets an existing InstancePrivateNic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstancePrivateNic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstancePrivateNicState, opts ...pulumi.ResourceOption) (*InstancePrivateNic, error) {
	var resource InstancePrivateNic
	err := ctx.ReadResource("scaleway:index/instancePrivateNic:InstancePrivateNic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstancePrivateNic resources.
type instancePrivateNicState struct {
	// MAC address of the NIC
	MacAddress *string `pulumi:"macAddress"`
	// The private network ID
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// The server ID
	ServerId *string `pulumi:"serverId"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

type InstancePrivateNicState struct {
	// MAC address of the NIC
	MacAddress pulumi.StringPtrInput
	// The private network ID
	PrivateNetworkId pulumi.StringPtrInput
	// The server ID
	ServerId pulumi.StringPtrInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (InstancePrivateNicState) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePrivateNicState)(nil)).Elem()
}

type instancePrivateNicArgs struct {
	// The private network ID
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// The server ID
	ServerId string `pulumi:"serverId"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InstancePrivateNic resource.
type InstancePrivateNicArgs struct {
	// The private network ID
	PrivateNetworkId pulumi.StringInput
	// The server ID
	ServerId pulumi.StringInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (InstancePrivateNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePrivateNicArgs)(nil)).Elem()
}

type InstancePrivateNicInput interface {
	pulumi.Input

	ToInstancePrivateNicOutput() InstancePrivateNicOutput
	ToInstancePrivateNicOutputWithContext(ctx context.Context) InstancePrivateNicOutput
}

func (*InstancePrivateNic) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePrivateNic)(nil)).Elem()
}

func (i *InstancePrivateNic) ToInstancePrivateNicOutput() InstancePrivateNicOutput {
	return i.ToInstancePrivateNicOutputWithContext(context.Background())
}

func (i *InstancePrivateNic) ToInstancePrivateNicOutputWithContext(ctx context.Context) InstancePrivateNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePrivateNicOutput)
}

// InstancePrivateNicArrayInput is an input type that accepts InstancePrivateNicArray and InstancePrivateNicArrayOutput values.
// You can construct a concrete instance of `InstancePrivateNicArrayInput` via:
//
//	InstancePrivateNicArray{ InstancePrivateNicArgs{...} }
type InstancePrivateNicArrayInput interface {
	pulumi.Input

	ToInstancePrivateNicArrayOutput() InstancePrivateNicArrayOutput
	ToInstancePrivateNicArrayOutputWithContext(context.Context) InstancePrivateNicArrayOutput
}

type InstancePrivateNicArray []InstancePrivateNicInput

func (InstancePrivateNicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstancePrivateNic)(nil)).Elem()
}

func (i InstancePrivateNicArray) ToInstancePrivateNicArrayOutput() InstancePrivateNicArrayOutput {
	return i.ToInstancePrivateNicArrayOutputWithContext(context.Background())
}

func (i InstancePrivateNicArray) ToInstancePrivateNicArrayOutputWithContext(ctx context.Context) InstancePrivateNicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePrivateNicArrayOutput)
}

// InstancePrivateNicMapInput is an input type that accepts InstancePrivateNicMap and InstancePrivateNicMapOutput values.
// You can construct a concrete instance of `InstancePrivateNicMapInput` via:
//
//	InstancePrivateNicMap{ "key": InstancePrivateNicArgs{...} }
type InstancePrivateNicMapInput interface {
	pulumi.Input

	ToInstancePrivateNicMapOutput() InstancePrivateNicMapOutput
	ToInstancePrivateNicMapOutputWithContext(context.Context) InstancePrivateNicMapOutput
}

type InstancePrivateNicMap map[string]InstancePrivateNicInput

func (InstancePrivateNicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstancePrivateNic)(nil)).Elem()
}

func (i InstancePrivateNicMap) ToInstancePrivateNicMapOutput() InstancePrivateNicMapOutput {
	return i.ToInstancePrivateNicMapOutputWithContext(context.Background())
}

func (i InstancePrivateNicMap) ToInstancePrivateNicMapOutputWithContext(ctx context.Context) InstancePrivateNicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePrivateNicMapOutput)
}

type InstancePrivateNicOutput struct{ *pulumi.OutputState }

func (InstancePrivateNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePrivateNic)(nil)).Elem()
}

func (o InstancePrivateNicOutput) ToInstancePrivateNicOutput() InstancePrivateNicOutput {
	return o
}

func (o InstancePrivateNicOutput) ToInstancePrivateNicOutputWithContext(ctx context.Context) InstancePrivateNicOutput {
	return o
}

// MAC address of the NIC
func (o InstancePrivateNicOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePrivateNic) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// The private network ID
func (o InstancePrivateNicOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePrivateNic) pulumi.StringOutput { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// The server ID
func (o InstancePrivateNicOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePrivateNic) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The zone you want to attach the resource to
func (o InstancePrivateNicOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePrivateNic) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type InstancePrivateNicArrayOutput struct{ *pulumi.OutputState }

func (InstancePrivateNicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstancePrivateNic)(nil)).Elem()
}

func (o InstancePrivateNicArrayOutput) ToInstancePrivateNicArrayOutput() InstancePrivateNicArrayOutput {
	return o
}

func (o InstancePrivateNicArrayOutput) ToInstancePrivateNicArrayOutputWithContext(ctx context.Context) InstancePrivateNicArrayOutput {
	return o
}

func (o InstancePrivateNicArrayOutput) Index(i pulumi.IntInput) InstancePrivateNicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstancePrivateNic {
		return vs[0].([]*InstancePrivateNic)[vs[1].(int)]
	}).(InstancePrivateNicOutput)
}

type InstancePrivateNicMapOutput struct{ *pulumi.OutputState }

func (InstancePrivateNicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstancePrivateNic)(nil)).Elem()
}

func (o InstancePrivateNicMapOutput) ToInstancePrivateNicMapOutput() InstancePrivateNicMapOutput {
	return o
}

func (o InstancePrivateNicMapOutput) ToInstancePrivateNicMapOutputWithContext(ctx context.Context) InstancePrivateNicMapOutput {
	return o
}

func (o InstancePrivateNicMapOutput) MapIndex(k pulumi.StringInput) InstancePrivateNicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstancePrivateNic {
		return vs[0].(map[string]*InstancePrivateNic)[vs[1].(string)]
	}).(InstancePrivateNicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePrivateNicInput)(nil)).Elem(), &InstancePrivateNic{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePrivateNicArrayInput)(nil)).Elem(), InstancePrivateNicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePrivateNicMapInput)(nil)).Elem(), InstancePrivateNicMap{})
	pulumi.RegisterOutputType(InstancePrivateNicOutput{})
	pulumi.RegisterOutputType(InstancePrivateNicArrayOutput{})
	pulumi.RegisterOutputType(InstancePrivateNicMapOutput{})
}
