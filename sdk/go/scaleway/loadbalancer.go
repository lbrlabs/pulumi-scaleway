// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Loadbalancer struct {
	pulumi.CustomResourceState

	// The load-balance public IP address
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The load-balance public IP ID
	IpId pulumi.StringOutput `pulumi:"ipId"`
	// Name of the lb
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// List of private network to connect with your load balancer
	PrivateNetworks LoadbalancerPrivateNetworkArrayOutput `pulumi:"privateNetworks"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region of the resource
	Region pulumi.StringOutput `pulumi:"region"`
	// Release the IPs related to this load-balancer
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp pulumi.BoolPtrOutput `pulumi:"releaseIp"`
	// Array of tags to associate with the load-balancer
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of load-balancer you want to create
	Type pulumi.StringOutput `pulumi:"type"`
	// The zone you want to attach the resource to
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewLoadbalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancer(ctx *pulumi.Context,
	name string, args *LoadbalancerArgs, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpId == nil {
		return nil, errors.New("invalid value for required argument 'IpId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Loadbalancer
	err := ctx.RegisterResource("scaleway:index/loadbalancer:Loadbalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancer gets an existing Loadbalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerState, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	var resource Loadbalancer
	err := ctx.ReadResource("scaleway:index/loadbalancer:Loadbalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Loadbalancer resources.
type loadbalancerState struct {
	// The load-balance public IP address
	IpAddress *string `pulumi:"ipAddress"`
	// The load-balance public IP ID
	IpId *string `pulumi:"ipId"`
	// Name of the lb
	Name *string `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// List of private network to connect with your load balancer
	PrivateNetworks []LoadbalancerPrivateNetwork `pulumi:"privateNetworks"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region of the resource
	Region *string `pulumi:"region"`
	// Release the IPs related to this load-balancer
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp *bool `pulumi:"releaseIp"`
	// Array of tags to associate with the load-balancer
	Tags []string `pulumi:"tags"`
	// The type of load-balancer you want to create
	Type *string `pulumi:"type"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

type LoadbalancerState struct {
	// The load-balance public IP address
	IpAddress pulumi.StringPtrInput
	// The load-balance public IP ID
	IpId pulumi.StringPtrInput
	// Name of the lb
	Name pulumi.StringPtrInput
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// List of private network to connect with your load balancer
	PrivateNetworks LoadbalancerPrivateNetworkArrayInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region of the resource
	Region pulumi.StringPtrInput
	// Release the IPs related to this load-balancer
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp pulumi.BoolPtrInput
	// Array of tags to associate with the load-balancer
	Tags pulumi.StringArrayInput
	// The type of load-balancer you want to create
	Type pulumi.StringPtrInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (LoadbalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerState)(nil)).Elem()
}

type loadbalancerArgs struct {
	// The load-balance public IP ID
	IpId string `pulumi:"ipId"`
	// Name of the lb
	Name *string `pulumi:"name"`
	// List of private network to connect with your load balancer
	PrivateNetworks []LoadbalancerPrivateNetwork `pulumi:"privateNetworks"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// Release the IPs related to this load-balancer
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp *bool `pulumi:"releaseIp"`
	// Array of tags to associate with the load-balancer
	Tags []string `pulumi:"tags"`
	// The type of load-balancer you want to create
	Type string `pulumi:"type"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Loadbalancer resource.
type LoadbalancerArgs struct {
	// The load-balance public IP ID
	IpId pulumi.StringInput
	// Name of the lb
	Name pulumi.StringPtrInput
	// List of private network to connect with your load balancer
	PrivateNetworks LoadbalancerPrivateNetworkArrayInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// Release the IPs related to this load-balancer
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp pulumi.BoolPtrInput
	// Array of tags to associate with the load-balancer
	Tags pulumi.StringArrayInput
	// The type of load-balancer you want to create
	Type pulumi.StringInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (LoadbalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerArgs)(nil)).Elem()
}

type LoadbalancerInput interface {
	pulumi.Input

	ToLoadbalancerOutput() LoadbalancerOutput
	ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput
}

func (*Loadbalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (i *Loadbalancer) ToLoadbalancerOutput() LoadbalancerOutput {
	return i.ToLoadbalancerOutputWithContext(context.Background())
}

func (i *Loadbalancer) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOutput)
}

type LoadbalancerOutput struct{ *pulumi.OutputState }

func (LoadbalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerOutput) ToLoadbalancerOutput() LoadbalancerOutput {
	return o
}

func (o LoadbalancerOutput) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerInput)(nil)).Elem(), &Loadbalancer{})
	pulumi.RegisterOutputType(LoadbalancerOutput{})
}
