// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// IoT Hubs can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/iotHub:IotHub hub01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type IotHub struct {
	pulumi.CustomResourceState

	// The current number of connected devices in the Hub.
	ConnectedDeviceCount pulumi.IntOutput `pulumi:"connectedDeviceCount"`
	// The date and time the Hub was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning pulumi.BoolPtrOutput `pulumi:"deviceAutoProvisioning"`
	// The number of registered devices in the Hub.
	DeviceCount pulumi.IntOutput `pulumi:"deviceCount"`
	// Whether to enable the hub events or not
	DisableEvents pulumi.BoolPtrOutput `pulumi:"disableEvents"`
	// Wether the IoT Hub instance should be enabled or not.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The MQTT network endpoint to connect MQTT devices to.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Topic prefix for the hub events
	EventsTopicPrefix pulumi.StringPtrOutput `pulumi:"eventsTopicPrefix"`
	// Custom user provided certificate authority
	HubCa pulumi.StringPtrOutput `pulumi:"hubCa"`
	// Challenge certificate for the user provided hub CA
	HubCaChallenge pulumi.StringPtrOutput `pulumi:"hubCaChallenge"`
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	ProductPlan pulumi.StringOutput `pulumi:"productPlan"`
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// The current status of the Hub.
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time the Hub resource was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewIotHub registers a new resource with the given unique name, arguments, and options.
func NewIotHub(ctx *pulumi.Context,
	name string, args *IotHubArgs, opts ...pulumi.ResourceOption) (*IotHub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProductPlan == nil {
		return nil, errors.New("invalid value for required argument 'ProductPlan'")
	}
	var resource IotHub
	err := ctx.RegisterResource("scaleway:index/iotHub:IotHub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIotHub gets an existing IotHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIotHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IotHubState, opts ...pulumi.ResourceOption) (*IotHub, error) {
	var resource IotHub
	err := ctx.ReadResource("scaleway:index/iotHub:IotHub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IotHub resources.
type iotHubState struct {
	// The current number of connected devices in the Hub.
	ConnectedDeviceCount *int `pulumi:"connectedDeviceCount"`
	// The date and time the Hub was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning *bool `pulumi:"deviceAutoProvisioning"`
	// The number of registered devices in the Hub.
	DeviceCount *int `pulumi:"deviceCount"`
	// Whether to enable the hub events or not
	DisableEvents *bool `pulumi:"disableEvents"`
	// Wether the IoT Hub instance should be enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// The MQTT network endpoint to connect MQTT devices to.
	Endpoint *string `pulumi:"endpoint"`
	// Topic prefix for the hub events
	EventsTopicPrefix *string `pulumi:"eventsTopicPrefix"`
	// Custom user provided certificate authority
	HubCa *string `pulumi:"hubCa"`
	// Challenge certificate for the user provided hub CA
	HubCaChallenge *string `pulumi:"hubCaChallenge"`
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name *string `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	ProductPlan *string `pulumi:"productPlan"`
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
	// The current status of the Hub.
	Status *string `pulumi:"status"`
	// The date and time the Hub resource was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type IotHubState struct {
	// The current number of connected devices in the Hub.
	ConnectedDeviceCount pulumi.IntPtrInput
	// The date and time the Hub was created.
	CreatedAt pulumi.StringPtrInput
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning pulumi.BoolPtrInput
	// The number of registered devices in the Hub.
	DeviceCount pulumi.IntPtrInput
	// Whether to enable the hub events or not
	DisableEvents pulumi.BoolPtrInput
	// Wether the IoT Hub instance should be enabled or not.
	Enabled pulumi.BoolPtrInput
	// The MQTT network endpoint to connect MQTT devices to.
	Endpoint pulumi.StringPtrInput
	// Topic prefix for the hub events
	EventsTopicPrefix pulumi.StringPtrInput
	// Custom user provided certificate authority
	HubCa pulumi.StringPtrInput
	// Challenge certificate for the user provided hub CA
	HubCaChallenge pulumi.StringPtrInput
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name pulumi.StringPtrInput
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	ProductPlan pulumi.StringPtrInput
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
	// The current status of the Hub.
	Status pulumi.StringPtrInput
	// The date and time the Hub resource was updated.
	UpdatedAt pulumi.StringPtrInput
}

func (IotHubState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotHubState)(nil)).Elem()
}

type iotHubArgs struct {
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning *bool `pulumi:"deviceAutoProvisioning"`
	// Whether to enable the hub events or not
	DisableEvents *bool `pulumi:"disableEvents"`
	// Wether the IoT Hub instance should be enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Topic prefix for the hub events
	EventsTopicPrefix *string `pulumi:"eventsTopicPrefix"`
	// Custom user provided certificate authority
	HubCa *string `pulumi:"hubCa"`
	// Challenge certificate for the user provided hub CA
	HubCaChallenge *string `pulumi:"hubCaChallenge"`
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name *string `pulumi:"name"`
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	ProductPlan string `pulumi:"productPlan"`
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a IotHub resource.
type IotHubArgs struct {
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning pulumi.BoolPtrInput
	// Whether to enable the hub events or not
	DisableEvents pulumi.BoolPtrInput
	// Wether the IoT Hub instance should be enabled or not.
	Enabled pulumi.BoolPtrInput
	// Topic prefix for the hub events
	EventsTopicPrefix pulumi.StringPtrInput
	// Custom user provided certificate authority
	HubCa pulumi.StringPtrInput
	// Challenge certificate for the user provided hub CA
	HubCaChallenge pulumi.StringPtrInput
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name pulumi.StringPtrInput
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	ProductPlan pulumi.StringInput
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
}

func (IotHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotHubArgs)(nil)).Elem()
}

type IotHubInput interface {
	pulumi.Input

	ToIotHubOutput() IotHubOutput
	ToIotHubOutputWithContext(ctx context.Context) IotHubOutput
}

func (*IotHub) ElementType() reflect.Type {
	return reflect.TypeOf((**IotHub)(nil)).Elem()
}

func (i *IotHub) ToIotHubOutput() IotHubOutput {
	return i.ToIotHubOutputWithContext(context.Background())
}

func (i *IotHub) ToIotHubOutputWithContext(ctx context.Context) IotHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotHubOutput)
}

type IotHubOutput struct{ *pulumi.OutputState }

func (IotHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotHub)(nil)).Elem()
}

func (o IotHubOutput) ToIotHubOutput() IotHubOutput {
	return o
}

func (o IotHubOutput) ToIotHubOutputWithContext(ctx context.Context) IotHubOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IotHubInput)(nil)).Elem(), &IotHub{})
	pulumi.RegisterOutputType(IotHubOutput{})
}
