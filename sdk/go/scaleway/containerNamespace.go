// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContainerNamespace struct {
	pulumi.CustomResourceState

	// The description of the container namespace
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The environment variables of the container namespace
	EnvironmentVariables pulumi.StringMapOutput `pulumi:"environmentVariables"`
	// The name of the container namespace
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// The endpoint reachable by docker
	RegistryEndpoint pulumi.StringOutput `pulumi:"registryEndpoint"`
	// The ID of the registry namespace
	RegistryNamespaceId pulumi.StringOutput `pulumi:"registryNamespaceId"`
}

// NewContainerNamespace registers a new resource with the given unique name, arguments, and options.
func NewContainerNamespace(ctx *pulumi.Context,
	name string, args *ContainerNamespaceArgs, opts ...pulumi.ResourceOption) (*ContainerNamespace, error) {
	if args == nil {
		args = &ContainerNamespaceArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ContainerNamespace
	err := ctx.RegisterResource("scaleway:index/containerNamespace:ContainerNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerNamespace gets an existing ContainerNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerNamespaceState, opts ...pulumi.ResourceOption) (*ContainerNamespace, error) {
	var resource ContainerNamespace
	err := ctx.ReadResource("scaleway:index/containerNamespace:ContainerNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerNamespace resources.
type containerNamespaceState struct {
	// The description of the container namespace
	Description *string `pulumi:"description"`
	// The environment variables of the container namespace
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the container namespace
	Name *string `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// The endpoint reachable by docker
	RegistryEndpoint *string `pulumi:"registryEndpoint"`
	// The ID of the registry namespace
	RegistryNamespaceId *string `pulumi:"registryNamespaceId"`
}

type ContainerNamespaceState struct {
	// The description of the container namespace
	Description pulumi.StringPtrInput
	// The environment variables of the container namespace
	EnvironmentVariables pulumi.StringMapInput
	// The name of the container namespace
	Name pulumi.StringPtrInput
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// The endpoint reachable by docker
	RegistryEndpoint pulumi.StringPtrInput
	// The ID of the registry namespace
	RegistryNamespaceId pulumi.StringPtrInput
}

func (ContainerNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerNamespaceState)(nil)).Elem()
}

type containerNamespaceArgs struct {
	// The description of the container namespace
	Description *string `pulumi:"description"`
	// The environment variables of the container namespace
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the container namespace
	Name *string `pulumi:"name"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ContainerNamespace resource.
type ContainerNamespaceArgs struct {
	// The description of the container namespace
	Description pulumi.StringPtrInput
	// The environment variables of the container namespace
	EnvironmentVariables pulumi.StringMapInput
	// The name of the container namespace
	Name pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (ContainerNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerNamespaceArgs)(nil)).Elem()
}

type ContainerNamespaceInput interface {
	pulumi.Input

	ToContainerNamespaceOutput() ContainerNamespaceOutput
	ToContainerNamespaceOutputWithContext(ctx context.Context) ContainerNamespaceOutput
}

func (*ContainerNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerNamespace)(nil)).Elem()
}

func (i *ContainerNamespace) ToContainerNamespaceOutput() ContainerNamespaceOutput {
	return i.ToContainerNamespaceOutputWithContext(context.Background())
}

func (i *ContainerNamespace) ToContainerNamespaceOutputWithContext(ctx context.Context) ContainerNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerNamespaceOutput)
}

// ContainerNamespaceArrayInput is an input type that accepts ContainerNamespaceArray and ContainerNamespaceArrayOutput values.
// You can construct a concrete instance of `ContainerNamespaceArrayInput` via:
//
//	ContainerNamespaceArray{ ContainerNamespaceArgs{...} }
type ContainerNamespaceArrayInput interface {
	pulumi.Input

	ToContainerNamespaceArrayOutput() ContainerNamespaceArrayOutput
	ToContainerNamespaceArrayOutputWithContext(context.Context) ContainerNamespaceArrayOutput
}

type ContainerNamespaceArray []ContainerNamespaceInput

func (ContainerNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerNamespace)(nil)).Elem()
}

func (i ContainerNamespaceArray) ToContainerNamespaceArrayOutput() ContainerNamespaceArrayOutput {
	return i.ToContainerNamespaceArrayOutputWithContext(context.Background())
}

func (i ContainerNamespaceArray) ToContainerNamespaceArrayOutputWithContext(ctx context.Context) ContainerNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerNamespaceArrayOutput)
}

// ContainerNamespaceMapInput is an input type that accepts ContainerNamespaceMap and ContainerNamespaceMapOutput values.
// You can construct a concrete instance of `ContainerNamespaceMapInput` via:
//
//	ContainerNamespaceMap{ "key": ContainerNamespaceArgs{...} }
type ContainerNamespaceMapInput interface {
	pulumi.Input

	ToContainerNamespaceMapOutput() ContainerNamespaceMapOutput
	ToContainerNamespaceMapOutputWithContext(context.Context) ContainerNamespaceMapOutput
}

type ContainerNamespaceMap map[string]ContainerNamespaceInput

func (ContainerNamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerNamespace)(nil)).Elem()
}

func (i ContainerNamespaceMap) ToContainerNamespaceMapOutput() ContainerNamespaceMapOutput {
	return i.ToContainerNamespaceMapOutputWithContext(context.Background())
}

func (i ContainerNamespaceMap) ToContainerNamespaceMapOutputWithContext(ctx context.Context) ContainerNamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerNamespaceMapOutput)
}

type ContainerNamespaceOutput struct{ *pulumi.OutputState }

func (ContainerNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerNamespace)(nil)).Elem()
}

func (o ContainerNamespaceOutput) ToContainerNamespaceOutput() ContainerNamespaceOutput {
	return o
}

func (o ContainerNamespaceOutput) ToContainerNamespaceOutputWithContext(ctx context.Context) ContainerNamespaceOutput {
	return o
}

// The description of the container namespace
func (o ContainerNamespaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerNamespace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The environment variables of the container namespace
func (o ContainerNamespaceOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerNamespace) pulumi.StringMapOutput { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the container namespace
func (o ContainerNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization_id you want to attach the resource to
func (o ContainerNamespaceOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNamespace) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The project_id you want to attach the resource to
func (o ContainerNamespaceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNamespace) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region you want to attach the resource to
func (o ContainerNamespaceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNamespace) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The endpoint reachable by docker
func (o ContainerNamespaceOutput) RegistryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNamespace) pulumi.StringOutput { return v.RegistryEndpoint }).(pulumi.StringOutput)
}

// The ID of the registry namespace
func (o ContainerNamespaceOutput) RegistryNamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerNamespace) pulumi.StringOutput { return v.RegistryNamespaceId }).(pulumi.StringOutput)
}

type ContainerNamespaceArrayOutput struct{ *pulumi.OutputState }

func (ContainerNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerNamespace)(nil)).Elem()
}

func (o ContainerNamespaceArrayOutput) ToContainerNamespaceArrayOutput() ContainerNamespaceArrayOutput {
	return o
}

func (o ContainerNamespaceArrayOutput) ToContainerNamespaceArrayOutputWithContext(ctx context.Context) ContainerNamespaceArrayOutput {
	return o
}

func (o ContainerNamespaceArrayOutput) Index(i pulumi.IntInput) ContainerNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerNamespace {
		return vs[0].([]*ContainerNamespace)[vs[1].(int)]
	}).(ContainerNamespaceOutput)
}

type ContainerNamespaceMapOutput struct{ *pulumi.OutputState }

func (ContainerNamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerNamespace)(nil)).Elem()
}

func (o ContainerNamespaceMapOutput) ToContainerNamespaceMapOutput() ContainerNamespaceMapOutput {
	return o
}

func (o ContainerNamespaceMapOutput) ToContainerNamespaceMapOutputWithContext(ctx context.Context) ContainerNamespaceMapOutput {
	return o
}

func (o ContainerNamespaceMapOutput) MapIndex(k pulumi.StringInput) ContainerNamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerNamespace {
		return vs[0].(map[string]*ContainerNamespace)[vs[1].(string)]
	}).(ContainerNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerNamespaceInput)(nil)).Elem(), &ContainerNamespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerNamespaceArrayInput)(nil)).Elem(), ContainerNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerNamespaceMapInput)(nil)).Elem(), ContainerNamespaceMap{})
	pulumi.RegisterOutputType(ContainerNamespaceOutput{})
	pulumi.RegisterOutputType(ContainerNamespaceArrayOutput{})
	pulumi.RegisterOutputType(ContainerNamespaceMapOutput{})
}
