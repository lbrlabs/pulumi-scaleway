// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KubernetesCluster struct {
	pulumi.CustomResourceState

	// The list of admission plugins to enable on the cluster
	AdmissionPlugins pulumi.StringArrayOutput `pulumi:"admissionPlugins"`
	// Additional Subject Alternative Names for the Kubernetes API server certificate
	ApiserverCertSans pulumi.StringArrayOutput `pulumi:"apiserverCertSans"`
	// Kubernetes API server URL
	ApiserverUrl pulumi.StringOutput `pulumi:"apiserverUrl"`
	// The auto upgrade configuration for the cluster
	AutoUpgrade KubernetesClusterAutoUpgradeOutput `pulumi:"autoUpgrade"`
	// The autoscaler configuration for the cluster
	AutoscalerConfig KubernetesClusterAutoscalerConfigOutput `pulumi:"autoscalerConfig"`
	// The CNI plugin of the cluster
	Cni pulumi.StringOutput `pulumi:"cni"`
	// The date and time of the creation of the Kubernetes cluster
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Delete additional resources like block volumes and loadbalancers on cluster deletion
	DeleteAdditionalResources pulumi.BoolPtrOutput `pulumi:"deleteAdditionalResources"`
	// The description of the cluster
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The list of feature gates to enable on the cluster
	FeatureGates pulumi.StringArrayOutput `pulumi:"featureGates"`
	// The kubeconfig configuration file of the Kubernetes cluster
	Kubeconfigs KubernetesClusterKubeconfigArrayOutput `pulumi:"kubeconfigs"`
	// The name of the cluster
	Name pulumi.StringOutput `pulumi:"name"`
	// The OpenID Connect configuration of the cluster
	OpenIdConnectConfig KubernetesClusterOpenIdConnectConfigOutput `pulumi:"openIdConnectConfig"`
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of the cluster
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags associated with the cluster
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of cluster
	Type pulumi.StringOutput `pulumi:"type"`
	// The date and time of the last update of the Kubernetes cluster
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// True if an upgrade is available
	UpgradeAvailable pulumi.BoolOutput `pulumi:"upgradeAvailable"`
	// The version of the cluster
	Version pulumi.StringOutput `pulumi:"version"`
	// Wildcard DNS pointing to all the ready nodes
	WildcardDns pulumi.StringOutput `pulumi:"wildcardDns"`
}

// NewKubernetesCluster registers a new resource with the given unique name, arguments, and options.
func NewKubernetesCluster(ctx *pulumi.Context,
	name string, args *KubernetesClusterArgs, opts ...pulumi.ResourceOption) (*KubernetesCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cni == nil {
		return nil, errors.New("invalid value for required argument 'Cni'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource KubernetesCluster
	err := ctx.RegisterResource("scaleway:index/kubernetesCluster:KubernetesCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesCluster gets an existing KubernetesCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesClusterState, opts ...pulumi.ResourceOption) (*KubernetesCluster, error) {
	var resource KubernetesCluster
	err := ctx.ReadResource("scaleway:index/kubernetesCluster:KubernetesCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesCluster resources.
type kubernetesClusterState struct {
	// The list of admission plugins to enable on the cluster
	AdmissionPlugins []string `pulumi:"admissionPlugins"`
	// Additional Subject Alternative Names for the Kubernetes API server certificate
	ApiserverCertSans []string `pulumi:"apiserverCertSans"`
	// Kubernetes API server URL
	ApiserverUrl *string `pulumi:"apiserverUrl"`
	// The auto upgrade configuration for the cluster
	AutoUpgrade *KubernetesClusterAutoUpgrade `pulumi:"autoUpgrade"`
	// The autoscaler configuration for the cluster
	AutoscalerConfig *KubernetesClusterAutoscalerConfig `pulumi:"autoscalerConfig"`
	// The CNI plugin of the cluster
	Cni *string `pulumi:"cni"`
	// The date and time of the creation of the Kubernetes cluster
	CreatedAt *string `pulumi:"createdAt"`
	// Delete additional resources like block volumes and loadbalancers on cluster deletion
	DeleteAdditionalResources *bool `pulumi:"deleteAdditionalResources"`
	// The description of the cluster
	Description *string `pulumi:"description"`
	// The list of feature gates to enable on the cluster
	FeatureGates []string `pulumi:"featureGates"`
	// The kubeconfig configuration file of the Kubernetes cluster
	Kubeconfigs []KubernetesClusterKubeconfig `pulumi:"kubeconfigs"`
	// The name of the cluster
	Name *string `pulumi:"name"`
	// The OpenID Connect configuration of the cluster
	OpenIdConnectConfig *KubernetesClusterOpenIdConnectConfig `pulumi:"openIdConnectConfig"`
	// The organization_id you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// The status of the cluster
	Status *string `pulumi:"status"`
	// The tags associated with the cluster
	Tags []string `pulumi:"tags"`
	// The type of cluster
	Type *string `pulumi:"type"`
	// The date and time of the last update of the Kubernetes cluster
	UpdatedAt *string `pulumi:"updatedAt"`
	// True if an upgrade is available
	UpgradeAvailable *bool `pulumi:"upgradeAvailable"`
	// The version of the cluster
	Version *string `pulumi:"version"`
	// Wildcard DNS pointing to all the ready nodes
	WildcardDns *string `pulumi:"wildcardDns"`
}

type KubernetesClusterState struct {
	// The list of admission plugins to enable on the cluster
	AdmissionPlugins pulumi.StringArrayInput
	// Additional Subject Alternative Names for the Kubernetes API server certificate
	ApiserverCertSans pulumi.StringArrayInput
	// Kubernetes API server URL
	ApiserverUrl pulumi.StringPtrInput
	// The auto upgrade configuration for the cluster
	AutoUpgrade KubernetesClusterAutoUpgradePtrInput
	// The autoscaler configuration for the cluster
	AutoscalerConfig KubernetesClusterAutoscalerConfigPtrInput
	// The CNI plugin of the cluster
	Cni pulumi.StringPtrInput
	// The date and time of the creation of the Kubernetes cluster
	CreatedAt pulumi.StringPtrInput
	// Delete additional resources like block volumes and loadbalancers on cluster deletion
	DeleteAdditionalResources pulumi.BoolPtrInput
	// The description of the cluster
	Description pulumi.StringPtrInput
	// The list of feature gates to enable on the cluster
	FeatureGates pulumi.StringArrayInput
	// The kubeconfig configuration file of the Kubernetes cluster
	Kubeconfigs KubernetesClusterKubeconfigArrayInput
	// The name of the cluster
	Name pulumi.StringPtrInput
	// The OpenID Connect configuration of the cluster
	OpenIdConnectConfig KubernetesClusterOpenIdConnectConfigPtrInput
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// The status of the cluster
	Status pulumi.StringPtrInput
	// The tags associated with the cluster
	Tags pulumi.StringArrayInput
	// The type of cluster
	Type pulumi.StringPtrInput
	// The date and time of the last update of the Kubernetes cluster
	UpdatedAt pulumi.StringPtrInput
	// True if an upgrade is available
	UpgradeAvailable pulumi.BoolPtrInput
	// The version of the cluster
	Version pulumi.StringPtrInput
	// Wildcard DNS pointing to all the ready nodes
	WildcardDns pulumi.StringPtrInput
}

func (KubernetesClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesClusterState)(nil)).Elem()
}

type kubernetesClusterArgs struct {
	// The list of admission plugins to enable on the cluster
	AdmissionPlugins []string `pulumi:"admissionPlugins"`
	// Additional Subject Alternative Names for the Kubernetes API server certificate
	ApiserverCertSans []string `pulumi:"apiserverCertSans"`
	// The auto upgrade configuration for the cluster
	AutoUpgrade *KubernetesClusterAutoUpgrade `pulumi:"autoUpgrade"`
	// The autoscaler configuration for the cluster
	AutoscalerConfig *KubernetesClusterAutoscalerConfig `pulumi:"autoscalerConfig"`
	// The CNI plugin of the cluster
	Cni string `pulumi:"cni"`
	// Delete additional resources like block volumes and loadbalancers on cluster deletion
	DeleteAdditionalResources *bool `pulumi:"deleteAdditionalResources"`
	// The description of the cluster
	Description *string `pulumi:"description"`
	// The list of feature gates to enable on the cluster
	FeatureGates []string `pulumi:"featureGates"`
	// The name of the cluster
	Name *string `pulumi:"name"`
	// The OpenID Connect configuration of the cluster
	OpenIdConnectConfig *KubernetesClusterOpenIdConnectConfig `pulumi:"openIdConnectConfig"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// The tags associated with the cluster
	Tags []string `pulumi:"tags"`
	// The type of cluster
	Type *string `pulumi:"type"`
	// The version of the cluster
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a KubernetesCluster resource.
type KubernetesClusterArgs struct {
	// The list of admission plugins to enable on the cluster
	AdmissionPlugins pulumi.StringArrayInput
	// Additional Subject Alternative Names for the Kubernetes API server certificate
	ApiserverCertSans pulumi.StringArrayInput
	// The auto upgrade configuration for the cluster
	AutoUpgrade KubernetesClusterAutoUpgradePtrInput
	// The autoscaler configuration for the cluster
	AutoscalerConfig KubernetesClusterAutoscalerConfigPtrInput
	// The CNI plugin of the cluster
	Cni pulumi.StringInput
	// Delete additional resources like block volumes and loadbalancers on cluster deletion
	DeleteAdditionalResources pulumi.BoolPtrInput
	// The description of the cluster
	Description pulumi.StringPtrInput
	// The list of feature gates to enable on the cluster
	FeatureGates pulumi.StringArrayInput
	// The name of the cluster
	Name pulumi.StringPtrInput
	// The OpenID Connect configuration of the cluster
	OpenIdConnectConfig KubernetesClusterOpenIdConnectConfigPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// The tags associated with the cluster
	Tags pulumi.StringArrayInput
	// The type of cluster
	Type pulumi.StringPtrInput
	// The version of the cluster
	Version pulumi.StringInput
}

func (KubernetesClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesClusterArgs)(nil)).Elem()
}

type KubernetesClusterInput interface {
	pulumi.Input

	ToKubernetesClusterOutput() KubernetesClusterOutput
	ToKubernetesClusterOutputWithContext(ctx context.Context) KubernetesClusterOutput
}

func (*KubernetesCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesCluster)(nil)).Elem()
}

func (i *KubernetesCluster) ToKubernetesClusterOutput() KubernetesClusterOutput {
	return i.ToKubernetesClusterOutputWithContext(context.Background())
}

func (i *KubernetesCluster) ToKubernetesClusterOutputWithContext(ctx context.Context) KubernetesClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterOutput)
}

type KubernetesClusterOutput struct{ *pulumi.OutputState }

func (KubernetesClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesCluster)(nil)).Elem()
}

func (o KubernetesClusterOutput) ToKubernetesClusterOutput() KubernetesClusterOutput {
	return o
}

func (o KubernetesClusterOutput) ToKubernetesClusterOutputWithContext(ctx context.Context) KubernetesClusterOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesClusterInput)(nil)).Elem(), &KubernetesCluster{})
	pulumi.RegisterOutputType(KubernetesClusterOutput{})
}
