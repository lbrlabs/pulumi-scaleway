// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// IoT Networks can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/iotNetwork:IotNetwork net01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type IotNetwork struct {
	pulumi.CustomResourceState

	// The date and time the Network was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The endpoint to use when interacting with the network.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The hub ID to which the Network will be attached to.
	HubId pulumi.StringOutput `pulumi:"hubId"`
	// The name of the IoT Network you want to create (e.g. `my-net`).
	Name pulumi.StringOutput `pulumi:"name"`
	// The endpoint key to keep secret.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// The prefix that will be prepended to all topics for this Network.
	TopicPrefix pulumi.StringPtrOutput `pulumi:"topicPrefix"`
	// The network type to create (e.g. `sigfox`).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIotNetwork registers a new resource with the given unique name, arguments, and options.
func NewIotNetwork(ctx *pulumi.Context,
	name string, args *IotNetworkArgs, opts ...pulumi.ResourceOption) (*IotNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubId == nil {
		return nil, errors.New("invalid value for required argument 'HubId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource IotNetwork
	err := ctx.RegisterResource("scaleway:index/iotNetwork:IotNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIotNetwork gets an existing IotNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIotNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IotNetworkState, opts ...pulumi.ResourceOption) (*IotNetwork, error) {
	var resource IotNetwork
	err := ctx.ReadResource("scaleway:index/iotNetwork:IotNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IotNetwork resources.
type iotNetworkState struct {
	// The date and time the Network was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The endpoint to use when interacting with the network.
	Endpoint *string `pulumi:"endpoint"`
	// The hub ID to which the Network will be attached to.
	HubId *string `pulumi:"hubId"`
	// The name of the IoT Network you want to create (e.g. `my-net`).
	Name *string `pulumi:"name"`
	// The endpoint key to keep secret.
	Secret *string `pulumi:"secret"`
	// The prefix that will be prepended to all topics for this Network.
	TopicPrefix *string `pulumi:"topicPrefix"`
	// The network type to create (e.g. `sigfox`).
	Type *string `pulumi:"type"`
}

type IotNetworkState struct {
	// The date and time the Network was created.
	CreatedAt pulumi.StringPtrInput
	// The endpoint to use when interacting with the network.
	Endpoint pulumi.StringPtrInput
	// The hub ID to which the Network will be attached to.
	HubId pulumi.StringPtrInput
	// The name of the IoT Network you want to create (e.g. `my-net`).
	Name pulumi.StringPtrInput
	// The endpoint key to keep secret.
	Secret pulumi.StringPtrInput
	// The prefix that will be prepended to all topics for this Network.
	TopicPrefix pulumi.StringPtrInput
	// The network type to create (e.g. `sigfox`).
	Type pulumi.StringPtrInput
}

func (IotNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotNetworkState)(nil)).Elem()
}

type iotNetworkArgs struct {
	// The hub ID to which the Network will be attached to.
	HubId string `pulumi:"hubId"`
	// The name of the IoT Network you want to create (e.g. `my-net`).
	Name *string `pulumi:"name"`
	// The prefix that will be prepended to all topics for this Network.
	TopicPrefix *string `pulumi:"topicPrefix"`
	// The network type to create (e.g. `sigfox`).
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a IotNetwork resource.
type IotNetworkArgs struct {
	// The hub ID to which the Network will be attached to.
	HubId pulumi.StringInput
	// The name of the IoT Network you want to create (e.g. `my-net`).
	Name pulumi.StringPtrInput
	// The prefix that will be prepended to all topics for this Network.
	TopicPrefix pulumi.StringPtrInput
	// The network type to create (e.g. `sigfox`).
	Type pulumi.StringInput
}

func (IotNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotNetworkArgs)(nil)).Elem()
}

type IotNetworkInput interface {
	pulumi.Input

	ToIotNetworkOutput() IotNetworkOutput
	ToIotNetworkOutputWithContext(ctx context.Context) IotNetworkOutput
}

func (*IotNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**IotNetwork)(nil)).Elem()
}

func (i *IotNetwork) ToIotNetworkOutput() IotNetworkOutput {
	return i.ToIotNetworkOutputWithContext(context.Background())
}

func (i *IotNetwork) ToIotNetworkOutputWithContext(ctx context.Context) IotNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotNetworkOutput)
}

type IotNetworkOutput struct{ *pulumi.OutputState }

func (IotNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotNetwork)(nil)).Elem()
}

func (o IotNetworkOutput) ToIotNetworkOutput() IotNetworkOutput {
	return o
}

func (o IotNetworkOutput) ToIotNetworkOutputWithContext(ctx context.Context) IotNetworkOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IotNetworkInput)(nil)).Elem(), &IotNetwork{})
	pulumi.RegisterOutputType(IotNetworkOutput{})
}
