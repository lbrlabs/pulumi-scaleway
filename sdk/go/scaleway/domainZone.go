// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainZone struct {
	pulumi.CustomResourceState

	// The domain where the DNS zone will be created.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Message
	Message pulumi.StringOutput `pulumi:"message"`
	// NameServer list for zone.
	Ns pulumi.StringArrayOutput `pulumi:"ns"`
	// NameServer default list for zone.
	NsDefaults pulumi.StringArrayOutput `pulumi:"nsDefaults"`
	// NameServer master list for zone.
	NsMasters pulumi.StringArrayOutput `pulumi:"nsMasters"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The domain zone status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The subdomain of the DNS zone to create.
	Subdomain pulumi.StringOutput `pulumi:"subdomain"`
	// The date and time of the last update of the DNS zone.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewDomainZone registers a new resource with the given unique name, arguments, and options.
func NewDomainZone(ctx *pulumi.Context,
	name string, args *DomainZoneArgs, opts ...pulumi.ResourceOption) (*DomainZone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Subdomain == nil {
		return nil, errors.New("invalid value for required argument 'Subdomain'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DomainZone
	err := ctx.RegisterResource("scaleway:index/domainZone:DomainZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainZone gets an existing DomainZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainZoneState, opts ...pulumi.ResourceOption) (*DomainZone, error) {
	var resource DomainZone
	err := ctx.ReadResource("scaleway:index/domainZone:DomainZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainZone resources.
type domainZoneState struct {
	// The domain where the DNS zone will be created.
	Domain *string `pulumi:"domain"`
	// Message
	Message *string `pulumi:"message"`
	// NameServer list for zone.
	Ns []string `pulumi:"ns"`
	// NameServer default list for zone.
	NsDefaults []string `pulumi:"nsDefaults"`
	// NameServer master list for zone.
	NsMasters []string `pulumi:"nsMasters"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The domain zone status.
	Status *string `pulumi:"status"`
	// The subdomain of the DNS zone to create.
	Subdomain *string `pulumi:"subdomain"`
	// The date and time of the last update of the DNS zone.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type DomainZoneState struct {
	// The domain where the DNS zone will be created.
	Domain pulumi.StringPtrInput
	// Message
	Message pulumi.StringPtrInput
	// NameServer list for zone.
	Ns pulumi.StringArrayInput
	// NameServer default list for zone.
	NsDefaults pulumi.StringArrayInput
	// NameServer master list for zone.
	NsMasters pulumi.StringArrayInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The domain zone status.
	Status pulumi.StringPtrInput
	// The subdomain of the DNS zone to create.
	Subdomain pulumi.StringPtrInput
	// The date and time of the last update of the DNS zone.
	UpdatedAt pulumi.StringPtrInput
}

func (DomainZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainZoneState)(nil)).Elem()
}

type domainZoneArgs struct {
	// The domain where the DNS zone will be created.
	Domain string `pulumi:"domain"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The subdomain of the DNS zone to create.
	Subdomain string `pulumi:"subdomain"`
}

// The set of arguments for constructing a DomainZone resource.
type DomainZoneArgs struct {
	// The domain where the DNS zone will be created.
	Domain pulumi.StringInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The subdomain of the DNS zone to create.
	Subdomain pulumi.StringInput
}

func (DomainZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainZoneArgs)(nil)).Elem()
}

type DomainZoneInput interface {
	pulumi.Input

	ToDomainZoneOutput() DomainZoneOutput
	ToDomainZoneOutputWithContext(ctx context.Context) DomainZoneOutput
}

func (*DomainZone) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainZone)(nil)).Elem()
}

func (i *DomainZone) ToDomainZoneOutput() DomainZoneOutput {
	return i.ToDomainZoneOutputWithContext(context.Background())
}

func (i *DomainZone) ToDomainZoneOutputWithContext(ctx context.Context) DomainZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainZoneOutput)
}

type DomainZoneOutput struct{ *pulumi.OutputState }

func (DomainZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainZone)(nil)).Elem()
}

func (o DomainZoneOutput) ToDomainZoneOutput() DomainZoneOutput {
	return o
}

func (o DomainZoneOutput) ToDomainZoneOutputWithContext(ctx context.Context) DomainZoneOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainZoneInput)(nil)).Elem(), &DomainZone{})
	pulumi.RegisterOutputType(DomainZoneOutput{})
}
