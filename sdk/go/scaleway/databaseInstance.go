// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Database Instances.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).
//
// ## Examples
//
// ### Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		mainDatabaseInstance, err := scaleway.NewDatabaseInstance(ctx, "mainDatabaseInstance", &scaleway.DatabaseInstanceArgs{
// 			NodeType:      pulumi.String("DB-DEV-S"),
// 			Engine:        pulumi.String("PostgreSQL-11"),
// 			IsHaCluster:   pulumi.Bool(true),
// 			DisableBackup: pulumi.Bool(true),
// 			UserName:      pulumi.String("my_initial_user"),
// 			Password:      pulumi.String("thiZ_is_v&ry_s3cret"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = scaleway.NewDatabaseInstance(ctx, "mainIndex_databaseInstanceDatabaseInstance", &scaleway.DatabaseInstanceArgs{
// 			NodeType:                pulumi.String("DB-DEV-S"),
// 			Engine:                  pulumi.String("PostgreSQL-11"),
// 			IsHaCluster:             pulumi.Bool(true),
// 			UserName:                pulumi.String("my_initial_user"),
// 			Password:                pulumi.String("thiZ_is_v&ry_s3cret"),
// 			DisableBackup:           pulumi.Bool(true),
// 			BackupScheduleFrequency: pulumi.Int(24),
// 			BackupScheduleRetention: pulumi.Int(7),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		pn02, err := scaleway.NewVpcPrivateNetwork(ctx, "pn02", nil)
// 		if err != nil {
// 			return err
// 		}
// 		mainVpcPublicGatewayDhcp, err := scaleway.NewVpcPublicGatewayDhcp(ctx, "mainVpcPublicGatewayDhcp", &scaleway.VpcPublicGatewayDhcpArgs{
// 			Subnet: pulumi.String("192.168.1.0/24"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		mainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, "mainVpcPublicGatewayIp", nil)
// 		if err != nil {
// 			return err
// 		}
// 		mainVpcPublicGateway, err := scaleway.NewVpcPublicGateway(ctx, "mainVpcPublicGateway", &scaleway.VpcPublicGatewayArgs{
// 			Type: pulumi.String("VPC-GW-S"),
// 			IpId: mainVpcPublicGatewayIp.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		mainVpcGatewayNetwork, err := scaleway.NewVpcGatewayNetwork(ctx, "mainVpcGatewayNetwork", &scaleway.VpcGatewayNetworkArgs{
// 			GatewayId:        mainVpcPublicGateway.ID(),
// 			PrivateNetworkId: pn02.ID(),
// 			DhcpId:           mainVpcPublicGatewayDhcp.ID(),
// 			CleanupDhcp:      pulumi.Bool(true),
// 			EnableMasquerade: pulumi.Bool(true),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			mainVpcPublicGatewayIp,
// 			pn02,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = scaleway.NewVpcPublicGatewayPatRule(ctx, "mainVpcPublicGatewayPatRule", &scaleway.VpcPublicGatewayPatRuleArgs{
// 			GatewayId: mainVpcPublicGateway.ID(),
// 			PrivateIp: mainVpcPublicGatewayDhcp.Address,
// 			PrivatePort: mainDatabaseInstance.PrivateNetwork.ApplyT(func(privateNetwork DatabaseInstancePrivateNetwork) (int, error) {
// 				return privateNetwork.Port, nil
// 			}).(pulumi.IntOutput),
// 			PublicPort: pulumi.Int(42),
// 			Protocol:   pulumi.String("both"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			mainVpcGatewayNetwork,
// 			pn02,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = scaleway.NewDatabaseInstance(ctx, "mainScalewayIndex_databaseInstanceDatabaseInstance", &scaleway.DatabaseInstanceArgs{
// 			NodeType:      pulumi.String("db-dev-s"),
// 			Engine:        pulumi.String("PostgreSQL-11"),
// 			IsHaCluster:   pulumi.Bool(false),
// 			DisableBackup: pulumi.Bool(true),
// 			UserName:      pulumi.String("my_initial_user"),
// 			Password:      pulumi.String("thiZ_is_v&ry_s3cret"),
// 			Region:        pulumi.String("fr-par"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("terraform-test"),
// 				pulumi.String("scaleway_rdb_instance"),
// 				pulumi.String("volume"),
// 				pulumi.String("rdb_pn"),
// 			},
// 			VolumeType:     pulumi.String("bssd"),
// 			VolumeSizeInGb: pulumi.Int(10),
// 			PrivateNetwork: &DatabaseInstancePrivateNetworkArgs{
// 				IpNet: pulumi.String("192.168.1.254/24"),
// 				PnId:  pn02.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Private Network
//
// > **Important:** Updates to `privateNetwork` will recreate the attachment Instance.
//
// - `ipNet` - (Required) The IP network where to con.
// - `pnId` - (Required) The ID of the private network. If not provided it will be randomly generated.
//
// ## Import
//
// Database Instance can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/databaseInstance:DatabaseInstance rdb01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type DatabaseInstance struct {
	pulumi.CustomResourceState

	// Backup schedule frequency in hours.
	BackupScheduleFrequency pulumi.IntOutput `pulumi:"backupScheduleFrequency"`
	// Backup schedule retention in days.
	BackupScheduleRetention pulumi.IntOutput `pulumi:"backupScheduleRetention"`
	// Certificate of the database instance.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Disable automated backup for the database instance.
	DisableBackup pulumi.BoolPtrOutput `pulumi:"disableBackup"`
	// The IP of the Database Instance.
	EndpointIp pulumi.StringOutput `pulumi:"endpointIp"`
	// The port of the Database Instance.
	EndpointPort pulumi.IntOutput `pulumi:"endpointPort"`
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Enable or disable high availability for the database instance.
	IsHaCluster pulumi.BoolPtrOutput `pulumi:"isHaCluster"`
	// List of load balancer endpoints of the database instance.
	LoadBalancers DatabaseInstanceLoadBalancerArrayOutput `pulumi:"loadBalancers"`
	// The name of the Database Instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of database instance you want to create (e.g. `db-dev-s`).
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// The organization ID the Database Instance is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Password for the first user of the database instance.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// List of private networks endpoints of the database instance.
	PrivateNetwork DatabaseInstancePrivateNetworkPtrOutput `pulumi:"privateNetwork"`
	// `projectId`) The ID of the project the Database Instance is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// List of read replicas of the database instance.
	ReadReplicas DatabaseInstanceReadReplicaArrayOutput `pulumi:"readReplicas"`
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// Map of engine settings to be set.
	Settings pulumi.StringMapOutput `pulumi:"settings"`
	// The tags associated with the Database Instance.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Identifier for the first user of the database instance.
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
	// Volume size (in GB) when `volumeType` is set to `bssd`. Must be a multiple of 5000000000.
	VolumeSizeInGb pulumi.IntOutput `pulumi:"volumeSizeInGb"`
	// Type of volume where data are stored (`bssd` or `lssd`).
	VolumeType pulumi.StringPtrOutput `pulumi:"volumeType"`
}

// NewDatabaseInstance registers a new resource with the given unique name, arguments, and options.
func NewDatabaseInstance(ctx *pulumi.Context,
	name string, args *DatabaseInstanceArgs, opts ...pulumi.ResourceOption) (*DatabaseInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	var resource DatabaseInstance
	err := ctx.RegisterResource("scaleway:index/databaseInstance:DatabaseInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseInstance gets an existing DatabaseInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseInstanceState, opts ...pulumi.ResourceOption) (*DatabaseInstance, error) {
	var resource DatabaseInstance
	err := ctx.ReadResource("scaleway:index/databaseInstance:DatabaseInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseInstance resources.
type databaseInstanceState struct {
	// Backup schedule frequency in hours.
	BackupScheduleFrequency *int `pulumi:"backupScheduleFrequency"`
	// Backup schedule retention in days.
	BackupScheduleRetention *int `pulumi:"backupScheduleRetention"`
	// Certificate of the database instance.
	Certificate *string `pulumi:"certificate"`
	// Disable automated backup for the database instance.
	DisableBackup *bool `pulumi:"disableBackup"`
	// The IP of the Database Instance.
	EndpointIp *string `pulumi:"endpointIp"`
	// The port of the Database Instance.
	EndpointPort *int `pulumi:"endpointPort"`
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	Engine *string `pulumi:"engine"`
	// Enable or disable high availability for the database instance.
	IsHaCluster *bool `pulumi:"isHaCluster"`
	// List of load balancer endpoints of the database instance.
	LoadBalancers []DatabaseInstanceLoadBalancer `pulumi:"loadBalancers"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	// The type of database instance you want to create (e.g. `db-dev-s`).
	NodeType *string `pulumi:"nodeType"`
	// The organization ID the Database Instance is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// Password for the first user of the database instance.
	Password *string `pulumi:"password"`
	// List of private networks endpoints of the database instance.
	PrivateNetwork *DatabaseInstancePrivateNetwork `pulumi:"privateNetwork"`
	// `projectId`) The ID of the project the Database Instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// List of read replicas of the database instance.
	ReadReplicas []DatabaseInstanceReadReplica `pulumi:"readReplicas"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
	// Map of engine settings to be set.
	Settings map[string]string `pulumi:"settings"`
	// The tags associated with the Database Instance.
	Tags []string `pulumi:"tags"`
	// Identifier for the first user of the database instance.
	UserName *string `pulumi:"userName"`
	// Volume size (in GB) when `volumeType` is set to `bssd`. Must be a multiple of 5000000000.
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Type of volume where data are stored (`bssd` or `lssd`).
	VolumeType *string `pulumi:"volumeType"`
}

type DatabaseInstanceState struct {
	// Backup schedule frequency in hours.
	BackupScheduleFrequency pulumi.IntPtrInput
	// Backup schedule retention in days.
	BackupScheduleRetention pulumi.IntPtrInput
	// Certificate of the database instance.
	Certificate pulumi.StringPtrInput
	// Disable automated backup for the database instance.
	DisableBackup pulumi.BoolPtrInput
	// The IP of the Database Instance.
	EndpointIp pulumi.StringPtrInput
	// The port of the Database Instance.
	EndpointPort pulumi.IntPtrInput
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	Engine pulumi.StringPtrInput
	// Enable or disable high availability for the database instance.
	IsHaCluster pulumi.BoolPtrInput
	// List of load balancer endpoints of the database instance.
	LoadBalancers DatabaseInstanceLoadBalancerArrayInput
	// The name of the Database Instance.
	Name pulumi.StringPtrInput
	// The type of database instance you want to create (e.g. `db-dev-s`).
	NodeType pulumi.StringPtrInput
	// The organization ID the Database Instance is associated with.
	OrganizationId pulumi.StringPtrInput
	// Password for the first user of the database instance.
	Password pulumi.StringPtrInput
	// List of private networks endpoints of the database instance.
	PrivateNetwork DatabaseInstancePrivateNetworkPtrInput
	// `projectId`) The ID of the project the Database Instance is associated with.
	ProjectId pulumi.StringPtrInput
	// List of read replicas of the database instance.
	ReadReplicas DatabaseInstanceReadReplicaArrayInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
	// Map of engine settings to be set.
	Settings pulumi.StringMapInput
	// The tags associated with the Database Instance.
	Tags pulumi.StringArrayInput
	// Identifier for the first user of the database instance.
	UserName pulumi.StringPtrInput
	// Volume size (in GB) when `volumeType` is set to `bssd`. Must be a multiple of 5000000000.
	VolumeSizeInGb pulumi.IntPtrInput
	// Type of volume where data are stored (`bssd` or `lssd`).
	VolumeType pulumi.StringPtrInput
}

func (DatabaseInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseInstanceState)(nil)).Elem()
}

type databaseInstanceArgs struct {
	// Backup schedule frequency in hours.
	BackupScheduleFrequency *int `pulumi:"backupScheduleFrequency"`
	// Backup schedule retention in days.
	BackupScheduleRetention *int `pulumi:"backupScheduleRetention"`
	// Disable automated backup for the database instance.
	DisableBackup *bool `pulumi:"disableBackup"`
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	Engine string `pulumi:"engine"`
	// Enable or disable high availability for the database instance.
	IsHaCluster *bool `pulumi:"isHaCluster"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	// The type of database instance you want to create (e.g. `db-dev-s`).
	NodeType string `pulumi:"nodeType"`
	// Password for the first user of the database instance.
	Password *string `pulumi:"password"`
	// List of private networks endpoints of the database instance.
	PrivateNetwork *DatabaseInstancePrivateNetwork `pulumi:"privateNetwork"`
	// `projectId`) The ID of the project the Database Instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
	// Map of engine settings to be set.
	Settings map[string]string `pulumi:"settings"`
	// The tags associated with the Database Instance.
	Tags []string `pulumi:"tags"`
	// Identifier for the first user of the database instance.
	UserName *string `pulumi:"userName"`
	// Volume size (in GB) when `volumeType` is set to `bssd`. Must be a multiple of 5000000000.
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Type of volume where data are stored (`bssd` or `lssd`).
	VolumeType *string `pulumi:"volumeType"`
}

// The set of arguments for constructing a DatabaseInstance resource.
type DatabaseInstanceArgs struct {
	// Backup schedule frequency in hours.
	BackupScheduleFrequency pulumi.IntPtrInput
	// Backup schedule retention in days.
	BackupScheduleRetention pulumi.IntPtrInput
	// Disable automated backup for the database instance.
	DisableBackup pulumi.BoolPtrInput
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	Engine pulumi.StringInput
	// Enable or disable high availability for the database instance.
	IsHaCluster pulumi.BoolPtrInput
	// The name of the Database Instance.
	Name pulumi.StringPtrInput
	// The type of database instance you want to create (e.g. `db-dev-s`).
	NodeType pulumi.StringInput
	// Password for the first user of the database instance.
	Password pulumi.StringPtrInput
	// List of private networks endpoints of the database instance.
	PrivateNetwork DatabaseInstancePrivateNetworkPtrInput
	// `projectId`) The ID of the project the Database Instance is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
	// Map of engine settings to be set.
	Settings pulumi.StringMapInput
	// The tags associated with the Database Instance.
	Tags pulumi.StringArrayInput
	// Identifier for the first user of the database instance.
	UserName pulumi.StringPtrInput
	// Volume size (in GB) when `volumeType` is set to `bssd`. Must be a multiple of 5000000000.
	VolumeSizeInGb pulumi.IntPtrInput
	// Type of volume where data are stored (`bssd` or `lssd`).
	VolumeType pulumi.StringPtrInput
}

func (DatabaseInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseInstanceArgs)(nil)).Elem()
}

type DatabaseInstanceInput interface {
	pulumi.Input

	ToDatabaseInstanceOutput() DatabaseInstanceOutput
	ToDatabaseInstanceOutputWithContext(ctx context.Context) DatabaseInstanceOutput
}

func (*DatabaseInstance) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInstance)(nil))
}

func (i *DatabaseInstance) ToDatabaseInstanceOutput() DatabaseInstanceOutput {
	return i.ToDatabaseInstanceOutputWithContext(context.Background())
}

func (i *DatabaseInstance) ToDatabaseInstanceOutputWithContext(ctx context.Context) DatabaseInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstanceOutput)
}

type DatabaseInstanceOutput struct{ *pulumi.OutputState }

func (DatabaseInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInstance)(nil))
}

func (o DatabaseInstanceOutput) ToDatabaseInstanceOutput() DatabaseInstanceOutput {
	return o
}

func (o DatabaseInstanceOutput) ToDatabaseInstanceOutputWithContext(ctx context.Context) DatabaseInstanceOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInstanceInput)(nil)).Elem(), &DatabaseInstance{})
	pulumi.RegisterOutputType(DatabaseInstanceOutput{})
}
