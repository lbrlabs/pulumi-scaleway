// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceVolume struct {
	pulumi.CustomResourceState

	// Create a volume based on a image
	FromSnapshotId pulumi.StringPtrOutput `pulumi:"fromSnapshotId"`
	// Create a copy of an existing volume
	FromVolumeId pulumi.StringPtrOutput `pulumi:"fromVolumeId"`
	// The name of the volume
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The server associated with this volume
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The size of the volume in gigabyte
	SizeInGb pulumi.IntPtrOutput `pulumi:"sizeInGb"`
	// The tags associated with the volume
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The volume type
	Type pulumi.StringOutput `pulumi:"type"`
	// The zone you want to attach the resource to
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstanceVolume registers a new resource with the given unique name, arguments, and options.
func NewInstanceVolume(ctx *pulumi.Context,
	name string, args *InstanceVolumeArgs, opts ...pulumi.ResourceOption) (*InstanceVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InstanceVolume
	err := ctx.RegisterResource("scaleway:index/instanceVolume:InstanceVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceVolume gets an existing InstanceVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceVolumeState, opts ...pulumi.ResourceOption) (*InstanceVolume, error) {
	var resource InstanceVolume
	err := ctx.ReadResource("scaleway:index/instanceVolume:InstanceVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceVolume resources.
type instanceVolumeState struct {
	// Create a volume based on a image
	FromSnapshotId *string `pulumi:"fromSnapshotId"`
	// Create a copy of an existing volume
	FromVolumeId *string `pulumi:"fromVolumeId"`
	// The name of the volume
	Name *string `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The server associated with this volume
	ServerId *string `pulumi:"serverId"`
	// The size of the volume in gigabyte
	SizeInGb *int `pulumi:"sizeInGb"`
	// The tags associated with the volume
	Tags []string `pulumi:"tags"`
	// The volume type
	Type *string `pulumi:"type"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

type InstanceVolumeState struct {
	// Create a volume based on a image
	FromSnapshotId pulumi.StringPtrInput
	// Create a copy of an existing volume
	FromVolumeId pulumi.StringPtrInput
	// The name of the volume
	Name pulumi.StringPtrInput
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The server associated with this volume
	ServerId pulumi.StringPtrInput
	// The size of the volume in gigabyte
	SizeInGb pulumi.IntPtrInput
	// The tags associated with the volume
	Tags pulumi.StringArrayInput
	// The volume type
	Type pulumi.StringPtrInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (InstanceVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceVolumeState)(nil)).Elem()
}

type instanceVolumeArgs struct {
	// Create a volume based on a image
	FromSnapshotId *string `pulumi:"fromSnapshotId"`
	// Create a copy of an existing volume
	FromVolumeId *string `pulumi:"fromVolumeId"`
	// The name of the volume
	Name *string `pulumi:"name"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The size of the volume in gigabyte
	SizeInGb *int `pulumi:"sizeInGb"`
	// The tags associated with the volume
	Tags []string `pulumi:"tags"`
	// The volume type
	Type string `pulumi:"type"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InstanceVolume resource.
type InstanceVolumeArgs struct {
	// Create a volume based on a image
	FromSnapshotId pulumi.StringPtrInput
	// Create a copy of an existing volume
	FromVolumeId pulumi.StringPtrInput
	// The name of the volume
	Name pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The size of the volume in gigabyte
	SizeInGb pulumi.IntPtrInput
	// The tags associated with the volume
	Tags pulumi.StringArrayInput
	// The volume type
	Type pulumi.StringInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (InstanceVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceVolumeArgs)(nil)).Elem()
}

type InstanceVolumeInput interface {
	pulumi.Input

	ToInstanceVolumeOutput() InstanceVolumeOutput
	ToInstanceVolumeOutputWithContext(ctx context.Context) InstanceVolumeOutput
}

func (*InstanceVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceVolume)(nil)).Elem()
}

func (i *InstanceVolume) ToInstanceVolumeOutput() InstanceVolumeOutput {
	return i.ToInstanceVolumeOutputWithContext(context.Background())
}

func (i *InstanceVolume) ToInstanceVolumeOutputWithContext(ctx context.Context) InstanceVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceVolumeOutput)
}

type InstanceVolumeOutput struct{ *pulumi.OutputState }

func (InstanceVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceVolume)(nil)).Elem()
}

func (o InstanceVolumeOutput) ToInstanceVolumeOutput() InstanceVolumeOutput {
	return o
}

func (o InstanceVolumeOutput) ToInstanceVolumeOutputWithContext(ctx context.Context) InstanceVolumeOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceVolumeInput)(nil)).Elem(), &InstanceVolume{})
	pulumi.RegisterOutputType(InstanceVolumeOutput{})
}
