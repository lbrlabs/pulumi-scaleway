// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Compute Instance Volumes.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39).
//
// ## Example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := scaleway.NewInstanceVolume(ctx, "serverVolume", &scaleway.InstanceVolumeArgs{
// 			SizeInGb: pulumi.Int(20),
// 			Type:     pulumi.String("l_ssd"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// volumes can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/instanceVolume:InstanceVolume server_volume fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type InstanceVolume struct {
	pulumi.CustomResourceState

	// Create a volume based on a image
	FromSnapshotId pulumi.StringPtrOutput `pulumi:"fromSnapshotId"`
	// If set, the new volume will be copied from this volume. Only one of `sizeInGb`, `fromVolumeId` and `fromSnapshotId` should be specified.
	FromVolumeId pulumi.StringPtrOutput `pulumi:"fromVolumeId"`
	// The name of the volume. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID the volume is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The id of the associated server.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The size of the volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
	SizeInGb pulumi.IntPtrOutput `pulumi:"sizeInGb"`
	// The type of the volume. The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD).
	Type pulumi.StringOutput `pulumi:"type"`
	// `zone`) The zone in which the volume should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstanceVolume registers a new resource with the given unique name, arguments, and options.
func NewInstanceVolume(ctx *pulumi.Context,
	name string, args *InstanceVolumeArgs, opts ...pulumi.ResourceOption) (*InstanceVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource InstanceVolume
	err := ctx.RegisterResource("scaleway:index/instanceVolume:InstanceVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceVolume gets an existing InstanceVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceVolumeState, opts ...pulumi.ResourceOption) (*InstanceVolume, error) {
	var resource InstanceVolume
	err := ctx.ReadResource("scaleway:index/instanceVolume:InstanceVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceVolume resources.
type instanceVolumeState struct {
	// Create a volume based on a image
	FromSnapshotId *string `pulumi:"fromSnapshotId"`
	// If set, the new volume will be copied from this volume. Only one of `sizeInGb`, `fromVolumeId` and `fromSnapshotId` should be specified.
	FromVolumeId *string `pulumi:"fromVolumeId"`
	// The name of the volume. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// The organization ID the volume is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The id of the associated server.
	ServerId *string `pulumi:"serverId"`
	// The size of the volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
	SizeInGb *int `pulumi:"sizeInGb"`
	// The type of the volume. The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD).
	Type *string `pulumi:"type"`
	// `zone`) The zone in which the volume should be created.
	Zone *string `pulumi:"zone"`
}

type InstanceVolumeState struct {
	// Create a volume based on a image
	FromSnapshotId pulumi.StringPtrInput
	// If set, the new volume will be copied from this volume. Only one of `sizeInGb`, `fromVolumeId` and `fromSnapshotId` should be specified.
	FromVolumeId pulumi.StringPtrInput
	// The name of the volume. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// The organization ID the volume is associated with.
	OrganizationId pulumi.StringPtrInput
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId pulumi.StringPtrInput
	// The id of the associated server.
	ServerId pulumi.StringPtrInput
	// The size of the volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
	SizeInGb pulumi.IntPtrInput
	// The type of the volume. The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD).
	Type pulumi.StringPtrInput
	// `zone`) The zone in which the volume should be created.
	Zone pulumi.StringPtrInput
}

func (InstanceVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceVolumeState)(nil)).Elem()
}

type instanceVolumeArgs struct {
	// Create a volume based on a image
	FromSnapshotId *string `pulumi:"fromSnapshotId"`
	// If set, the new volume will be copied from this volume. Only one of `sizeInGb`, `fromVolumeId` and `fromSnapshotId` should be specified.
	FromVolumeId *string `pulumi:"fromVolumeId"`
	// The name of the volume. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The size of the volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
	SizeInGb *int `pulumi:"sizeInGb"`
	// The type of the volume. The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD).
	Type string `pulumi:"type"`
	// `zone`) The zone in which the volume should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InstanceVolume resource.
type InstanceVolumeArgs struct {
	// Create a volume based on a image
	FromSnapshotId pulumi.StringPtrInput
	// If set, the new volume will be copied from this volume. Only one of `sizeInGb`, `fromVolumeId` and `fromSnapshotId` should be specified.
	FromVolumeId pulumi.StringPtrInput
	// The name of the volume. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId pulumi.StringPtrInput
	// The size of the volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
	SizeInGb pulumi.IntPtrInput
	// The type of the volume. The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD).
	Type pulumi.StringInput
	// `zone`) The zone in which the volume should be created.
	Zone pulumi.StringPtrInput
}

func (InstanceVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceVolumeArgs)(nil)).Elem()
}

type InstanceVolumeInput interface {
	pulumi.Input

	ToInstanceVolumeOutput() InstanceVolumeOutput
	ToInstanceVolumeOutputWithContext(ctx context.Context) InstanceVolumeOutput
}

func (*InstanceVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceVolume)(nil)).Elem()
}

func (i *InstanceVolume) ToInstanceVolumeOutput() InstanceVolumeOutput {
	return i.ToInstanceVolumeOutputWithContext(context.Background())
}

func (i *InstanceVolume) ToInstanceVolumeOutputWithContext(ctx context.Context) InstanceVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceVolumeOutput)
}

type InstanceVolumeOutput struct{ *pulumi.OutputState }

func (InstanceVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceVolume)(nil)).Elem()
}

func (o InstanceVolumeOutput) ToInstanceVolumeOutput() InstanceVolumeOutput {
	return o
}

func (o InstanceVolumeOutput) ToInstanceVolumeOutputWithContext(ctx context.Context) InstanceVolumeOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceVolumeInput)(nil)).Elem(), &InstanceVolume{})
	pulumi.RegisterOutputType(InstanceVolumeOutput{})
}
