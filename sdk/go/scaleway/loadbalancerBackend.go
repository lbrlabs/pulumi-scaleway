// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Load-Balancer Backends.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).
//
// ## Examples
//
// ### Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := scaleway.NewLoadbalancerBackend(ctx, "backend01", &scaleway.LoadbalancerBackendArgs{
// 			LbId:            pulumi.Any(scaleway_lb.Lb01.Id),
// 			ForwardProtocol: pulumi.String("http"),
// 			ForwardPort:     pulumi.Int(80),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ### With HTTP Health Check
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := scaleway.NewLoadbalancerBackend(ctx, "backend01", &scaleway.LoadbalancerBackendArgs{
// 			LbId:            pulumi.Any(scaleway_lb.Lb01.Id),
// 			ForwardProtocol: pulumi.String("http"),
// 			ForwardPort:     pulumi.Int(80),
// 			HealthCheckHttp: &LoadbalancerBackendHealthCheckHttpArgs{
// 				Uri: pulumi.String("www.test.com/health"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Load-Balancer backend can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/loadbalancerBackend:LoadbalancerBackend backend01 fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type LoadbalancerBackend struct {
	pulumi.CustomResourceState

	// User sessions will be forwarded to this port of backend servers.
	ForwardPort pulumi.IntOutput `pulumi:"forwardPort"`
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm pulumi.StringPtrOutput `pulumi:"forwardPortAlgorithm"`
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol pulumi.StringOutput `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay pulumi.StringPtrOutput `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp LoadbalancerBackendHealthCheckHttpPtrOutput `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps LoadbalancerBackendHealthCheckHttpsPtrOutput `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries pulumi.IntPtrOutput `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to.
	HealthCheckPort pulumi.IntOutput `pulumi:"healthCheckPort"`
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp LoadbalancerBackendHealthCheckTcpOutput `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout pulumi.StringPtrOutput `pulumi:"healthCheckTimeout"`
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The name of the load-balancer backend.
	Name pulumi.StringOutput `pulumi:"name"`
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction pulumi.StringPtrOutput `pulumi:"onMarkedDownAction"`
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol pulumi.StringPtrOutput `pulumi:"proxyProtocol"`
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 pulumi.BoolPtrOutput `pulumi:"sendProxyV2"`
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps pulumi.StringArrayOutput `pulumi:"serverIps"`
	// Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
	StickySessions pulumi.StringPtrOutput `pulumi:"stickySessions"`
	// Cookie name for for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName pulumi.StringPtrOutput `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect pulumi.StringPtrOutput `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer pulumi.StringPtrOutput `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel pulumi.StringPtrOutput `pulumi:"timeoutTunnel"`
}

// NewLoadbalancerBackend registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerBackend(ctx *pulumi.Context,
	name string, args *LoadbalancerBackendArgs, opts ...pulumi.ResourceOption) (*LoadbalancerBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ForwardPort == nil {
		return nil, errors.New("invalid value for required argument 'ForwardPort'")
	}
	if args.ForwardProtocol == nil {
		return nil, errors.New("invalid value for required argument 'ForwardProtocol'")
	}
	if args.LbId == nil {
		return nil, errors.New("invalid value for required argument 'LbId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LoadbalancerBackend
	err := ctx.RegisterResource("scaleway:index/loadbalancerBackend:LoadbalancerBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerBackend gets an existing LoadbalancerBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerBackendState, opts ...pulumi.ResourceOption) (*LoadbalancerBackend, error) {
	var resource LoadbalancerBackend
	err := ctx.ReadResource("scaleway:index/loadbalancerBackend:LoadbalancerBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerBackend resources.
type loadbalancerBackendState struct {
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort *int `pulumi:"forwardPort"`
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol *string `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay *string `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp *LoadbalancerBackendHealthCheckHttp `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps *LoadbalancerBackendHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp *LoadbalancerBackendHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId *string `pulumi:"lbId"`
	// The name of the load-balancer backend.
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps []string `pulumi:"serverIps"`
	// Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

type LoadbalancerBackendState struct {
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort pulumi.IntPtrInput
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol pulumi.StringPtrInput
	// Interval between two HC requests.
	HealthCheckDelay pulumi.StringPtrInput
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp LoadbalancerBackendHealthCheckHttpPtrInput
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps LoadbalancerBackendHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to.
	HealthCheckPort pulumi.IntPtrInput
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp LoadbalancerBackendHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout pulumi.StringPtrInput
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId pulumi.StringPtrInput
	// The name of the load-balancer backend.
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction pulumi.StringPtrInput
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol pulumi.StringPtrInput
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 pulumi.BoolPtrInput
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps pulumi.StringArrayInput
	// Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
	StickySessions pulumi.StringPtrInput
	// Cookie name for for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect pulumi.StringPtrInput
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel pulumi.StringPtrInput
}

func (LoadbalancerBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerBackendState)(nil)).Elem()
}

type loadbalancerBackendArgs struct {
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort int `pulumi:"forwardPort"`
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay *string `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp *LoadbalancerBackendHealthCheckHttp `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps *LoadbalancerBackendHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp *LoadbalancerBackendHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId string `pulumi:"lbId"`
	// The name of the load-balancer backend.
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps []string `pulumi:"serverIps"`
	// Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

// The set of arguments for constructing a LoadbalancerBackend resource.
type LoadbalancerBackendArgs struct {
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort pulumi.IntInput
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol pulumi.StringInput
	// Interval between two HC requests.
	HealthCheckDelay pulumi.StringPtrInput
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp LoadbalancerBackendHealthCheckHttpPtrInput
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps LoadbalancerBackendHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to.
	HealthCheckPort pulumi.IntPtrInput
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp LoadbalancerBackendHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout pulumi.StringPtrInput
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId pulumi.StringInput
	// The name of the load-balancer backend.
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction pulumi.StringPtrInput
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol pulumi.StringPtrInput
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 pulumi.BoolPtrInput
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps pulumi.StringArrayInput
	// Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.
	StickySessions pulumi.StringPtrInput
	// Cookie name for for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect pulumi.StringPtrInput
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel pulumi.StringPtrInput
}

func (LoadbalancerBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerBackendArgs)(nil)).Elem()
}

type LoadbalancerBackendInput interface {
	pulumi.Input

	ToLoadbalancerBackendOutput() LoadbalancerBackendOutput
	ToLoadbalancerBackendOutputWithContext(ctx context.Context) LoadbalancerBackendOutput
}

func (*LoadbalancerBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerBackend)(nil)).Elem()
}

func (i *LoadbalancerBackend) ToLoadbalancerBackendOutput() LoadbalancerBackendOutput {
	return i.ToLoadbalancerBackendOutputWithContext(context.Background())
}

func (i *LoadbalancerBackend) ToLoadbalancerBackendOutputWithContext(ctx context.Context) LoadbalancerBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerBackendOutput)
}

type LoadbalancerBackendOutput struct{ *pulumi.OutputState }

func (LoadbalancerBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerBackend)(nil)).Elem()
}

func (o LoadbalancerBackendOutput) ToLoadbalancerBackendOutput() LoadbalancerBackendOutput {
	return o
}

func (o LoadbalancerBackendOutput) ToLoadbalancerBackendOutputWithContext(ctx context.Context) LoadbalancerBackendOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerBackendInput)(nil)).Elem(), &LoadbalancerBackend{})
	pulumi.RegisterOutputType(LoadbalancerBackendOutput{})
}
