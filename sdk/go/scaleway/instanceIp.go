// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceIp struct {
	pulumi.CustomResourceState

	// The IP address
	Address pulumi.StringOutput `pulumi:"address"`
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The reverse DNS for this IP
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// The server associated with this IP
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The tags associated with the ip
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The zone you want to attach the resource to
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstanceIp registers a new resource with the given unique name, arguments, and options.
func NewInstanceIp(ctx *pulumi.Context,
	name string, args *InstanceIpArgs, opts ...pulumi.ResourceOption) (*InstanceIp, error) {
	if args == nil {
		args = &InstanceIpArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource InstanceIp
	err := ctx.RegisterResource("scaleway:index/instanceIp:InstanceIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceIp gets an existing InstanceIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceIpState, opts ...pulumi.ResourceOption) (*InstanceIp, error) {
	var resource InstanceIp
	err := ctx.ReadResource("scaleway:index/instanceIp:InstanceIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceIp resources.
type instanceIpState struct {
	// The IP address
	Address *string `pulumi:"address"`
	// The organization_id you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The reverse DNS for this IP
	Reverse *string `pulumi:"reverse"`
	// The server associated with this IP
	ServerId *string `pulumi:"serverId"`
	// The tags associated with the ip
	Tags []string `pulumi:"tags"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

type InstanceIpState struct {
	// The IP address
	Address pulumi.StringPtrInput
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The reverse DNS for this IP
	Reverse pulumi.StringPtrInput
	// The server associated with this IP
	ServerId pulumi.StringPtrInput
	// The tags associated with the ip
	Tags pulumi.StringArrayInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (InstanceIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIpState)(nil)).Elem()
}

type instanceIpArgs struct {
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The tags associated with the ip
	Tags []string `pulumi:"tags"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InstanceIp resource.
type InstanceIpArgs struct {
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The tags associated with the ip
	Tags pulumi.StringArrayInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (InstanceIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIpArgs)(nil)).Elem()
}

type InstanceIpInput interface {
	pulumi.Input

	ToInstanceIpOutput() InstanceIpOutput
	ToInstanceIpOutputWithContext(ctx context.Context) InstanceIpOutput
}

func (*InstanceIp) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIp)(nil)).Elem()
}

func (i *InstanceIp) ToInstanceIpOutput() InstanceIpOutput {
	return i.ToInstanceIpOutputWithContext(context.Background())
}

func (i *InstanceIp) ToInstanceIpOutputWithContext(ctx context.Context) InstanceIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIpOutput)
}

type InstanceIpOutput struct{ *pulumi.OutputState }

func (InstanceIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIp)(nil)).Elem()
}

func (o InstanceIpOutput) ToInstanceIpOutput() InstanceIpOutput {
	return o
}

func (o InstanceIpOutput) ToInstanceIpOutputWithContext(ctx context.Context) InstanceIpOutput {
	return o
}

// The IP address
func (o InstanceIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIp) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The organization_id you want to attach the resource to
func (o InstanceIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIp) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The project_id you want to attach the resource to
func (o InstanceIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The reverse DNS for this IP
func (o InstanceIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIp) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// The server associated with this IP
func (o InstanceIpOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIp) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The tags associated with the ip
func (o InstanceIpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceIp) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The zone you want to attach the resource to
func (o InstanceIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIp) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIpInput)(nil)).Elem(), &InstanceIp{})
	pulumi.RegisterOutputType(InstanceIpOutput{})
}
