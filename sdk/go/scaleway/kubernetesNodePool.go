// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KubernetesNodePool struct {
	pulumi.CustomResourceState

	// Enable the autohealing on the pool
	Autohealing pulumi.BoolPtrOutput `pulumi:"autohealing"`
	// Enable the autoscaling on the pool
	Autoscaling pulumi.BoolPtrOutput `pulumi:"autoscaling"`
	// The ID of the cluster on which this pool will be created
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Container runtime for the pool
	ContainerRuntime pulumi.StringPtrOutput `pulumi:"containerRuntime"`
	// The date and time of the creation of the pool
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The actual size of the pool
	CurrentSize pulumi.IntOutput `pulumi:"currentSize"`
	// The Kubelet arguments to be used by this pool
	KubeletArgs pulumi.StringMapOutput `pulumi:"kubeletArgs"`
	// Maximum size of the pool
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// Minimun size of the pool
	MinSize pulumi.IntPtrOutput `pulumi:"minSize"`
	// The name of the cluster
	Name pulumi.StringOutput `pulumi:"name"`
	// Server type of the pool servers
	NodeType pulumi.StringOutput               `pulumi:"nodeType"`
	Nodes    KubernetesNodePoolNodeArrayOutput `pulumi:"nodes"`
	// ID of the placement group
	PlacementGroupId pulumi.StringPtrOutput `pulumi:"placementGroupId"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// Size of the pool
	Size pulumi.IntOutput `pulumi:"size"`
	// The status of the pool
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags associated with the pool
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the last update of the pool
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The Pool upgrade policy
	UpgradePolicy KubernetesNodePoolUpgradePolicyOutput `pulumi:"upgradePolicy"`
	// The Kubernetes version of the pool
	Version pulumi.StringOutput `pulumi:"version"`
	// Whether to wait for the pool to be ready
	WaitForPoolReady pulumi.BoolPtrOutput `pulumi:"waitForPoolReady"`
	// The zone you want to attach the resource to
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewKubernetesNodePool registers a new resource with the given unique name, arguments, and options.
func NewKubernetesNodePool(ctx *pulumi.Context,
	name string, args *KubernetesNodePoolArgs, opts ...pulumi.ResourceOption) (*KubernetesNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource KubernetesNodePool
	err := ctx.RegisterResource("scaleway:index/kubernetesNodePool:KubernetesNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesNodePool gets an existing KubernetesNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesNodePoolState, opts ...pulumi.ResourceOption) (*KubernetesNodePool, error) {
	var resource KubernetesNodePool
	err := ctx.ReadResource("scaleway:index/kubernetesNodePool:KubernetesNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesNodePool resources.
type kubernetesNodePoolState struct {
	// Enable the autohealing on the pool
	Autohealing *bool `pulumi:"autohealing"`
	// Enable the autoscaling on the pool
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the cluster on which this pool will be created
	ClusterId *string `pulumi:"clusterId"`
	// Container runtime for the pool
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// The date and time of the creation of the pool
	CreatedAt *string `pulumi:"createdAt"`
	// The actual size of the pool
	CurrentSize *int `pulumi:"currentSize"`
	// The Kubelet arguments to be used by this pool
	KubeletArgs map[string]string `pulumi:"kubeletArgs"`
	// Maximum size of the pool
	MaxSize *int `pulumi:"maxSize"`
	// Minimun size of the pool
	MinSize *int `pulumi:"minSize"`
	// The name of the cluster
	Name *string `pulumi:"name"`
	// Server type of the pool servers
	NodeType *string                  `pulumi:"nodeType"`
	Nodes    []KubernetesNodePoolNode `pulumi:"nodes"`
	// ID of the placement group
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Size of the pool
	Size *int `pulumi:"size"`
	// The status of the pool
	Status *string `pulumi:"status"`
	// The tags associated with the pool
	Tags []string `pulumi:"tags"`
	// The date and time of the last update of the pool
	UpdatedAt *string `pulumi:"updatedAt"`
	// The Pool upgrade policy
	UpgradePolicy *KubernetesNodePoolUpgradePolicy `pulumi:"upgradePolicy"`
	// The Kubernetes version of the pool
	Version *string `pulumi:"version"`
	// Whether to wait for the pool to be ready
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

type KubernetesNodePoolState struct {
	// Enable the autohealing on the pool
	Autohealing pulumi.BoolPtrInput
	// Enable the autoscaling on the pool
	Autoscaling pulumi.BoolPtrInput
	// The ID of the cluster on which this pool will be created
	ClusterId pulumi.StringPtrInput
	// Container runtime for the pool
	ContainerRuntime pulumi.StringPtrInput
	// The date and time of the creation of the pool
	CreatedAt pulumi.StringPtrInput
	// The actual size of the pool
	CurrentSize pulumi.IntPtrInput
	// The Kubelet arguments to be used by this pool
	KubeletArgs pulumi.StringMapInput
	// Maximum size of the pool
	MaxSize pulumi.IntPtrInput
	// Minimun size of the pool
	MinSize pulumi.IntPtrInput
	// The name of the cluster
	Name pulumi.StringPtrInput
	// Server type of the pool servers
	NodeType pulumi.StringPtrInput
	Nodes    KubernetesNodePoolNodeArrayInput
	// ID of the placement group
	PlacementGroupId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Size of the pool
	Size pulumi.IntPtrInput
	// The status of the pool
	Status pulumi.StringPtrInput
	// The tags associated with the pool
	Tags pulumi.StringArrayInput
	// The date and time of the last update of the pool
	UpdatedAt pulumi.StringPtrInput
	// The Pool upgrade policy
	UpgradePolicy KubernetesNodePoolUpgradePolicyPtrInput
	// The Kubernetes version of the pool
	Version pulumi.StringPtrInput
	// Whether to wait for the pool to be ready
	WaitForPoolReady pulumi.BoolPtrInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (KubernetesNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolState)(nil)).Elem()
}

type kubernetesNodePoolArgs struct {
	// Enable the autohealing on the pool
	Autohealing *bool `pulumi:"autohealing"`
	// Enable the autoscaling on the pool
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the cluster on which this pool will be created
	ClusterId string `pulumi:"clusterId"`
	// Container runtime for the pool
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// The Kubelet arguments to be used by this pool
	KubeletArgs map[string]string `pulumi:"kubeletArgs"`
	// Maximum size of the pool
	MaxSize *int `pulumi:"maxSize"`
	// Minimun size of the pool
	MinSize *int `pulumi:"minSize"`
	// The name of the cluster
	Name *string `pulumi:"name"`
	// Server type of the pool servers
	NodeType string `pulumi:"nodeType"`
	// ID of the placement group
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Size of the pool
	Size int `pulumi:"size"`
	// The tags associated with the pool
	Tags []string `pulumi:"tags"`
	// The Pool upgrade policy
	UpgradePolicy *KubernetesNodePoolUpgradePolicy `pulumi:"upgradePolicy"`
	// Whether to wait for the pool to be ready
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a KubernetesNodePool resource.
type KubernetesNodePoolArgs struct {
	// Enable the autohealing on the pool
	Autohealing pulumi.BoolPtrInput
	// Enable the autoscaling on the pool
	Autoscaling pulumi.BoolPtrInput
	// The ID of the cluster on which this pool will be created
	ClusterId pulumi.StringInput
	// Container runtime for the pool
	ContainerRuntime pulumi.StringPtrInput
	// The Kubelet arguments to be used by this pool
	KubeletArgs pulumi.StringMapInput
	// Maximum size of the pool
	MaxSize pulumi.IntPtrInput
	// Minimun size of the pool
	MinSize pulumi.IntPtrInput
	// The name of the cluster
	Name pulumi.StringPtrInput
	// Server type of the pool servers
	NodeType pulumi.StringInput
	// ID of the placement group
	PlacementGroupId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Size of the pool
	Size pulumi.IntInput
	// The tags associated with the pool
	Tags pulumi.StringArrayInput
	// The Pool upgrade policy
	UpgradePolicy KubernetesNodePoolUpgradePolicyPtrInput
	// Whether to wait for the pool to be ready
	WaitForPoolReady pulumi.BoolPtrInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (KubernetesNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolArgs)(nil)).Elem()
}

type KubernetesNodePoolInput interface {
	pulumi.Input

	ToKubernetesNodePoolOutput() KubernetesNodePoolOutput
	ToKubernetesNodePoolOutputWithContext(ctx context.Context) KubernetesNodePoolOutput
}

func (*KubernetesNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodePool)(nil)).Elem()
}

func (i *KubernetesNodePool) ToKubernetesNodePoolOutput() KubernetesNodePoolOutput {
	return i.ToKubernetesNodePoolOutputWithContext(context.Background())
}

func (i *KubernetesNodePool) ToKubernetesNodePoolOutputWithContext(ctx context.Context) KubernetesNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolOutput)
}

// KubernetesNodePoolArrayInput is an input type that accepts KubernetesNodePoolArray and KubernetesNodePoolArrayOutput values.
// You can construct a concrete instance of `KubernetesNodePoolArrayInput` via:
//
//	KubernetesNodePoolArray{ KubernetesNodePoolArgs{...} }
type KubernetesNodePoolArrayInput interface {
	pulumi.Input

	ToKubernetesNodePoolArrayOutput() KubernetesNodePoolArrayOutput
	ToKubernetesNodePoolArrayOutputWithContext(context.Context) KubernetesNodePoolArrayOutput
}

type KubernetesNodePoolArray []KubernetesNodePoolInput

func (KubernetesNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesNodePool)(nil)).Elem()
}

func (i KubernetesNodePoolArray) ToKubernetesNodePoolArrayOutput() KubernetesNodePoolArrayOutput {
	return i.ToKubernetesNodePoolArrayOutputWithContext(context.Background())
}

func (i KubernetesNodePoolArray) ToKubernetesNodePoolArrayOutputWithContext(ctx context.Context) KubernetesNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolArrayOutput)
}

// KubernetesNodePoolMapInput is an input type that accepts KubernetesNodePoolMap and KubernetesNodePoolMapOutput values.
// You can construct a concrete instance of `KubernetesNodePoolMapInput` via:
//
//	KubernetesNodePoolMap{ "key": KubernetesNodePoolArgs{...} }
type KubernetesNodePoolMapInput interface {
	pulumi.Input

	ToKubernetesNodePoolMapOutput() KubernetesNodePoolMapOutput
	ToKubernetesNodePoolMapOutputWithContext(context.Context) KubernetesNodePoolMapOutput
}

type KubernetesNodePoolMap map[string]KubernetesNodePoolInput

func (KubernetesNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesNodePool)(nil)).Elem()
}

func (i KubernetesNodePoolMap) ToKubernetesNodePoolMapOutput() KubernetesNodePoolMapOutput {
	return i.ToKubernetesNodePoolMapOutputWithContext(context.Background())
}

func (i KubernetesNodePoolMap) ToKubernetesNodePoolMapOutputWithContext(ctx context.Context) KubernetesNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolMapOutput)
}

type KubernetesNodePoolOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodePool)(nil)).Elem()
}

func (o KubernetesNodePoolOutput) ToKubernetesNodePoolOutput() KubernetesNodePoolOutput {
	return o
}

func (o KubernetesNodePoolOutput) ToKubernetesNodePoolOutputWithContext(ctx context.Context) KubernetesNodePoolOutput {
	return o
}

// Enable the autohealing on the pool
func (o KubernetesNodePoolOutput) Autohealing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.BoolPtrOutput { return v.Autohealing }).(pulumi.BoolPtrOutput)
}

// Enable the autoscaling on the pool
func (o KubernetesNodePoolOutput) Autoscaling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.BoolPtrOutput { return v.Autoscaling }).(pulumi.BoolPtrOutput)
}

// The ID of the cluster on which this pool will be created
func (o KubernetesNodePoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Container runtime for the pool
func (o KubernetesNodePoolOutput) ContainerRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringPtrOutput { return v.ContainerRuntime }).(pulumi.StringPtrOutput)
}

// The date and time of the creation of the pool
func (o KubernetesNodePoolOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The actual size of the pool
func (o KubernetesNodePoolOutput) CurrentSize() pulumi.IntOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntOutput { return v.CurrentSize }).(pulumi.IntOutput)
}

// The Kubelet arguments to be used by this pool
func (o KubernetesNodePoolOutput) KubeletArgs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringMapOutput { return v.KubeletArgs }).(pulumi.StringMapOutput)
}

// Maximum size of the pool
func (o KubernetesNodePoolOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntOutput { return v.MaxSize }).(pulumi.IntOutput)
}

// Minimun size of the pool
func (o KubernetesNodePoolOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntPtrOutput { return v.MinSize }).(pulumi.IntPtrOutput)
}

// The name of the cluster
func (o KubernetesNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Server type of the pool servers
func (o KubernetesNodePoolOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

func (o KubernetesNodePoolOutput) Nodes() KubernetesNodePoolNodeArrayOutput {
	return o.ApplyT(func(v *KubernetesNodePool) KubernetesNodePoolNodeArrayOutput { return v.Nodes }).(KubernetesNodePoolNodeArrayOutput)
}

// ID of the placement group
func (o KubernetesNodePoolOutput) PlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringPtrOutput { return v.PlacementGroupId }).(pulumi.StringPtrOutput)
}

// The region you want to attach the resource to
func (o KubernetesNodePoolOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Size of the pool
func (o KubernetesNodePoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The status of the pool
func (o KubernetesNodePoolOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tags associated with the pool
func (o KubernetesNodePoolOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the last update of the pool
func (o KubernetesNodePoolOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The Pool upgrade policy
func (o KubernetesNodePoolOutput) UpgradePolicy() KubernetesNodePoolUpgradePolicyOutput {
	return o.ApplyT(func(v *KubernetesNodePool) KubernetesNodePoolUpgradePolicyOutput { return v.UpgradePolicy }).(KubernetesNodePoolUpgradePolicyOutput)
}

// The Kubernetes version of the pool
func (o KubernetesNodePoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Whether to wait for the pool to be ready
func (o KubernetesNodePoolOutput) WaitForPoolReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.BoolPtrOutput { return v.WaitForPoolReady }).(pulumi.BoolPtrOutput)
}

// The zone you want to attach the resource to
func (o KubernetesNodePoolOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type KubernetesNodePoolArrayOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesNodePool)(nil)).Elem()
}

func (o KubernetesNodePoolArrayOutput) ToKubernetesNodePoolArrayOutput() KubernetesNodePoolArrayOutput {
	return o
}

func (o KubernetesNodePoolArrayOutput) ToKubernetesNodePoolArrayOutputWithContext(ctx context.Context) KubernetesNodePoolArrayOutput {
	return o
}

func (o KubernetesNodePoolArrayOutput) Index(i pulumi.IntInput) KubernetesNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubernetesNodePool {
		return vs[0].([]*KubernetesNodePool)[vs[1].(int)]
	}).(KubernetesNodePoolOutput)
}

type KubernetesNodePoolMapOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesNodePool)(nil)).Elem()
}

func (o KubernetesNodePoolMapOutput) ToKubernetesNodePoolMapOutput() KubernetesNodePoolMapOutput {
	return o
}

func (o KubernetesNodePoolMapOutput) ToKubernetesNodePoolMapOutputWithContext(ctx context.Context) KubernetesNodePoolMapOutput {
	return o
}

func (o KubernetesNodePoolMapOutput) MapIndex(k pulumi.StringInput) KubernetesNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubernetesNodePool {
		return vs[0].(map[string]*KubernetesNodePool)[vs[1].(string)]
	}).(KubernetesNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolInput)(nil)).Elem(), &KubernetesNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolArrayInput)(nil)).Elem(), KubernetesNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolMapInput)(nil)).Elem(), KubernetesNodePoolMap{})
	pulumi.RegisterOutputType(KubernetesNodePoolOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolArrayOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolMapOutput{})
}
