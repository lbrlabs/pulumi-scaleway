// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create and manage Scaleway RDB database privilege.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := scaleway.NewDatabasePrivilege(ctx, "priv", &scaleway.DatabasePrivilegeArgs{
// 			InstanceId:   pulumi.Any(scaleway_rdb_instance.Rdb.Id),
// 			UserName:     pulumi.String("my-db-user"),
// 			DatabaseName: pulumi.String("my-db-name"),
// 			Permission:   pulumi.String("all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DatabasePrivilege struct {
	pulumi.CustomResourceState

	// Name of the database (e.g. `my-db-name`).
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// UUID of the instance where to create the database.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// Name of the user (e.g. `my-db-user`).
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewDatabasePrivilege registers a new resource with the given unique name, arguments, and options.
func NewDatabasePrivilege(ctx *pulumi.Context,
	name string, args *DatabasePrivilegeArgs, opts ...pulumi.ResourceOption) (*DatabasePrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	var resource DatabasePrivilege
	err := ctx.RegisterResource("scaleway:index/databasePrivilege:DatabasePrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasePrivilege gets an existing DatabasePrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasePrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasePrivilegeState, opts ...pulumi.ResourceOption) (*DatabasePrivilege, error) {
	var resource DatabasePrivilege
	err := ctx.ReadResource("scaleway:index/databasePrivilege:DatabasePrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasePrivilege resources.
type databasePrivilegeState struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName *string `pulumi:"databaseName"`
	// UUID of the instance where to create the database.
	InstanceId *string `pulumi:"instanceId"`
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission *string `pulumi:"permission"`
	// Name of the user (e.g. `my-db-user`).
	UserName *string `pulumi:"userName"`
}

type DatabasePrivilegeState struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName pulumi.StringPtrInput
	// UUID of the instance where to create the database.
	InstanceId pulumi.StringPtrInput
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission pulumi.StringPtrInput
	// Name of the user (e.g. `my-db-user`).
	UserName pulumi.StringPtrInput
}

func (DatabasePrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePrivilegeState)(nil)).Elem()
}

type databasePrivilegeArgs struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName string `pulumi:"databaseName"`
	// UUID of the instance where to create the database.
	InstanceId string `pulumi:"instanceId"`
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission string `pulumi:"permission"`
	// Name of the user (e.g. `my-db-user`).
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a DatabasePrivilege resource.
type DatabasePrivilegeArgs struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName pulumi.StringInput
	// UUID of the instance where to create the database.
	InstanceId pulumi.StringInput
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission pulumi.StringInput
	// Name of the user (e.g. `my-db-user`).
	UserName pulumi.StringInput
}

func (DatabasePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePrivilegeArgs)(nil)).Elem()
}

type DatabasePrivilegeInput interface {
	pulumi.Input

	ToDatabasePrivilegeOutput() DatabasePrivilegeOutput
	ToDatabasePrivilegeOutputWithContext(ctx context.Context) DatabasePrivilegeOutput
}

func (*DatabasePrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePrivilege)(nil))
}

func (i *DatabasePrivilege) ToDatabasePrivilegeOutput() DatabasePrivilegeOutput {
	return i.ToDatabasePrivilegeOutputWithContext(context.Background())
}

func (i *DatabasePrivilege) ToDatabasePrivilegeOutputWithContext(ctx context.Context) DatabasePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePrivilegeOutput)
}

type DatabasePrivilegeOutput struct{ *pulumi.OutputState }

func (DatabasePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePrivilege)(nil))
}

func (o DatabasePrivilegeOutput) ToDatabasePrivilegeOutput() DatabasePrivilegeOutput {
	return o
}

func (o DatabasePrivilegeOutput) ToDatabasePrivilegeOutputWithContext(ctx context.Context) DatabasePrivilegeOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePrivilegeInput)(nil)).Elem(), &DatabasePrivilege{})
	pulumi.RegisterOutputType(DatabasePrivilegeOutput{})
}
