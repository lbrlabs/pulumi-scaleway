// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoadbalancerFrontend struct {
	pulumi.CustomResourceState

	// ACL rules
	Acls LoadbalancerFrontendAclArrayOutput `pulumi:"acls"`
	// The load-balancer backend ID
	BackendId pulumi.StringOutput `pulumi:"backendId"`
	// Certificate ID
	//
	// Deprecated: Please use certificate_ids
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds pulumi.StringArrayOutput `pulumi:"certificateIds"`
	// TCP port to listen on the front side
	InboundPort pulumi.IntOutput `pulumi:"inboundPort"`
	// The load-balancer ID
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The name of the frontend
	Name pulumi.StringOutput `pulumi:"name"`
	// Set the maximum inactivity time on the client side
	TimeoutClient pulumi.StringPtrOutput `pulumi:"timeoutClient"`
}

// NewLoadbalancerFrontend registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerFrontend(ctx *pulumi.Context,
	name string, args *LoadbalancerFrontendArgs, opts ...pulumi.ResourceOption) (*LoadbalancerFrontend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendId == nil {
		return nil, errors.New("invalid value for required argument 'BackendId'")
	}
	if args.InboundPort == nil {
		return nil, errors.New("invalid value for required argument 'InboundPort'")
	}
	if args.LbId == nil {
		return nil, errors.New("invalid value for required argument 'LbId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LoadbalancerFrontend
	err := ctx.RegisterResource("scaleway:index/loadbalancerFrontend:LoadbalancerFrontend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerFrontend gets an existing LoadbalancerFrontend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerFrontend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerFrontendState, opts ...pulumi.ResourceOption) (*LoadbalancerFrontend, error) {
	var resource LoadbalancerFrontend
	err := ctx.ReadResource("scaleway:index/loadbalancerFrontend:LoadbalancerFrontend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerFrontend resources.
type loadbalancerFrontendState struct {
	// ACL rules
	Acls []LoadbalancerFrontendAcl `pulumi:"acls"`
	// The load-balancer backend ID
	BackendId *string `pulumi:"backendId"`
	// Certificate ID
	//
	// Deprecated: Please use certificate_ids
	CertificateId *string `pulumi:"certificateId"`
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds []string `pulumi:"certificateIds"`
	// TCP port to listen on the front side
	InboundPort *int `pulumi:"inboundPort"`
	// The load-balancer ID
	LbId *string `pulumi:"lbId"`
	// The name of the frontend
	Name *string `pulumi:"name"`
	// Set the maximum inactivity time on the client side
	TimeoutClient *string `pulumi:"timeoutClient"`
}

type LoadbalancerFrontendState struct {
	// ACL rules
	Acls LoadbalancerFrontendAclArrayInput
	// The load-balancer backend ID
	BackendId pulumi.StringPtrInput
	// Certificate ID
	//
	// Deprecated: Please use certificate_ids
	CertificateId pulumi.StringPtrInput
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds pulumi.StringArrayInput
	// TCP port to listen on the front side
	InboundPort pulumi.IntPtrInput
	// The load-balancer ID
	LbId pulumi.StringPtrInput
	// The name of the frontend
	Name pulumi.StringPtrInput
	// Set the maximum inactivity time on the client side
	TimeoutClient pulumi.StringPtrInput
}

func (LoadbalancerFrontendState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendState)(nil)).Elem()
}

type loadbalancerFrontendArgs struct {
	// ACL rules
	Acls []LoadbalancerFrontendAcl `pulumi:"acls"`
	// The load-balancer backend ID
	BackendId string `pulumi:"backendId"`
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds []string `pulumi:"certificateIds"`
	// TCP port to listen on the front side
	InboundPort int `pulumi:"inboundPort"`
	// The load-balancer ID
	LbId string `pulumi:"lbId"`
	// The name of the frontend
	Name *string `pulumi:"name"`
	// Set the maximum inactivity time on the client side
	TimeoutClient *string `pulumi:"timeoutClient"`
}

// The set of arguments for constructing a LoadbalancerFrontend resource.
type LoadbalancerFrontendArgs struct {
	// ACL rules
	Acls LoadbalancerFrontendAclArrayInput
	// The load-balancer backend ID
	BackendId pulumi.StringInput
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds pulumi.StringArrayInput
	// TCP port to listen on the front side
	InboundPort pulumi.IntInput
	// The load-balancer ID
	LbId pulumi.StringInput
	// The name of the frontend
	Name pulumi.StringPtrInput
	// Set the maximum inactivity time on the client side
	TimeoutClient pulumi.StringPtrInput
}

func (LoadbalancerFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendArgs)(nil)).Elem()
}

type LoadbalancerFrontendInput interface {
	pulumi.Input

	ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput
	ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput
}

func (*LoadbalancerFrontend) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontend)(nil)).Elem()
}

func (i *LoadbalancerFrontend) ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput {
	return i.ToLoadbalancerFrontendOutputWithContext(context.Background())
}

func (i *LoadbalancerFrontend) ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendOutput)
}

type LoadbalancerFrontendOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontend)(nil)).Elem()
}

func (o LoadbalancerFrontendOutput) ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput {
	return o
}

func (o LoadbalancerFrontendOutput) ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendInput)(nil)).Elem(), &LoadbalancerFrontend{})
	pulumi.RegisterOutputType(LoadbalancerFrontendOutput{})
}
