// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Scaleway Load-Balancer Frontends. For more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).
//
// ## Examples
//
// ### Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := scaleway.NewLoadbalancerFrontend(ctx, "frontend01", &scaleway.LoadbalancerFrontendArgs{
// 			LbId:        pulumi.Any(scaleway_lb.Lb01.Id),
// 			BackendId:   pulumi.Any(scaleway_lb_backend.Backend01.Id),
// 			InboundPort: pulumi.Int(80),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## With ACLs
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := scaleway.NewLoadbalancerFrontend(ctx, "frontend01", &scaleway.LoadbalancerFrontendArgs{
// 			LbId:        pulumi.Any(scaleway_lb.Lb01.Id),
// 			BackendId:   pulumi.Any(scaleway_lb_backend.Backend01.Id),
// 			InboundPort: pulumi.Int(80),
// 			Acls: LoadbalancerFrontendAclArray{
// 				&LoadbalancerFrontendAclArgs{
// 					Name: pulumi.String("blacklist wellknwon IPs"),
// 					Action: &LoadbalancerFrontendAclActionArgs{
// 						Type: pulumi.String("allow"),
// 					},
// 					Match: &LoadbalancerFrontendAclMatchArgs{
// 						IpSubnets: pulumi.StringArray{
// 							pulumi.String("192.168.0.1"),
// 							pulumi.String("192.168.0.2"),
// 							pulumi.String("192.168.10.0/24"),
// 						},
// 					},
// 				},
// 				&LoadbalancerFrontendAclArgs{
// 					Action: &LoadbalancerFrontendAclActionArgs{
// 						Type: pulumi.String("deny"),
// 					},
// 					Match: &LoadbalancerFrontendAclMatchArgs{
// 						IpSubnets: pulumi.StringArray{
// 							pulumi.String("51.51.51.51"),
// 						},
// 						HttpFilter: pulumi.String("regex"),
// 						HttpFilterValues: pulumi.StringArray{
// 							pulumi.String(fmt.Sprintf("%v%v", "^foo*bar", "$")),
// 						},
// 					},
// 				},
// 				&LoadbalancerFrontendAclArgs{
// 					Action: &LoadbalancerFrontendAclActionArgs{
// 						Type: pulumi.String("allow"),
// 					},
// 					Match: &LoadbalancerFrontendAclMatchArgs{
// 						HttpFilter: pulumi.String("path_begin"),
// 						HttpFilterValues: pulumi.StringArray{
// 							pulumi.String("foo"),
// 							pulumi.String("bar"),
// 						},
// 					},
// 				},
// 				&LoadbalancerFrontendAclArgs{
// 					Action: &LoadbalancerFrontendAclActionArgs{
// 						Type: pulumi.String("allow"),
// 					},
// 					Match: &LoadbalancerFrontendAclMatchArgs{
// 						HttpFilter: pulumi.String("path_begin"),
// 						HttpFilterValues: pulumi.StringArray{
// 							pulumi.String("hi"),
// 						},
// 						Invert: pulumi.Bool(true),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Load-Balancer frontend can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/loadbalancerFrontend:LoadbalancerFrontend frontend01 fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type LoadbalancerFrontend struct {
	pulumi.CustomResourceState

	// A list of ACL rules to apply to the load-balancer frontend.  Defined below.
	Acls LoadbalancerFrontendAclArrayOutput `pulumi:"acls"`
	// The load-balancer backend ID this frontend is attached to.
	BackendId pulumi.StringOutput `pulumi:"backendId"`
	// Certificate ID that should be used by the frontend.
	CertificateId pulumi.StringPtrOutput `pulumi:"certificateId"`
	// TCP port to listen on the front side.
	InboundPort pulumi.IntOutput `pulumi:"inboundPort"`
	// The load-balancer ID this frontend is attached to.
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// Maximum inactivity time on the client side. (e.g.: `1s`)
	TimeoutClient pulumi.StringPtrOutput `pulumi:"timeoutClient"`
}

// NewLoadbalancerFrontend registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerFrontend(ctx *pulumi.Context,
	name string, args *LoadbalancerFrontendArgs, opts ...pulumi.ResourceOption) (*LoadbalancerFrontend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendId == nil {
		return nil, errors.New("invalid value for required argument 'BackendId'")
	}
	if args.InboundPort == nil {
		return nil, errors.New("invalid value for required argument 'InboundPort'")
	}
	if args.LbId == nil {
		return nil, errors.New("invalid value for required argument 'LbId'")
	}
	var resource LoadbalancerFrontend
	err := ctx.RegisterResource("scaleway:index/loadbalancerFrontend:LoadbalancerFrontend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerFrontend gets an existing LoadbalancerFrontend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerFrontend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerFrontendState, opts ...pulumi.ResourceOption) (*LoadbalancerFrontend, error) {
	var resource LoadbalancerFrontend
	err := ctx.ReadResource("scaleway:index/loadbalancerFrontend:LoadbalancerFrontend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerFrontend resources.
type loadbalancerFrontendState struct {
	// A list of ACL rules to apply to the load-balancer frontend.  Defined below.
	Acls []LoadbalancerFrontendAcl `pulumi:"acls"`
	// The load-balancer backend ID this frontend is attached to.
	BackendId *string `pulumi:"backendId"`
	// Certificate ID that should be used by the frontend.
	CertificateId *string `pulumi:"certificateId"`
	// TCP port to listen on the front side.
	InboundPort *int `pulumi:"inboundPort"`
	// The load-balancer ID this frontend is attached to.
	LbId *string `pulumi:"lbId"`
	// The ACL name. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// Maximum inactivity time on the client side. (e.g.: `1s`)
	TimeoutClient *string `pulumi:"timeoutClient"`
}

type LoadbalancerFrontendState struct {
	// A list of ACL rules to apply to the load-balancer frontend.  Defined below.
	Acls LoadbalancerFrontendAclArrayInput
	// The load-balancer backend ID this frontend is attached to.
	BackendId pulumi.StringPtrInput
	// Certificate ID that should be used by the frontend.
	CertificateId pulumi.StringPtrInput
	// TCP port to listen on the front side.
	InboundPort pulumi.IntPtrInput
	// The load-balancer ID this frontend is attached to.
	LbId pulumi.StringPtrInput
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// Maximum inactivity time on the client side. (e.g.: `1s`)
	TimeoutClient pulumi.StringPtrInput
}

func (LoadbalancerFrontendState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendState)(nil)).Elem()
}

type loadbalancerFrontendArgs struct {
	// A list of ACL rules to apply to the load-balancer frontend.  Defined below.
	Acls []LoadbalancerFrontendAcl `pulumi:"acls"`
	// The load-balancer backend ID this frontend is attached to.
	BackendId string `pulumi:"backendId"`
	// Certificate ID that should be used by the frontend.
	CertificateId *string `pulumi:"certificateId"`
	// TCP port to listen on the front side.
	InboundPort int `pulumi:"inboundPort"`
	// The load-balancer ID this frontend is attached to.
	LbId string `pulumi:"lbId"`
	// The ACL name. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// Maximum inactivity time on the client side. (e.g.: `1s`)
	TimeoutClient *string `pulumi:"timeoutClient"`
}

// The set of arguments for constructing a LoadbalancerFrontend resource.
type LoadbalancerFrontendArgs struct {
	// A list of ACL rules to apply to the load-balancer frontend.  Defined below.
	Acls LoadbalancerFrontendAclArrayInput
	// The load-balancer backend ID this frontend is attached to.
	BackendId pulumi.StringInput
	// Certificate ID that should be used by the frontend.
	CertificateId pulumi.StringPtrInput
	// TCP port to listen on the front side.
	InboundPort pulumi.IntInput
	// The load-balancer ID this frontend is attached to.
	LbId pulumi.StringInput
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// Maximum inactivity time on the client side. (e.g.: `1s`)
	TimeoutClient pulumi.StringPtrInput
}

func (LoadbalancerFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendArgs)(nil)).Elem()
}

type LoadbalancerFrontendInput interface {
	pulumi.Input

	ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput
	ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput
}

func (*LoadbalancerFrontend) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontend)(nil)).Elem()
}

func (i *LoadbalancerFrontend) ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput {
	return i.ToLoadbalancerFrontendOutputWithContext(context.Background())
}

func (i *LoadbalancerFrontend) ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendOutput)
}

type LoadbalancerFrontendOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontend)(nil)).Elem()
}

func (o LoadbalancerFrontendOutput) ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput {
	return o
}

func (o LoadbalancerFrontendOutput) ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendInput)(nil)).Elem(), &LoadbalancerFrontend{})
	pulumi.RegisterOutputType(LoadbalancerFrontendOutput{})
}
