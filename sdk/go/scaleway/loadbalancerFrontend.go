// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoadbalancerFrontend struct {
	pulumi.CustomResourceState

	// ACL rules
	Acls LoadbalancerFrontendAclArrayOutput `pulumi:"acls"`
	// The load-balancer backend ID
	BackendId pulumi.StringOutput `pulumi:"backendId"`
	// Certificate ID
	//
	// Deprecated: Please use certificate_ids
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds pulumi.StringArrayOutput `pulumi:"certificateIds"`
	// TCP port to listen on the front side
	InboundPort pulumi.IntOutput `pulumi:"inboundPort"`
	// The load-balancer ID
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The name of the frontend
	Name pulumi.StringOutput `pulumi:"name"`
	// Set the maximum inactivity time on the client side
	TimeoutClient pulumi.StringPtrOutput `pulumi:"timeoutClient"`
}

// NewLoadbalancerFrontend registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerFrontend(ctx *pulumi.Context,
	name string, args *LoadbalancerFrontendArgs, opts ...pulumi.ResourceOption) (*LoadbalancerFrontend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendId == nil {
		return nil, errors.New("invalid value for required argument 'BackendId'")
	}
	if args.InboundPort == nil {
		return nil, errors.New("invalid value for required argument 'InboundPort'")
	}
	if args.LbId == nil {
		return nil, errors.New("invalid value for required argument 'LbId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LoadbalancerFrontend
	err := ctx.RegisterResource("scaleway:index/loadbalancerFrontend:LoadbalancerFrontend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerFrontend gets an existing LoadbalancerFrontend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerFrontend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerFrontendState, opts ...pulumi.ResourceOption) (*LoadbalancerFrontend, error) {
	var resource LoadbalancerFrontend
	err := ctx.ReadResource("scaleway:index/loadbalancerFrontend:LoadbalancerFrontend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerFrontend resources.
type loadbalancerFrontendState struct {
	// ACL rules
	Acls []LoadbalancerFrontendAcl `pulumi:"acls"`
	// The load-balancer backend ID
	BackendId *string `pulumi:"backendId"`
	// Certificate ID
	//
	// Deprecated: Please use certificate_ids
	CertificateId *string `pulumi:"certificateId"`
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds []string `pulumi:"certificateIds"`
	// TCP port to listen on the front side
	InboundPort *int `pulumi:"inboundPort"`
	// The load-balancer ID
	LbId *string `pulumi:"lbId"`
	// The name of the frontend
	Name *string `pulumi:"name"`
	// Set the maximum inactivity time on the client side
	TimeoutClient *string `pulumi:"timeoutClient"`
}

type LoadbalancerFrontendState struct {
	// ACL rules
	Acls LoadbalancerFrontendAclArrayInput
	// The load-balancer backend ID
	BackendId pulumi.StringPtrInput
	// Certificate ID
	//
	// Deprecated: Please use certificate_ids
	CertificateId pulumi.StringPtrInput
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds pulumi.StringArrayInput
	// TCP port to listen on the front side
	InboundPort pulumi.IntPtrInput
	// The load-balancer ID
	LbId pulumi.StringPtrInput
	// The name of the frontend
	Name pulumi.StringPtrInput
	// Set the maximum inactivity time on the client side
	TimeoutClient pulumi.StringPtrInput
}

func (LoadbalancerFrontendState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendState)(nil)).Elem()
}

type loadbalancerFrontendArgs struct {
	// ACL rules
	Acls []LoadbalancerFrontendAcl `pulumi:"acls"`
	// The load-balancer backend ID
	BackendId string `pulumi:"backendId"`
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds []string `pulumi:"certificateIds"`
	// TCP port to listen on the front side
	InboundPort int `pulumi:"inboundPort"`
	// The load-balancer ID
	LbId string `pulumi:"lbId"`
	// The name of the frontend
	Name *string `pulumi:"name"`
	// Set the maximum inactivity time on the client side
	TimeoutClient *string `pulumi:"timeoutClient"`
}

// The set of arguments for constructing a LoadbalancerFrontend resource.
type LoadbalancerFrontendArgs struct {
	// ACL rules
	Acls LoadbalancerFrontendAclArrayInput
	// The load-balancer backend ID
	BackendId pulumi.StringInput
	// Collection of Certificate IDs related to the load balancer and domain
	CertificateIds pulumi.StringArrayInput
	// TCP port to listen on the front side
	InboundPort pulumi.IntInput
	// The load-balancer ID
	LbId pulumi.StringInput
	// The name of the frontend
	Name pulumi.StringPtrInput
	// Set the maximum inactivity time on the client side
	TimeoutClient pulumi.StringPtrInput
}

func (LoadbalancerFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendArgs)(nil)).Elem()
}

type LoadbalancerFrontendInput interface {
	pulumi.Input

	ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput
	ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput
}

func (*LoadbalancerFrontend) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontend)(nil)).Elem()
}

func (i *LoadbalancerFrontend) ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput {
	return i.ToLoadbalancerFrontendOutputWithContext(context.Background())
}

func (i *LoadbalancerFrontend) ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendOutput)
}

// LoadbalancerFrontendArrayInput is an input type that accepts LoadbalancerFrontendArray and LoadbalancerFrontendArrayOutput values.
// You can construct a concrete instance of `LoadbalancerFrontendArrayInput` via:
//
//          LoadbalancerFrontendArray{ LoadbalancerFrontendArgs{...} }
type LoadbalancerFrontendArrayInput interface {
	pulumi.Input

	ToLoadbalancerFrontendArrayOutput() LoadbalancerFrontendArrayOutput
	ToLoadbalancerFrontendArrayOutputWithContext(context.Context) LoadbalancerFrontendArrayOutput
}

type LoadbalancerFrontendArray []LoadbalancerFrontendInput

func (LoadbalancerFrontendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerFrontend)(nil)).Elem()
}

func (i LoadbalancerFrontendArray) ToLoadbalancerFrontendArrayOutput() LoadbalancerFrontendArrayOutput {
	return i.ToLoadbalancerFrontendArrayOutputWithContext(context.Background())
}

func (i LoadbalancerFrontendArray) ToLoadbalancerFrontendArrayOutputWithContext(ctx context.Context) LoadbalancerFrontendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendArrayOutput)
}

// LoadbalancerFrontendMapInput is an input type that accepts LoadbalancerFrontendMap and LoadbalancerFrontendMapOutput values.
// You can construct a concrete instance of `LoadbalancerFrontendMapInput` via:
//
//          LoadbalancerFrontendMap{ "key": LoadbalancerFrontendArgs{...} }
type LoadbalancerFrontendMapInput interface {
	pulumi.Input

	ToLoadbalancerFrontendMapOutput() LoadbalancerFrontendMapOutput
	ToLoadbalancerFrontendMapOutputWithContext(context.Context) LoadbalancerFrontendMapOutput
}

type LoadbalancerFrontendMap map[string]LoadbalancerFrontendInput

func (LoadbalancerFrontendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerFrontend)(nil)).Elem()
}

func (i LoadbalancerFrontendMap) ToLoadbalancerFrontendMapOutput() LoadbalancerFrontendMapOutput {
	return i.ToLoadbalancerFrontendMapOutputWithContext(context.Background())
}

func (i LoadbalancerFrontendMap) ToLoadbalancerFrontendMapOutputWithContext(ctx context.Context) LoadbalancerFrontendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerFrontendMapOutput)
}

type LoadbalancerFrontendOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerFrontend)(nil)).Elem()
}

func (o LoadbalancerFrontendOutput) ToLoadbalancerFrontendOutput() LoadbalancerFrontendOutput {
	return o
}

func (o LoadbalancerFrontendOutput) ToLoadbalancerFrontendOutputWithContext(ctx context.Context) LoadbalancerFrontendOutput {
	return o
}

// ACL rules
func (o LoadbalancerFrontendOutput) Acls() LoadbalancerFrontendAclArrayOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) LoadbalancerFrontendAclArrayOutput { return v.Acls }).(LoadbalancerFrontendAclArrayOutput)
}

// The load-balancer backend ID
func (o LoadbalancerFrontendOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringOutput { return v.BackendId }).(pulumi.StringOutput)
}

// Certificate ID
//
// Deprecated: Please use certificate_ids
func (o LoadbalancerFrontendOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// Collection of Certificate IDs related to the load balancer and domain
func (o LoadbalancerFrontendOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringArrayOutput { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

// TCP port to listen on the front side
func (o LoadbalancerFrontendOutput) InboundPort() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.IntOutput { return v.InboundPort }).(pulumi.IntOutput)
}

// The load-balancer ID
func (o LoadbalancerFrontendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringOutput { return v.LbId }).(pulumi.StringOutput)
}

// The name of the frontend
func (o LoadbalancerFrontendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Set the maximum inactivity time on the client side
func (o LoadbalancerFrontendOutput) TimeoutClient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerFrontend) pulumi.StringPtrOutput { return v.TimeoutClient }).(pulumi.StringPtrOutput)
}

type LoadbalancerFrontendArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerFrontend)(nil)).Elem()
}

func (o LoadbalancerFrontendArrayOutput) ToLoadbalancerFrontendArrayOutput() LoadbalancerFrontendArrayOutput {
	return o
}

func (o LoadbalancerFrontendArrayOutput) ToLoadbalancerFrontendArrayOutputWithContext(ctx context.Context) LoadbalancerFrontendArrayOutput {
	return o
}

func (o LoadbalancerFrontendArrayOutput) Index(i pulumi.IntInput) LoadbalancerFrontendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerFrontend {
		return vs[0].([]*LoadbalancerFrontend)[vs[1].(int)]
	}).(LoadbalancerFrontendOutput)
}

type LoadbalancerFrontendMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerFrontendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerFrontend)(nil)).Elem()
}

func (o LoadbalancerFrontendMapOutput) ToLoadbalancerFrontendMapOutput() LoadbalancerFrontendMapOutput {
	return o
}

func (o LoadbalancerFrontendMapOutput) ToLoadbalancerFrontendMapOutputWithContext(ctx context.Context) LoadbalancerFrontendMapOutput {
	return o
}

func (o LoadbalancerFrontendMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerFrontendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerFrontend {
		return vs[0].(map[string]*LoadbalancerFrontend)[vs[1].(string)]
	}).(LoadbalancerFrontendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendInput)(nil)).Elem(), &LoadbalancerFrontend{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendArrayInput)(nil)).Elem(), LoadbalancerFrontendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerFrontendMapInput)(nil)).Elem(), LoadbalancerFrontendMap{})
	pulumi.RegisterOutputType(LoadbalancerFrontendOutput{})
	pulumi.RegisterOutputType(LoadbalancerFrontendArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerFrontendMapOutput{})
}
