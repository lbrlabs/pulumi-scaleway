// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FunctionNamespace struct {
	pulumi.CustomResourceState

	// The description of the function namespace
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The environment variables of the function namespace
	EnvironmentVariables pulumi.StringMapOutput `pulumi:"environmentVariables"`
	// The name of the function namespace
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// The endpoint reachable by docker
	RegistryEndpoint pulumi.StringOutput `pulumi:"registryEndpoint"`
	// The ID of the registry namespace
	RegistryNamespaceId pulumi.StringOutput `pulumi:"registryNamespaceId"`
}

// NewFunctionNamespace registers a new resource with the given unique name, arguments, and options.
func NewFunctionNamespace(ctx *pulumi.Context,
	name string, args *FunctionNamespaceArgs, opts ...pulumi.ResourceOption) (*FunctionNamespace, error) {
	if args == nil {
		args = &FunctionNamespaceArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FunctionNamespace
	err := ctx.RegisterResource("scaleway:index/functionNamespace:FunctionNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionNamespace gets an existing FunctionNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionNamespaceState, opts ...pulumi.ResourceOption) (*FunctionNamespace, error) {
	var resource FunctionNamespace
	err := ctx.ReadResource("scaleway:index/functionNamespace:FunctionNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionNamespace resources.
type functionNamespaceState struct {
	// The description of the function namespace
	Description *string `pulumi:"description"`
	// The environment variables of the function namespace
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the function namespace
	Name *string `pulumi:"name"`
	// The organization_id you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// The endpoint reachable by docker
	RegistryEndpoint *string `pulumi:"registryEndpoint"`
	// The ID of the registry namespace
	RegistryNamespaceId *string `pulumi:"registryNamespaceId"`
}

type FunctionNamespaceState struct {
	// The description of the function namespace
	Description pulumi.StringPtrInput
	// The environment variables of the function namespace
	EnvironmentVariables pulumi.StringMapInput
	// The name of the function namespace
	Name pulumi.StringPtrInput
	// The organization_id you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// The endpoint reachable by docker
	RegistryEndpoint pulumi.StringPtrInput
	// The ID of the registry namespace
	RegistryNamespaceId pulumi.StringPtrInput
}

func (FunctionNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionNamespaceState)(nil)).Elem()
}

type functionNamespaceArgs struct {
	// The description of the function namespace
	Description *string `pulumi:"description"`
	// The environment variables of the function namespace
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the function namespace
	Name *string `pulumi:"name"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a FunctionNamespace resource.
type FunctionNamespaceArgs struct {
	// The description of the function namespace
	Description pulumi.StringPtrInput
	// The environment variables of the function namespace
	EnvironmentVariables pulumi.StringMapInput
	// The name of the function namespace
	Name pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (FunctionNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionNamespaceArgs)(nil)).Elem()
}

type FunctionNamespaceInput interface {
	pulumi.Input

	ToFunctionNamespaceOutput() FunctionNamespaceOutput
	ToFunctionNamespaceOutputWithContext(ctx context.Context) FunctionNamespaceOutput
}

func (*FunctionNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionNamespace)(nil)).Elem()
}

func (i *FunctionNamespace) ToFunctionNamespaceOutput() FunctionNamespaceOutput {
	return i.ToFunctionNamespaceOutputWithContext(context.Background())
}

func (i *FunctionNamespace) ToFunctionNamespaceOutputWithContext(ctx context.Context) FunctionNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionNamespaceOutput)
}

type FunctionNamespaceOutput struct{ *pulumi.OutputState }

func (FunctionNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionNamespace)(nil)).Elem()
}

func (o FunctionNamespaceOutput) ToFunctionNamespaceOutput() FunctionNamespaceOutput {
	return o
}

func (o FunctionNamespaceOutput) ToFunctionNamespaceOutputWithContext(ctx context.Context) FunctionNamespaceOutput {
	return o
}

// The description of the function namespace
func (o FunctionNamespaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionNamespace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The environment variables of the function namespace
func (o FunctionNamespaceOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FunctionNamespace) pulumi.StringMapOutput { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the function namespace
func (o FunctionNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization_id you want to attach the resource to
func (o FunctionNamespaceOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionNamespace) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The project_id you want to attach the resource to
func (o FunctionNamespaceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionNamespace) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region you want to attach the resource to
func (o FunctionNamespaceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionNamespace) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The endpoint reachable by docker
func (o FunctionNamespaceOutput) RegistryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionNamespace) pulumi.StringOutput { return v.RegistryEndpoint }).(pulumi.StringOutput)
}

// The ID of the registry namespace
func (o FunctionNamespaceOutput) RegistryNamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionNamespace) pulumi.StringOutput { return v.RegistryNamespaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionNamespaceInput)(nil)).Elem(), &FunctionNamespace{})
	pulumi.RegisterOutputType(FunctionNamespaceOutput{})
}
