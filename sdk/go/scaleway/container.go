// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Container struct {
	pulumi.CustomResourceState

	// The amount of vCPU computing resources to allocate to each container. Defaults to 70.
	CpuLimit pulumi.IntOutput `pulumi:"cpuLimit"`
	// The cron status
	CronStatus pulumi.StringOutput `pulumi:"cronStatus"`
	// This allows you to control your production environment
	Deploy pulumi.BoolPtrOutput `pulumi:"deploy"`
	// The container description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The container domain name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The environment variables to be injected into your container at runtime.
	EnvironmentVariables pulumi.StringMapOutput `pulumi:"environmentVariables"`
	// The error description
	ErrorMessage pulumi.StringOutput `pulumi:"errorMessage"`
	// The maximum the number of simultaneous requests your container can handle at the same time. Defaults to 50.
	MaxConcurrency pulumi.IntOutput `pulumi:"maxConcurrency"`
	// The maximum of number of instances this container can scale to. Default to 20.
	MaxScale pulumi.IntOutput `pulumi:"maxScale"`
	// The memory computing resources in MB to allocate to each container. Defaults to 128.
	MemoryLimit pulumi.IntOutput `pulumi:"memoryLimit"`
	// The minimum of running container instances continuously. Defaults to 0.
	MinScale pulumi.IntOutput `pulumi:"minScale"`
	// The container name
	Name pulumi.StringOutput `pulumi:"name"`
	// The container namespace associated
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// The port to expose the container. Defaults to 8080
	Port pulumi.IntOutput `pulumi:"port"`
	// The privacy type define the way to authenticate to your container
	Privacy pulumi.StringPtrOutput `pulumi:"privacy"`
	// The communication protocol http1 or h2c. Defaults to http1.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The region of the resource
	Region pulumi.StringOutput `pulumi:"region"`
	// The scaleway registry image address
	RegistryImage pulumi.StringOutput `pulumi:"registryImage"`
	// The container status
	Status pulumi.StringOutput `pulumi:"status"`
	// The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to
	// 300s.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
}

// NewContainer registers a new resource with the given unique name, arguments, and options.
func NewContainer(ctx *pulumi.Context,
	name string, args *ContainerArgs, opts ...pulumi.ResourceOption) (*Container, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Container
	err := ctx.RegisterResource("scaleway:index/container:Container", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainer gets an existing Container resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerState, opts ...pulumi.ResourceOption) (*Container, error) {
	var resource Container
	err := ctx.ReadResource("scaleway:index/container:Container", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Container resources.
type containerState struct {
	// The amount of vCPU computing resources to allocate to each container. Defaults to 70.
	CpuLimit *int `pulumi:"cpuLimit"`
	// The cron status
	CronStatus *string `pulumi:"cronStatus"`
	// This allows you to control your production environment
	Deploy *bool `pulumi:"deploy"`
	// The container description
	Description *string `pulumi:"description"`
	// The container domain name.
	DomainName *string `pulumi:"domainName"`
	// The environment variables to be injected into your container at runtime.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The error description
	ErrorMessage *string `pulumi:"errorMessage"`
	// The maximum the number of simultaneous requests your container can handle at the same time. Defaults to 50.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// The maximum of number of instances this container can scale to. Default to 20.
	MaxScale *int `pulumi:"maxScale"`
	// The memory computing resources in MB to allocate to each container. Defaults to 128.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The minimum of running container instances continuously. Defaults to 0.
	MinScale *int `pulumi:"minScale"`
	// The container name
	Name *string `pulumi:"name"`
	// The container namespace associated
	NamespaceId *string `pulumi:"namespaceId"`
	// The port to expose the container. Defaults to 8080
	Port *int `pulumi:"port"`
	// The privacy type define the way to authenticate to your container
	Privacy *string `pulumi:"privacy"`
	// The communication protocol http1 or h2c. Defaults to http1.
	Protocol *string `pulumi:"protocol"`
	// The region of the resource
	Region *string `pulumi:"region"`
	// The scaleway registry image address
	RegistryImage *string `pulumi:"registryImage"`
	// The container status
	Status *string `pulumi:"status"`
	// The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to
	// 300s.
	Timeout *int `pulumi:"timeout"`
}

type ContainerState struct {
	// The amount of vCPU computing resources to allocate to each container. Defaults to 70.
	CpuLimit pulumi.IntPtrInput
	// The cron status
	CronStatus pulumi.StringPtrInput
	// This allows you to control your production environment
	Deploy pulumi.BoolPtrInput
	// The container description
	Description pulumi.StringPtrInput
	// The container domain name.
	DomainName pulumi.StringPtrInput
	// The environment variables to be injected into your container at runtime.
	EnvironmentVariables pulumi.StringMapInput
	// The error description
	ErrorMessage pulumi.StringPtrInput
	// The maximum the number of simultaneous requests your container can handle at the same time. Defaults to 50.
	MaxConcurrency pulumi.IntPtrInput
	// The maximum of number of instances this container can scale to. Default to 20.
	MaxScale pulumi.IntPtrInput
	// The memory computing resources in MB to allocate to each container. Defaults to 128.
	MemoryLimit pulumi.IntPtrInput
	// The minimum of running container instances continuously. Defaults to 0.
	MinScale pulumi.IntPtrInput
	// The container name
	Name pulumi.StringPtrInput
	// The container namespace associated
	NamespaceId pulumi.StringPtrInput
	// The port to expose the container. Defaults to 8080
	Port pulumi.IntPtrInput
	// The privacy type define the way to authenticate to your container
	Privacy pulumi.StringPtrInput
	// The communication protocol http1 or h2c. Defaults to http1.
	Protocol pulumi.StringPtrInput
	// The region of the resource
	Region pulumi.StringPtrInput
	// The scaleway registry image address
	RegistryImage pulumi.StringPtrInput
	// The container status
	Status pulumi.StringPtrInput
	// The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to
	// 300s.
	Timeout pulumi.IntPtrInput
}

func (ContainerState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerState)(nil)).Elem()
}

type containerArgs struct {
	// The amount of vCPU computing resources to allocate to each container. Defaults to 70.
	CpuLimit *int `pulumi:"cpuLimit"`
	// This allows you to control your production environment
	Deploy *bool `pulumi:"deploy"`
	// The container description
	Description *string `pulumi:"description"`
	// The container domain name.
	DomainName *string `pulumi:"domainName"`
	// The environment variables to be injected into your container at runtime.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The maximum the number of simultaneous requests your container can handle at the same time. Defaults to 50.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// The maximum of number of instances this container can scale to. Default to 20.
	MaxScale *int `pulumi:"maxScale"`
	// The memory computing resources in MB to allocate to each container. Defaults to 128.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The minimum of running container instances continuously. Defaults to 0.
	MinScale *int `pulumi:"minScale"`
	// The container name
	Name *string `pulumi:"name"`
	// The container namespace associated
	NamespaceId string `pulumi:"namespaceId"`
	// The port to expose the container. Defaults to 8080
	Port *int `pulumi:"port"`
	// The privacy type define the way to authenticate to your container
	Privacy *string `pulumi:"privacy"`
	// The communication protocol http1 or h2c. Defaults to http1.
	Protocol *string `pulumi:"protocol"`
	// The scaleway registry image address
	RegistryImage *string `pulumi:"registryImage"`
	// The container status
	Status *string `pulumi:"status"`
	// The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to
	// 300s.
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a Container resource.
type ContainerArgs struct {
	// The amount of vCPU computing resources to allocate to each container. Defaults to 70.
	CpuLimit pulumi.IntPtrInput
	// This allows you to control your production environment
	Deploy pulumi.BoolPtrInput
	// The container description
	Description pulumi.StringPtrInput
	// The container domain name.
	DomainName pulumi.StringPtrInput
	// The environment variables to be injected into your container at runtime.
	EnvironmentVariables pulumi.StringMapInput
	// The maximum the number of simultaneous requests your container can handle at the same time. Defaults to 50.
	MaxConcurrency pulumi.IntPtrInput
	// The maximum of number of instances this container can scale to. Default to 20.
	MaxScale pulumi.IntPtrInput
	// The memory computing resources in MB to allocate to each container. Defaults to 128.
	MemoryLimit pulumi.IntPtrInput
	// The minimum of running container instances continuously. Defaults to 0.
	MinScale pulumi.IntPtrInput
	// The container name
	Name pulumi.StringPtrInput
	// The container namespace associated
	NamespaceId pulumi.StringInput
	// The port to expose the container. Defaults to 8080
	Port pulumi.IntPtrInput
	// The privacy type define the way to authenticate to your container
	Privacy pulumi.StringPtrInput
	// The communication protocol http1 or h2c. Defaults to http1.
	Protocol pulumi.StringPtrInput
	// The scaleway registry image address
	RegistryImage pulumi.StringPtrInput
	// The container status
	Status pulumi.StringPtrInput
	// The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to
	// 300s.
	Timeout pulumi.IntPtrInput
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerArgs)(nil)).Elem()
}

type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(ctx context.Context) ContainerOutput
}

func (*Container) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (i *Container) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i *Container) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//          ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

// ContainerMapInput is an input type that accepts ContainerMap and ContainerMapOutput values.
// You can construct a concrete instance of `ContainerMapInput` via:
//
//          ContainerMap{ "key": ContainerArgs{...} }
type ContainerMapInput interface {
	pulumi.Input

	ToContainerMapOutput() ContainerMapOutput
	ToContainerMapOutputWithContext(context.Context) ContainerMapOutput
}

type ContainerMap map[string]ContainerInput

func (ContainerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Container)(nil)).Elem()
}

func (i ContainerMap) ToContainerMapOutput() ContainerMapOutput {
	return i.ToContainerMapOutputWithContext(context.Background())
}

func (i ContainerMap) ToContainerMapOutputWithContext(ctx context.Context) ContainerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMapOutput)
}

type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

// The amount of vCPU computing resources to allocate to each container. Defaults to 70.
func (o ContainerOutput) CpuLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.CpuLimit }).(pulumi.IntOutput)
}

// The cron status
func (o ContainerOutput) CronStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.CronStatus }).(pulumi.StringOutput)
}

// This allows you to control your production environment
func (o ContainerOutput) Deploy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.Deploy }).(pulumi.BoolPtrOutput)
}

// The container description
func (o ContainerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The container domain name.
func (o ContainerOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The environment variables to be injected into your container at runtime.
func (o ContainerOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Container) pulumi.StringMapOutput { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The error description
func (o ContainerOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The maximum the number of simultaneous requests your container can handle at the same time. Defaults to 50.
func (o ContainerOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// The maximum of number of instances this container can scale to. Default to 20.
func (o ContainerOutput) MaxScale() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.MaxScale }).(pulumi.IntOutput)
}

// The memory computing resources in MB to allocate to each container. Defaults to 128.
func (o ContainerOutput) MemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.MemoryLimit }).(pulumi.IntOutput)
}

// The minimum of running container instances continuously. Defaults to 0.
func (o ContainerOutput) MinScale() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.MinScale }).(pulumi.IntOutput)
}

// The container name
func (o ContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The container namespace associated
func (o ContainerOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// The port to expose the container. Defaults to 8080
func (o ContainerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The privacy type define the way to authenticate to your container
func (o ContainerOutput) Privacy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Privacy }).(pulumi.StringPtrOutput)
}

// The communication protocol http1 or h2c. Defaults to http1.
func (o ContainerOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The region of the resource
func (o ContainerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The scaleway registry image address
func (o ContainerOutput) RegistryImage() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.RegistryImage }).(pulumi.StringOutput)
}

// The container status
func (o ContainerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to
// 300s.
func (o ContainerOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Container)(nil)).Elem()
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Container {
		return vs[0].([]*Container)[vs[1].(int)]
	}).(ContainerOutput)
}

type ContainerMapOutput struct{ *pulumi.OutputState }

func (ContainerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Container)(nil)).Elem()
}

func (o ContainerMapOutput) ToContainerMapOutput() ContainerMapOutput {
	return o
}

func (o ContainerMapOutput) ToContainerMapOutputWithContext(ctx context.Context) ContainerMapOutput {
	return o
}

func (o ContainerMapOutput) MapIndex(k pulumi.StringInput) ContainerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Container {
		return vs[0].(map[string]*Container)[vs[1].(string)]
	}).(ContainerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInput)(nil)).Elem(), &Container{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerArrayInput)(nil)).Elem(), ContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMapInput)(nil)).Elem(), ContainerMap{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerMapOutput{})
}
