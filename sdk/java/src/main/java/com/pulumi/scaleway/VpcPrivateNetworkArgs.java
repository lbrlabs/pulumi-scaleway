// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;
import com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv6SubnetArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcPrivateNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcPrivateNetworkArgs Empty = new VpcPrivateNetworkArgs();

    /**
     * The IPv4 subnet associated with the private network.
     * 
     */
    @Import(name="ipv4Subnet")
    private @Nullable Output<VpcPrivateNetworkIpv4SubnetArgs> ipv4Subnet;

    /**
     * @return The IPv4 subnet associated with the private network.
     * 
     */
    public Optional<Output<VpcPrivateNetworkIpv4SubnetArgs>> ipv4Subnet() {
        return Optional.ofNullable(this.ipv4Subnet);
    }

    /**
     * The IPv6 subnets associated with the private network.
     * 
     * &gt; **Note:** If using Regional Private Network:
     * 
     */
    @Import(name="ipv6Subnets")
    private @Nullable Output<List<VpcPrivateNetworkIpv6SubnetArgs>> ipv6Subnets;

    /**
     * @return The IPv6 subnets associated with the private network.
     * 
     * &gt; **Note:** If using Regional Private Network:
     * 
     */
    public Optional<Output<List<VpcPrivateNetworkIpv6SubnetArgs>>> ipv6Subnets() {
        return Optional.ofNullable(this.ipv6Subnets);
    }

    /**
     * Defines whether the private network is Regional. By default, it will be Zonal.
     * 
     */
    @Import(name="isRegional")
    private @Nullable Output<Boolean> isRegional;

    /**
     * @return Defines whether the private network is Regional. By default, it will be Zonal.
     * 
     */
    public Optional<Output<Boolean>> isRegional() {
        return Optional.ofNullable(this.isRegional);
    }

    /**
     * The name of the private network. If not provided it will be randomly generated.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the private network. If not provided it will be randomly generated.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `project_id`) The ID of the project the private network is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the private network is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `region`) The region of the private network.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`) The region of the private network.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The tags associated with the private network.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags associated with the private network.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The VPC in which to create the private network.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The VPC in which to create the private network.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * `zone`) The zone in which the private network should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the private network should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private VpcPrivateNetworkArgs() {}

    private VpcPrivateNetworkArgs(VpcPrivateNetworkArgs $) {
        this.ipv4Subnet = $.ipv4Subnet;
        this.ipv6Subnets = $.ipv6Subnets;
        this.isRegional = $.isRegional;
        this.name = $.name;
        this.projectId = $.projectId;
        this.region = $.region;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcPrivateNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcPrivateNetworkArgs $;

        public Builder() {
            $ = new VpcPrivateNetworkArgs();
        }

        public Builder(VpcPrivateNetworkArgs defaults) {
            $ = new VpcPrivateNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipv4Subnet The IPv4 subnet associated with the private network.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Subnet(@Nullable Output<VpcPrivateNetworkIpv4SubnetArgs> ipv4Subnet) {
            $.ipv4Subnet = ipv4Subnet;
            return this;
        }

        /**
         * @param ipv4Subnet The IPv4 subnet associated with the private network.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs ipv4Subnet) {
            return ipv4Subnet(Output.of(ipv4Subnet));
        }

        /**
         * @param ipv6Subnets The IPv6 subnets associated with the private network.
         * 
         * &gt; **Note:** If using Regional Private Network:
         * 
         * @return builder
         * 
         */
        public Builder ipv6Subnets(@Nullable Output<List<VpcPrivateNetworkIpv6SubnetArgs>> ipv6Subnets) {
            $.ipv6Subnets = ipv6Subnets;
            return this;
        }

        /**
         * @param ipv6Subnets The IPv6 subnets associated with the private network.
         * 
         * &gt; **Note:** If using Regional Private Network:
         * 
         * @return builder
         * 
         */
        public Builder ipv6Subnets(List<VpcPrivateNetworkIpv6SubnetArgs> ipv6Subnets) {
            return ipv6Subnets(Output.of(ipv6Subnets));
        }

        /**
         * @param ipv6Subnets The IPv6 subnets associated with the private network.
         * 
         * &gt; **Note:** If using Regional Private Network:
         * 
         * @return builder
         * 
         */
        public Builder ipv6Subnets(VpcPrivateNetworkIpv6SubnetArgs... ipv6Subnets) {
            return ipv6Subnets(List.of(ipv6Subnets));
        }

        /**
         * @param isRegional Defines whether the private network is Regional. By default, it will be Zonal.
         * 
         * @return builder
         * 
         */
        public Builder isRegional(@Nullable Output<Boolean> isRegional) {
            $.isRegional = isRegional;
            return this;
        }

        /**
         * @param isRegional Defines whether the private network is Regional. By default, it will be Zonal.
         * 
         * @return builder
         * 
         */
        public Builder isRegional(Boolean isRegional) {
            return isRegional(Output.of(isRegional));
        }

        /**
         * @param name The name of the private network. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the private network. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId `project_id`) The ID of the project the private network is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the private network is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region `region`) The region of the private network.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`) The region of the private network.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tags The tags associated with the private network.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags associated with the private network.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags associated with the private network.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param vpcId The VPC in which to create the private network.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The VPC in which to create the private network.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param zone `zone`) The zone in which the private network should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the private network should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public VpcPrivateNetworkArgs build() {
            return $;
        }
    }

}
