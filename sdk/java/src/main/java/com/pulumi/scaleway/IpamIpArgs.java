// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scaleway.inputs.IpamIpSourceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpamIpArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpamIpArgs Empty = new IpamIpArgs();

    /**
     * Request a specific IP in the requested source pool.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return Request a specific IP in the requested source pool.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * Defines whether to request an IPv6 instead of an IPv4.
     * 
     */
    @Import(name="isIpv6")
    private @Nullable Output<Boolean> isIpv6;

    /**
     * @return Defines whether to request an IPv6 instead of an IPv4.
     * 
     */
    public Optional<Output<Boolean>> isIpv6() {
        return Optional.ofNullable(this.isIpv6);
    }

    /**
     * `project_id`) The ID of the project the IP is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the IP is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `region`) The region of the IP.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`) The region of the IP.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The source in which to book the IP.
     * 
     */
    @Import(name="sources", required=true)
    private Output<List<IpamIpSourceArgs>> sources;

    /**
     * @return The source in which to book the IP.
     * 
     */
    public Output<List<IpamIpSourceArgs>> sources() {
        return this.sources;
    }

    /**
     * The tags associated with the IP.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags associated with the IP.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private IpamIpArgs() {}

    private IpamIpArgs(IpamIpArgs $) {
        this.address = $.address;
        this.isIpv6 = $.isIpv6;
        this.projectId = $.projectId;
        this.region = $.region;
        this.sources = $.sources;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpamIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpamIpArgs $;

        public Builder() {
            $ = new IpamIpArgs();
        }

        public Builder(IpamIpArgs defaults) {
            $ = new IpamIpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Request a specific IP in the requested source pool.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Request a specific IP in the requested source pool.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param isIpv6 Defines whether to request an IPv6 instead of an IPv4.
         * 
         * @return builder
         * 
         */
        public Builder isIpv6(@Nullable Output<Boolean> isIpv6) {
            $.isIpv6 = isIpv6;
            return this;
        }

        /**
         * @param isIpv6 Defines whether to request an IPv6 instead of an IPv4.
         * 
         * @return builder
         * 
         */
        public Builder isIpv6(Boolean isIpv6) {
            return isIpv6(Output.of(isIpv6));
        }

        /**
         * @param projectId `project_id`) The ID of the project the IP is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the IP is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region `region`) The region of the IP.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`) The region of the IP.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sources The source in which to book the IP.
         * 
         * @return builder
         * 
         */
        public Builder sources(Output<List<IpamIpSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources The source in which to book the IP.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<IpamIpSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources The source in which to book the IP.
         * 
         * @return builder
         * 
         */
        public Builder sources(IpamIpSourceArgs... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param tags The tags associated with the IP.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags associated with the IP.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags associated with the IP.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public IpamIpArgs build() {
            $.sources = Objects.requireNonNull($.sources, "expected parameter 'sources' to be non-null");
            return $;
        }
    }

}
