// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.scaleway.outputs.LoadbalancerFrontendAclActionRedirect;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class LoadbalancerFrontendAclAction {
    /**
     * @return Redirect parameters when using an ACL with `redirect` action.
     * 
     */
    private @Nullable List<LoadbalancerFrontendAclActionRedirect> redirects;
    /**
     * @return The redirect type. Possible values are: `location` or `scheme`.
     * 
     */
    private String type;

    private LoadbalancerFrontendAclAction() {}
    /**
     * @return Redirect parameters when using an ACL with `redirect` action.
     * 
     */
    public List<LoadbalancerFrontendAclActionRedirect> redirects() {
        return this.redirects == null ? List.of() : this.redirects;
    }
    /**
     * @return The redirect type. Possible values are: `location` or `scheme`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadbalancerFrontendAclAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<LoadbalancerFrontendAclActionRedirect> redirects;
        private String type;
        public Builder() {}
        public Builder(LoadbalancerFrontendAclAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.redirects = defaults.redirects;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder redirects(@Nullable List<LoadbalancerFrontendAclActionRedirect> redirects) {
            this.redirects = redirects;
            return this;
        }
        public Builder redirects(LoadbalancerFrontendAclActionRedirect... redirects) {
            return redirects(List.of(redirects));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public LoadbalancerFrontendAclAction build() {
            final var o = new LoadbalancerFrontendAclAction();
            o.redirects = redirects;
            o.type = type;
            return o;
        }
    }
}
