// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlexibleIpMacAddressState extends com.pulumi.resources.ResourceArgs {

    public static final FlexibleIpMacAddressState Empty = new FlexibleIpMacAddressState();

    /**
     * The Virtual MAC address.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The Virtual MAC address.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The date at which the Virtual Mac Address was created (RFC 3339 format).
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date at which the Virtual Mac Address was created (RFC 3339 format).
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The ID of the flexible IP for which to generate a virtual MAC.
     * 
     */
    @Import(name="flexibleIpId")
    private @Nullable Output<String> flexibleIpId;

    /**
     * @return The ID of the flexible IP for which to generate a virtual MAC.
     * 
     */
    public Optional<Output<String>> flexibleIpId() {
        return Optional.ofNullable(this.flexibleIpId);
    }

    /**
     * The IDs of the flexible IPs on which to duplicate the virtual MAC.
     * &gt; **Important:** The flexible IPs need to be attached to the same server for the operation to work.
     * 
     */
    @Import(name="flexibleIpIdsToDuplicates")
    private @Nullable Output<List<String>> flexibleIpIdsToDuplicates;

    /**
     * @return The IDs of the flexible IPs on which to duplicate the virtual MAC.
     * &gt; **Important:** The flexible IPs need to be attached to the same server for the operation to work.
     * 
     */
    public Optional<Output<List<String>>> flexibleIpIdsToDuplicates() {
        return Optional.ofNullable(this.flexibleIpIdsToDuplicates);
    }

    /**
     * The Virtual MAC status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The Virtual MAC status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The type of the virtual MAC.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the virtual MAC.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The date at which the Virtual Mac Address was last updated (RFC 3339 format).
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The date at which the Virtual Mac Address was last updated (RFC 3339 format).
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * The zone of the Virtual Mac Address.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone of the Virtual Mac Address.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private FlexibleIpMacAddressState() {}

    private FlexibleIpMacAddressState(FlexibleIpMacAddressState $) {
        this.address = $.address;
        this.createdAt = $.createdAt;
        this.flexibleIpId = $.flexibleIpId;
        this.flexibleIpIdsToDuplicates = $.flexibleIpIdsToDuplicates;
        this.status = $.status;
        this.type = $.type;
        this.updatedAt = $.updatedAt;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlexibleIpMacAddressState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlexibleIpMacAddressState $;

        public Builder() {
            $ = new FlexibleIpMacAddressState();
        }

        public Builder(FlexibleIpMacAddressState defaults) {
            $ = new FlexibleIpMacAddressState(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The Virtual MAC address.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The Virtual MAC address.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param createdAt The date at which the Virtual Mac Address was created (RFC 3339 format).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date at which the Virtual Mac Address was created (RFC 3339 format).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param flexibleIpId The ID of the flexible IP for which to generate a virtual MAC.
         * 
         * @return builder
         * 
         */
        public Builder flexibleIpId(@Nullable Output<String> flexibleIpId) {
            $.flexibleIpId = flexibleIpId;
            return this;
        }

        /**
         * @param flexibleIpId The ID of the flexible IP for which to generate a virtual MAC.
         * 
         * @return builder
         * 
         */
        public Builder flexibleIpId(String flexibleIpId) {
            return flexibleIpId(Output.of(flexibleIpId));
        }

        /**
         * @param flexibleIpIdsToDuplicates The IDs of the flexible IPs on which to duplicate the virtual MAC.
         * &gt; **Important:** The flexible IPs need to be attached to the same server for the operation to work.
         * 
         * @return builder
         * 
         */
        public Builder flexibleIpIdsToDuplicates(@Nullable Output<List<String>> flexibleIpIdsToDuplicates) {
            $.flexibleIpIdsToDuplicates = flexibleIpIdsToDuplicates;
            return this;
        }

        /**
         * @param flexibleIpIdsToDuplicates The IDs of the flexible IPs on which to duplicate the virtual MAC.
         * &gt; **Important:** The flexible IPs need to be attached to the same server for the operation to work.
         * 
         * @return builder
         * 
         */
        public Builder flexibleIpIdsToDuplicates(List<String> flexibleIpIdsToDuplicates) {
            return flexibleIpIdsToDuplicates(Output.of(flexibleIpIdsToDuplicates));
        }

        /**
         * @param flexibleIpIdsToDuplicates The IDs of the flexible IPs on which to duplicate the virtual MAC.
         * &gt; **Important:** The flexible IPs need to be attached to the same server for the operation to work.
         * 
         * @return builder
         * 
         */
        public Builder flexibleIpIdsToDuplicates(String... flexibleIpIdsToDuplicates) {
            return flexibleIpIdsToDuplicates(List.of(flexibleIpIdsToDuplicates));
        }

        /**
         * @param status The Virtual MAC status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The Virtual MAC status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type The type of the virtual MAC.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the virtual MAC.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updatedAt The date at which the Virtual Mac Address was last updated (RFC 3339 format).
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The date at which the Virtual Mac Address was last updated (RFC 3339 format).
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param zone The zone of the Virtual Mac Address.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone of the Virtual Mac Address.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public FlexibleIpMacAddressState build() {
            return $;
        }
    }

}
