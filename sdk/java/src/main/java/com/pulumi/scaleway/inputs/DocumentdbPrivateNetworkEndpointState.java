// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentdbPrivateNetworkEndpointState extends com.pulumi.resources.ResourceArgs {

    public static final DocumentdbPrivateNetworkEndpointState Empty = new DocumentdbPrivateNetworkEndpointState();

    /**
     * Hostname of the endpoint.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Hostname of the endpoint.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * UUID of the documentdb instance.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return UUID of the documentdb instance.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * IPv4 address on the network.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return IPv4 address on the network.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * The IP network address within the private subnet. This must be an IPv4 address with a
     * CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
     * service if not set.
     * 
     */
    @Import(name="ipNet")
    private @Nullable Output<String> ipNet;

    /**
     * @return The IP network address within the private subnet. This must be an IPv4 address with a
     * CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
     * service if not set.
     * 
     */
    public Optional<Output<String>> ipNet() {
        return Optional.ofNullable(this.ipNet);
    }

    /**
     * Name of the endpoint.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the endpoint.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Port in the Private Network.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port in the Private Network.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The ID of the private network.
     * 
     */
    @Import(name="privateNetworkId")
    private @Nullable Output<String> privateNetworkId;

    /**
     * @return The ID of the private network.
     * 
     */
    public Optional<Output<String>> privateNetworkId() {
        return Optional.ofNullable(this.privateNetworkId);
    }

    /**
     * The region you want to attach the resource to
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region you want to attach the resource to
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The zone you want to attach the resource to
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone you want to attach the resource to
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private DocumentdbPrivateNetworkEndpointState() {}

    private DocumentdbPrivateNetworkEndpointState(DocumentdbPrivateNetworkEndpointState $) {
        this.hostname = $.hostname;
        this.instanceId = $.instanceId;
        this.ip = $.ip;
        this.ipNet = $.ipNet;
        this.name = $.name;
        this.port = $.port;
        this.privateNetworkId = $.privateNetworkId;
        this.region = $.region;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentdbPrivateNetworkEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentdbPrivateNetworkEndpointState $;

        public Builder() {
            $ = new DocumentdbPrivateNetworkEndpointState();
        }

        public Builder(DocumentdbPrivateNetworkEndpointState defaults) {
            $ = new DocumentdbPrivateNetworkEndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname Hostname of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Hostname of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param instanceId UUID of the documentdb instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId UUID of the documentdb instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param ip IPv4 address on the network.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip IPv4 address on the network.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ipNet The IP network address within the private subnet. This must be an IPv4 address with a
         * CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
         * service if not set.
         * 
         * @return builder
         * 
         */
        public Builder ipNet(@Nullable Output<String> ipNet) {
            $.ipNet = ipNet;
            return this;
        }

        /**
         * @param ipNet The IP network address within the private subnet. This must be an IPv4 address with a
         * CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
         * service if not set.
         * 
         * @return builder
         * 
         */
        public Builder ipNet(String ipNet) {
            return ipNet(Output.of(ipNet));
        }

        /**
         * @param name Name of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port Port in the Private Network.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port in the Private Network.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateNetworkId The ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkId(@Nullable Output<String> privateNetworkId) {
            $.privateNetworkId = privateNetworkId;
            return this;
        }

        /**
         * @param privateNetworkId The ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkId(String privateNetworkId) {
            return privateNetworkId(Output.of(privateNetworkId));
        }

        /**
         * @param region The region you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param zone The zone you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public DocumentdbPrivateNetworkEndpointState build() {
            return $;
        }
    }

}
