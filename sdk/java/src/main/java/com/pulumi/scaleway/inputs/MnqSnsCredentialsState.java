// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scaleway.inputs.MnqSnsCredentialsPermissionsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MnqSnsCredentialsState extends com.pulumi.resources.ResourceArgs {

    public static final MnqSnsCredentialsState Empty = new MnqSnsCredentialsState();

    /**
     * The ID of the key.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return The ID of the key.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The unique name of the sns credentials.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique name of the sns credentials.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * . List of permissions associated to these credentials. Only one of permissions may be set.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<MnqSnsCredentialsPermissionsArgs> permissions;

    /**
     * @return . List of permissions associated to these credentials. Only one of permissions may be set.
     * 
     */
    public Optional<Output<MnqSnsCredentialsPermissionsArgs>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * `project_id`) The ID of the project the sns is enabled for.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the sns is enabled for.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `region`). The region in which sns is enabled.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`). The region in which sns is enabled.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The secret value of the key.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return The secret value of the key.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    private MnqSnsCredentialsState() {}

    private MnqSnsCredentialsState(MnqSnsCredentialsState $) {
        this.accessKey = $.accessKey;
        this.name = $.name;
        this.permissions = $.permissions;
        this.projectId = $.projectId;
        this.region = $.region;
        this.secretKey = $.secretKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MnqSnsCredentialsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MnqSnsCredentialsState $;

        public Builder() {
            $ = new MnqSnsCredentialsState();
        }

        public Builder(MnqSnsCredentialsState defaults) {
            $ = new MnqSnsCredentialsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The ID of the key.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The ID of the key.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param name The unique name of the sns credentials.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the sns credentials.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions . List of permissions associated to these credentials. Only one of permissions may be set.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<MnqSnsCredentialsPermissionsArgs> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions . List of permissions associated to these credentials. Only one of permissions may be set.
         * 
         * @return builder
         * 
         */
        public Builder permissions(MnqSnsCredentialsPermissionsArgs permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param projectId `project_id`) The ID of the project the sns is enabled for.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the sns is enabled for.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region `region`). The region in which sns is enabled.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`). The region in which sns is enabled.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretKey The secret value of the key.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The secret value of the key.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        public MnqSnsCredentialsState build() {
            return $;
        }
    }

}
