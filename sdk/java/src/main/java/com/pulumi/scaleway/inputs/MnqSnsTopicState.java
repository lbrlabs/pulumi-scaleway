// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MnqSnsTopicState extends com.pulumi.resources.ResourceArgs {

    public static final MnqSnsTopicState Empty = new MnqSnsTopicState();

    /**
     * The access key of the SNS credentials.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return The access key of the SNS credentials.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The ARN of the topic
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the topic
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Specifies whether to enable content-based deduplication.
     * 
     */
    @Import(name="contentBasedDeduplication")
    private @Nullable Output<Boolean> contentBasedDeduplication;

    /**
     * @return Specifies whether to enable content-based deduplication.
     * 
     */
    public Optional<Output<Boolean>> contentBasedDeduplication() {
        return Optional.ofNullable(this.contentBasedDeduplication);
    }

    /**
     * Whether the topic is a FIFO. If true, the topic name must end with .fifo.
     * 
     */
    @Import(name="fifoTopic")
    private @Nullable Output<Boolean> fifoTopic;

    /**
     * @return Whether the topic is a FIFO. If true, the topic name must end with .fifo.
     * 
     */
    public Optional<Output<Boolean>> fifoTopic() {
        return Optional.ofNullable(this.fifoTopic);
    }

    /**
     * The unique name of the sns topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique name of the sns topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    /**
     * @return Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    /**
     * Owner of the SNS topic, should have format &#39;project-${project_id}&#39;
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Owner of the SNS topic, should have format &#39;project-${project_id}&#39;
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * `project_id`) The ID of the project the sns is enabled for.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the sns is enabled for.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `region`). The region
     * in which sns is enabled.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`). The region
     * in which sns is enabled.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The secret key of the SNS credentials.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return The secret key of the SNS credentials.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
     * 
     */
    @Import(name="snsEndpoint")
    private @Nullable Output<String> snsEndpoint;

    /**
     * @return The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
     * 
     */
    public Optional<Output<String>> snsEndpoint() {
        return Optional.ofNullable(this.snsEndpoint);
    }

    private MnqSnsTopicState() {}

    private MnqSnsTopicState(MnqSnsTopicState $) {
        this.accessKey = $.accessKey;
        this.arn = $.arn;
        this.contentBasedDeduplication = $.contentBasedDeduplication;
        this.fifoTopic = $.fifoTopic;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.owner = $.owner;
        this.projectId = $.projectId;
        this.region = $.region;
        this.secretKey = $.secretKey;
        this.snsEndpoint = $.snsEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MnqSnsTopicState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MnqSnsTopicState $;

        public Builder() {
            $ = new MnqSnsTopicState();
        }

        public Builder(MnqSnsTopicState defaults) {
            $ = new MnqSnsTopicState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The access key of the SNS credentials.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The access key of the SNS credentials.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param arn The ARN of the topic
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the topic
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param contentBasedDeduplication Specifies whether to enable content-based deduplication.
         * 
         * @return builder
         * 
         */
        public Builder contentBasedDeduplication(@Nullable Output<Boolean> contentBasedDeduplication) {
            $.contentBasedDeduplication = contentBasedDeduplication;
            return this;
        }

        /**
         * @param contentBasedDeduplication Specifies whether to enable content-based deduplication.
         * 
         * @return builder
         * 
         */
        public Builder contentBasedDeduplication(Boolean contentBasedDeduplication) {
            return contentBasedDeduplication(Output.of(contentBasedDeduplication));
        }

        /**
         * @param fifoTopic Whether the topic is a FIFO. If true, the topic name must end with .fifo.
         * 
         * @return builder
         * 
         */
        public Builder fifoTopic(@Nullable Output<Boolean> fifoTopic) {
            $.fifoTopic = fifoTopic;
            return this;
        }

        /**
         * @param fifoTopic Whether the topic is a FIFO. If true, the topic name must end with .fifo.
         * 
         * @return builder
         * 
         */
        public Builder fifoTopic(Boolean fifoTopic) {
            return fifoTopic(Output.of(fifoTopic));
        }

        /**
         * @param name The unique name of the sns topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the sns topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namePrefix Creates a unique name beginning with the specified prefix. Conflicts with `name`.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        /**
         * @param namePrefix Creates a unique name beginning with the specified prefix. Conflicts with `name`.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        /**
         * @param owner Owner of the SNS topic, should have format &#39;project-${project_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Owner of the SNS topic, should have format &#39;project-${project_id}&#39;
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param projectId `project_id`) The ID of the project the sns is enabled for.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the sns is enabled for.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region `region`). The region
         * in which sns is enabled.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`). The region
         * in which sns is enabled.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretKey The secret key of the SNS credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The secret key of the SNS credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param snsEndpoint The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
         * 
         * @return builder
         * 
         */
        public Builder snsEndpoint(@Nullable Output<String> snsEndpoint) {
            $.snsEndpoint = snsEndpoint;
            return this;
        }

        /**
         * @param snsEndpoint The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
         * 
         * @return builder
         * 
         */
        public Builder snsEndpoint(String snsEndpoint) {
            return snsEndpoint(Output.of(snsEndpoint));
        }

        public MnqSnsTopicState build() {
            return $;
        }
    }

}
