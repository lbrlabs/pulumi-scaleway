// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.scaleway.MnqSnsTopicSubscriptionArgs;
import com.pulumi.scaleway.Utilities;
import com.pulumi.scaleway.inputs.MnqSnsTopicSubscriptionState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manage Scaleway Messaging and queuing SNS Topic Subscriptions.
 * For further information please check
 * our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sns-overview/)
 * 
 * ## Examples
 * 
 * ### Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.scaleway.MnqSns;
 * import com.pulumi.scaleway.MnqSnsCredentials;
 * import com.pulumi.scaleway.MnqSnsCredentialsArgs;
 * import com.pulumi.scaleway.inputs.MnqSnsCredentialsPermissionsArgs;
 * import com.pulumi.scaleway.MnqSnsTopic;
 * import com.pulumi.scaleway.MnqSnsTopicArgs;
 * import com.pulumi.scaleway.MnqSnsTopicSubscription;
 * import com.pulumi.scaleway.MnqSnsTopicSubscriptionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mainMnqSns = new MnqSns(&#34;mainMnqSns&#34;);
 * 
 *         var mainMnqSnsCredentials = new MnqSnsCredentials(&#34;mainMnqSnsCredentials&#34;, MnqSnsCredentialsArgs.builder()        
 *             .projectId(mainMnqSns.projectId())
 *             .permissions(MnqSnsCredentialsPermissionsArgs.builder()
 *                 .canManage(true)
 *                 .canPublish(true)
 *                 .canReceive(true)
 *                 .build())
 *             .build());
 * 
 *         var topic = new MnqSnsTopic(&#34;topic&#34;, MnqSnsTopicArgs.builder()        
 *             .projectId(mainMnqSns.projectId())
 *             .accessKey(mainMnqSnsCredentials.accessKey())
 *             .secretKey(mainMnqSnsCredentials.secretKey())
 *             .build());
 * 
 *         var mainMnqSnsTopicSubscription = new MnqSnsTopicSubscription(&#34;mainMnqSnsTopicSubscription&#34;, MnqSnsTopicSubscriptionArgs.builder()        
 *             .projectId(mainMnqSns.projectId())
 *             .accessKey(mainMnqSnsCredentials.accessKey())
 *             .secretKey(mainMnqSnsCredentials.secretKey())
 *             .topicId(topic.id())
 *             .protocol(&#34;http&#34;)
 *             .endpoint(&#34;http://example.com&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * SNS topic subscriptions can be imported using the `{region}/{project-id}/{topic-name}/{subscription-id}`, e.g. bash
 * 
 * ```sh
 *  $ pulumi import scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription main fr-par/11111111111111111111111111111111/my-topic/11111111111111111111111111111111
 * ```
 * 
 */
@ResourceType(type="scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription")
public class MnqSnsTopicSubscription extends com.pulumi.resources.CustomResource {
    /**
     * The access key of the SNS credentials.
     * 
     */
    @Export(name="accessKey", refs={String.class}, tree="[0]")
    private Output<String> accessKey;

    /**
     * @return The access key of the SNS credentials.
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }
    /**
     * The ARN of the topic subscription
     * 
     */
    @Export(name="arn", refs={String.class}, tree="[0]")
    private Output<String> arn;

    /**
     * @return The ARN of the topic subscription
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    /**
     * Endpoint of the subscription
     * 
     */
    @Export(name="endpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> endpoint;

    /**
     * @return Endpoint of the subscription
     * 
     */
    public Output<Optional<String>> endpoint() {
        return Codegen.optional(this.endpoint);
    }
    /**
     * `project_id`) The ID of the project the sns is enabled for.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the sns is enabled for.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Protocol of the SNS Topic Subscription.
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output<String> protocol;

    /**
     * @return Protocol of the SNS Topic Subscription.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * Activate JSON Redrive Policy.
     * 
     */
    @Export(name="redrivePolicy", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> redrivePolicy;

    /**
     * @return Activate JSON Redrive Policy.
     * 
     */
    public Output<Boolean> redrivePolicy() {
        return this.redrivePolicy;
    }
    /**
     * `region`). The region
     * in which sns is enabled.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return `region`). The region
     * in which sns is enabled.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The secret key of the SNS credentials.
     * 
     */
    @Export(name="secretKey", refs={String.class}, tree="[0]")
    private Output<String> secretKey;

    /**
     * @return The secret key of the SNS credentials.
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }
    /**
     * The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
     * 
     */
    @Export(name="snsEndpoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> snsEndpoint;

    /**
     * @return The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
     * 
     */
    public Output<Optional<String>> snsEndpoint() {
        return Codegen.optional(this.snsEndpoint);
    }
    /**
     * The ARN of the topic. Either `topic_id` or `topic_arn` is required.
     * 
     */
    @Export(name="topicArn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> topicArn;

    /**
     * @return The ARN of the topic. Either `topic_id` or `topic_arn` is required.
     * 
     */
    public Output<Optional<String>> topicArn() {
        return Codegen.optional(this.topicArn);
    }
    /**
     * The ID of the topic. Either `topic_id` or `topic_arn` is required. Conflicts with `topic_arn`.
     * 
     */
    @Export(name="topicId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> topicId;

    /**
     * @return The ID of the topic. Either `topic_id` or `topic_arn` is required. Conflicts with `topic_arn`.
     * 
     */
    public Output<Optional<String>> topicId() {
        return Codegen.optional(this.topicId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MnqSnsTopicSubscription(String name) {
        this(name, MnqSnsTopicSubscriptionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MnqSnsTopicSubscription(String name, MnqSnsTopicSubscriptionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MnqSnsTopicSubscription(String name, MnqSnsTopicSubscriptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription", name, args == null ? MnqSnsTopicSubscriptionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MnqSnsTopicSubscription(String name, Output<String> id, @Nullable MnqSnsTopicSubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "accessKey",
                "secretKey"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MnqSnsTopicSubscription get(String name, Output<String> id, @Nullable MnqSnsTopicSubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MnqSnsTopicSubscription(name, id, state, options);
    }
}
