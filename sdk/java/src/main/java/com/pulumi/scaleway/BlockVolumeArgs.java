// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlockVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlockVolumeArgs Empty = new BlockVolumeArgs();

    /**
     * The maximum IO/s expected, must match available options.
     * 
     */
    @Import(name="iops", required=true)
    private Output<Integer> iops;

    /**
     * @return The maximum IO/s expected, must match available options.
     * 
     */
    public Output<Integer> iops() {
        return this.iops;
    }

    /**
     * The name of the volume. If not provided it will be randomly generated.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the volume. If not provided it will be randomly generated.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `project_id`) The ID of the project the volume is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the volume is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The size of the volume. Only one of `size_in_gb`, and `snapshot_id` should be specified.
     * 
     */
    @Import(name="sizeInGb")
    private @Nullable Output<Integer> sizeInGb;

    /**
     * @return The size of the volume. Only one of `size_in_gb`, and `snapshot_id` should be specified.
     * 
     */
    public Optional<Output<Integer>> sizeInGb() {
        return Optional.ofNullable(this.sizeInGb);
    }

    /**
     * If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `snapshot_id` should be specified.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `snapshot_id` should be specified.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * A list of tags to apply to the volume.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags to apply to the volume.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * `zone`) The zone in which the volume should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the volume should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private BlockVolumeArgs() {}

    private BlockVolumeArgs(BlockVolumeArgs $) {
        this.iops = $.iops;
        this.name = $.name;
        this.projectId = $.projectId;
        this.sizeInGb = $.sizeInGb;
        this.snapshotId = $.snapshotId;
        this.tags = $.tags;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlockVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlockVolumeArgs $;

        public Builder() {
            $ = new BlockVolumeArgs();
        }

        public Builder(BlockVolumeArgs defaults) {
            $ = new BlockVolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param iops The maximum IO/s expected, must match available options.
         * 
         * @return builder
         * 
         */
        public Builder iops(Output<Integer> iops) {
            $.iops = iops;
            return this;
        }

        /**
         * @param iops The maximum IO/s expected, must match available options.
         * 
         * @return builder
         * 
         */
        public Builder iops(Integer iops) {
            return iops(Output.of(iops));
        }

        /**
         * @param name The name of the volume. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the volume. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId `project_id`) The ID of the project the volume is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the volume is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param sizeInGb The size of the volume. Only one of `size_in_gb`, and `snapshot_id` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder sizeInGb(@Nullable Output<Integer> sizeInGb) {
            $.sizeInGb = sizeInGb;
            return this;
        }

        /**
         * @param sizeInGb The size of the volume. Only one of `size_in_gb`, and `snapshot_id` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder sizeInGb(Integer sizeInGb) {
            return sizeInGb(Output.of(sizeInGb));
        }

        /**
         * @param snapshotId If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `snapshot_id` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `snapshot_id` should be specified.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param tags A list of tags to apply to the volume.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags to apply to the volume.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags to apply to the volume.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param zone `zone`) The zone in which the volume should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the volume should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public BlockVolumeArgs build() {
            $.iops = Objects.requireNonNull($.iops, "expected parameter 'iops' to be non-null");
            return $;
        }
    }

}
