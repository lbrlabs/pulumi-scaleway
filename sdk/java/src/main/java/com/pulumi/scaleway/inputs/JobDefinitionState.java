// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobDefinitionState extends com.pulumi.resources.ResourceArgs {

    public static final JobDefinitionState Empty = new JobDefinitionState();

    /**
     * The command that will be run in the container if specified.
     * 
     */
    @Import(name="command")
    private @Nullable Output<String> command;

    /**
     * @return The command that will be run in the container if specified.
     * 
     */
    public Optional<Output<String>> command() {
        return Optional.ofNullable(this.command);
    }

    /**
     * The amount of vCPU computing resources to allocate to each container running the job.
     * 
     */
    @Import(name="cpuLimit")
    private @Nullable Output<Integer> cpuLimit;

    /**
     * @return The amount of vCPU computing resources to allocate to each container running the job.
     * 
     */
    public Optional<Output<Integer>> cpuLimit() {
        return Optional.ofNullable(this.cpuLimit);
    }

    /**
     * The description of the job
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the job
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The environment variables of the container.
     * 
     */
    @Import(name="env")
    private @Nullable Output<Map<String,String>> env;

    /**
     * @return The environment variables of the container.
     * 
     */
    public Optional<Output<Map<String,String>>> env() {
        return Optional.ofNullable(this.env);
    }

    /**
     * The uri of the container image that will be used for the job run.
     * 
     */
    @Import(name="imageUri")
    private @Nullable Output<String> imageUri;

    /**
     * @return The uri of the container image that will be used for the job run.
     * 
     */
    public Optional<Output<String>> imageUri() {
        return Optional.ofNullable(this.imageUri);
    }

    /**
     * The memory computing resources in MB to allocate to each container running the job.
     * 
     */
    @Import(name="memoryLimit")
    private @Nullable Output<Integer> memoryLimit;

    /**
     * @return The memory computing resources in MB to allocate to each container running the job.
     * 
     */
    public Optional<Output<Integer>> memoryLimit() {
        return Optional.ofNullable(this.memoryLimit);
    }

    /**
     * The name of the job.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the job.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `project_id`) The ID of the project the Job is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the Job is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `region`) The region of the Job.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`) The region of the Job.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The job run timeout, in Go Time format (ex: `2h30m25s`)
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    /**
     * @return The job run timeout, in Go Time format (ex: `2h30m25s`)
     * 
     */
    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private JobDefinitionState() {}

    private JobDefinitionState(JobDefinitionState $) {
        this.command = $.command;
        this.cpuLimit = $.cpuLimit;
        this.description = $.description;
        this.env = $.env;
        this.imageUri = $.imageUri;
        this.memoryLimit = $.memoryLimit;
        this.name = $.name;
        this.projectId = $.projectId;
        this.region = $.region;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobDefinitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobDefinitionState $;

        public Builder() {
            $ = new JobDefinitionState();
        }

        public Builder(JobDefinitionState defaults) {
            $ = new JobDefinitionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param command The command that will be run in the container if specified.
         * 
         * @return builder
         * 
         */
        public Builder command(@Nullable Output<String> command) {
            $.command = command;
            return this;
        }

        /**
         * @param command The command that will be run in the container if specified.
         * 
         * @return builder
         * 
         */
        public Builder command(String command) {
            return command(Output.of(command));
        }

        /**
         * @param cpuLimit The amount of vCPU computing resources to allocate to each container running the job.
         * 
         * @return builder
         * 
         */
        public Builder cpuLimit(@Nullable Output<Integer> cpuLimit) {
            $.cpuLimit = cpuLimit;
            return this;
        }

        /**
         * @param cpuLimit The amount of vCPU computing resources to allocate to each container running the job.
         * 
         * @return builder
         * 
         */
        public Builder cpuLimit(Integer cpuLimit) {
            return cpuLimit(Output.of(cpuLimit));
        }

        /**
         * @param description The description of the job
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the job
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param env The environment variables of the container.
         * 
         * @return builder
         * 
         */
        public Builder env(@Nullable Output<Map<String,String>> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env The environment variables of the container.
         * 
         * @return builder
         * 
         */
        public Builder env(Map<String,String> env) {
            return env(Output.of(env));
        }

        /**
         * @param imageUri The uri of the container image that will be used for the job run.
         * 
         * @return builder
         * 
         */
        public Builder imageUri(@Nullable Output<String> imageUri) {
            $.imageUri = imageUri;
            return this;
        }

        /**
         * @param imageUri The uri of the container image that will be used for the job run.
         * 
         * @return builder
         * 
         */
        public Builder imageUri(String imageUri) {
            return imageUri(Output.of(imageUri));
        }

        /**
         * @param memoryLimit The memory computing resources in MB to allocate to each container running the job.
         * 
         * @return builder
         * 
         */
        public Builder memoryLimit(@Nullable Output<Integer> memoryLimit) {
            $.memoryLimit = memoryLimit;
            return this;
        }

        /**
         * @param memoryLimit The memory computing resources in MB to allocate to each container running the job.
         * 
         * @return builder
         * 
         */
        public Builder memoryLimit(Integer memoryLimit) {
            return memoryLimit(Output.of(memoryLimit));
        }

        /**
         * @param name The name of the job.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the job.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId `project_id`) The ID of the project the Job is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the Job is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region `region`) The region of the Job.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`) The region of the Job.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param timeout The job run timeout, in Go Time format (ex: `2h30m25s`)
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The job run timeout, in Go Time format (ex: `2h30m25s`)
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        public JobDefinitionState build() {
            return $;
        }
    }

}
