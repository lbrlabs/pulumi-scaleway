// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scaleway.inputs.WebhostingCpanelUrlArgs;
import com.pulumi.scaleway.inputs.WebhostingOptionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebhostingState extends com.pulumi.resources.ResourceArgs {

    public static final WebhostingState Empty = new WebhostingState();

    /**
     * The URL to connect to cPanel Dashboard and to Webmail interface.
     * 
     */
    @Import(name="cpanelUrls")
    private @Nullable Output<List<WebhostingCpanelUrlArgs>> cpanelUrls;

    /**
     * @return The URL to connect to cPanel Dashboard and to Webmail interface.
     * 
     */
    public Optional<Output<List<WebhostingCpanelUrlArgs>>> cpanelUrls() {
        return Optional.ofNullable(this.cpanelUrls);
    }

    /**
     * Date and time of hosting&#39;s creation (RFC 3339 format).
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Date and time of hosting&#39;s creation (RFC 3339 format).
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The DNS status of the hosting.
     * 
     */
    @Import(name="dnsStatus")
    private @Nullable Output<String> dnsStatus;

    /**
     * @return The DNS status of the hosting.
     * 
     */
    public Optional<Output<String>> dnsStatus() {
        return Optional.ofNullable(this.dnsStatus);
    }

    /**
     * The domain name of the hosting.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The domain name of the hosting.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The contact email of the client for the hosting.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The contact email of the client for the hosting.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * The ID of the selected offer for the hosting.
     * 
     */
    @Import(name="offerId")
    private @Nullable Output<String> offerId;

    /**
     * @return The ID of the selected offer for the hosting.
     * 
     */
    public Optional<Output<String>> offerId() {
        return Optional.ofNullable(this.offerId);
    }

    /**
     * The name of the active offer.
     * 
     */
    @Import(name="offerName")
    private @Nullable Output<String> offerName;

    /**
     * @return The name of the active offer.
     * 
     */
    public Optional<Output<String>> offerName() {
        return Optional.ofNullable(this.offerName);
    }

    /**
     * The IDs of the selected options for the hosting.
     * 
     */
    @Import(name="optionIds")
    private @Nullable Output<List<String>> optionIds;

    /**
     * @return The IDs of the selected options for the hosting.
     * 
     */
    public Optional<Output<List<String>>> optionIds() {
        return Optional.ofNullable(this.optionIds);
    }

    /**
     * The active options of the hosting.
     * 
     */
    @Import(name="options")
    private @Nullable Output<List<WebhostingOptionArgs>> options;

    /**
     * @return The active options of the hosting.
     * 
     */
    public Optional<Output<List<WebhostingOptionArgs>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The organization ID the hosting is associated with.
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return The organization ID the hosting is associated with.
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * The hostname of the host platform.
     * 
     */
    @Import(name="platformHostname")
    private @Nullable Output<String> platformHostname;

    /**
     * @return The hostname of the host platform.
     * 
     */
    public Optional<Output<String>> platformHostname() {
        return Optional.ofNullable(this.platformHostname);
    }

    /**
     * The number of the host platform.
     * 
     */
    @Import(name="platformNumber")
    private @Nullable Output<Integer> platformNumber;

    /**
     * @return The number of the host platform.
     * 
     */
    public Optional<Output<Integer>> platformNumber() {
        return Optional.ofNullable(this.platformNumber);
    }

    /**
     * `project_id`) The ID of the project the VPC is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the VPC is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `region`) The region of the Hosting.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`) The region of the Hosting.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The hosting status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The hosting status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tags associated with the hosting.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags associated with the hosting.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Date and time of hosting&#39;s last update (RFC 3339 format).
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Date and time of hosting&#39;s last update (RFC 3339 format).
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * The main hosting cPanel username.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The main hosting cPanel username.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private WebhostingState() {}

    private WebhostingState(WebhostingState $) {
        this.cpanelUrls = $.cpanelUrls;
        this.createdAt = $.createdAt;
        this.dnsStatus = $.dnsStatus;
        this.domain = $.domain;
        this.email = $.email;
        this.offerId = $.offerId;
        this.offerName = $.offerName;
        this.optionIds = $.optionIds;
        this.options = $.options;
        this.organizationId = $.organizationId;
        this.platformHostname = $.platformHostname;
        this.platformNumber = $.platformNumber;
        this.projectId = $.projectId;
        this.region = $.region;
        this.status = $.status;
        this.tags = $.tags;
        this.updatedAt = $.updatedAt;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebhostingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebhostingState $;

        public Builder() {
            $ = new WebhostingState();
        }

        public Builder(WebhostingState defaults) {
            $ = new WebhostingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpanelUrls The URL to connect to cPanel Dashboard and to Webmail interface.
         * 
         * @return builder
         * 
         */
        public Builder cpanelUrls(@Nullable Output<List<WebhostingCpanelUrlArgs>> cpanelUrls) {
            $.cpanelUrls = cpanelUrls;
            return this;
        }

        /**
         * @param cpanelUrls The URL to connect to cPanel Dashboard and to Webmail interface.
         * 
         * @return builder
         * 
         */
        public Builder cpanelUrls(List<WebhostingCpanelUrlArgs> cpanelUrls) {
            return cpanelUrls(Output.of(cpanelUrls));
        }

        /**
         * @param cpanelUrls The URL to connect to cPanel Dashboard and to Webmail interface.
         * 
         * @return builder
         * 
         */
        public Builder cpanelUrls(WebhostingCpanelUrlArgs... cpanelUrls) {
            return cpanelUrls(List.of(cpanelUrls));
        }

        /**
         * @param createdAt Date and time of hosting&#39;s creation (RFC 3339 format).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Date and time of hosting&#39;s creation (RFC 3339 format).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param dnsStatus The DNS status of the hosting.
         * 
         * @return builder
         * 
         */
        public Builder dnsStatus(@Nullable Output<String> dnsStatus) {
            $.dnsStatus = dnsStatus;
            return this;
        }

        /**
         * @param dnsStatus The DNS status of the hosting.
         * 
         * @return builder
         * 
         */
        public Builder dnsStatus(String dnsStatus) {
            return dnsStatus(Output.of(dnsStatus));
        }

        /**
         * @param domain The domain name of the hosting.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain name of the hosting.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param email The contact email of the client for the hosting.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The contact email of the client for the hosting.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param offerId The ID of the selected offer for the hosting.
         * 
         * @return builder
         * 
         */
        public Builder offerId(@Nullable Output<String> offerId) {
            $.offerId = offerId;
            return this;
        }

        /**
         * @param offerId The ID of the selected offer for the hosting.
         * 
         * @return builder
         * 
         */
        public Builder offerId(String offerId) {
            return offerId(Output.of(offerId));
        }

        /**
         * @param offerName The name of the active offer.
         * 
         * @return builder
         * 
         */
        public Builder offerName(@Nullable Output<String> offerName) {
            $.offerName = offerName;
            return this;
        }

        /**
         * @param offerName The name of the active offer.
         * 
         * @return builder
         * 
         */
        public Builder offerName(String offerName) {
            return offerName(Output.of(offerName));
        }

        /**
         * @param optionIds The IDs of the selected options for the hosting.
         * 
         * @return builder
         * 
         */
        public Builder optionIds(@Nullable Output<List<String>> optionIds) {
            $.optionIds = optionIds;
            return this;
        }

        /**
         * @param optionIds The IDs of the selected options for the hosting.
         * 
         * @return builder
         * 
         */
        public Builder optionIds(List<String> optionIds) {
            return optionIds(Output.of(optionIds));
        }

        /**
         * @param optionIds The IDs of the selected options for the hosting.
         * 
         * @return builder
         * 
         */
        public Builder optionIds(String... optionIds) {
            return optionIds(List.of(optionIds));
        }

        /**
         * @param options The active options of the hosting.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<List<WebhostingOptionArgs>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options The active options of the hosting.
         * 
         * @return builder
         * 
         */
        public Builder options(List<WebhostingOptionArgs> options) {
            return options(Output.of(options));
        }

        /**
         * @param options The active options of the hosting.
         * 
         * @return builder
         * 
         */
        public Builder options(WebhostingOptionArgs... options) {
            return options(List.of(options));
        }

        /**
         * @param organizationId The organization ID the hosting is associated with.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId The organization ID the hosting is associated with.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param platformHostname The hostname of the host platform.
         * 
         * @return builder
         * 
         */
        public Builder platformHostname(@Nullable Output<String> platformHostname) {
            $.platformHostname = platformHostname;
            return this;
        }

        /**
         * @param platformHostname The hostname of the host platform.
         * 
         * @return builder
         * 
         */
        public Builder platformHostname(String platformHostname) {
            return platformHostname(Output.of(platformHostname));
        }

        /**
         * @param platformNumber The number of the host platform.
         * 
         * @return builder
         * 
         */
        public Builder platformNumber(@Nullable Output<Integer> platformNumber) {
            $.platformNumber = platformNumber;
            return this;
        }

        /**
         * @param platformNumber The number of the host platform.
         * 
         * @return builder
         * 
         */
        public Builder platformNumber(Integer platformNumber) {
            return platformNumber(Output.of(platformNumber));
        }

        /**
         * @param projectId `project_id`) The ID of the project the VPC is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the VPC is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region `region`) The region of the Hosting.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`) The region of the Hosting.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param status The hosting status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The hosting status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tags associated with the hosting.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags associated with the hosting.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags associated with the hosting.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updatedAt Date and time of hosting&#39;s last update (RFC 3339 format).
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Date and time of hosting&#39;s last update (RFC 3339 format).
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param username The main hosting cPanel username.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The main hosting cPanel username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public WebhostingState build() {
            return $;
        }
    }

}
