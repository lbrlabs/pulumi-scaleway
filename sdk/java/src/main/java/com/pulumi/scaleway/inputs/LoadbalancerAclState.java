// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scaleway.inputs.LoadbalancerAclActionArgs;
import com.pulumi.scaleway.inputs.LoadbalancerAclMatchArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerAclState extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerAclState Empty = new LoadbalancerAclState();

    /**
     * Action to undertake when an ACL filter matches.
     * 
     */
    @Import(name="action")
    private @Nullable Output<LoadbalancerAclActionArgs> action;

    /**
     * @return Action to undertake when an ACL filter matches.
     * 
     */
    public Optional<Output<LoadbalancerAclActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Date and time of ACL&#39;s creation (RFC 3339 format)
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Date and time of ACL&#39;s creation (RFC 3339 format)
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The ACL description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The ACL description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The load-balancer Frontend ID to attach the ACL to.
     * 
     */
    @Import(name="frontendId")
    private @Nullable Output<String> frontendId;

    /**
     * @return The load-balancer Frontend ID to attach the ACL to.
     * 
     */
    public Optional<Output<String>> frontendId() {
        return Optional.ofNullable(this.frontendId);
    }

    /**
     * The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
     * 
     */
    @Import(name="index")
    private @Nullable Output<Integer> index;

    /**
     * @return The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
     * 
     */
    public Optional<Output<Integer>> index() {
        return Optional.ofNullable(this.index);
    }

    /**
     * The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.
     * 
     */
    @Import(name="match")
    private @Nullable Output<LoadbalancerAclMatchArgs> match;

    /**
     * @return The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.
     * 
     */
    public Optional<Output<LoadbalancerAclMatchArgs>> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * The ACL name. If not provided it will be randomly generated.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The ACL name. If not provided it will be randomly generated.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Date and time of ACL&#39;s update (RFC 3339 format)
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Date and time of ACL&#39;s update (RFC 3339 format)
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private LoadbalancerAclState() {}

    private LoadbalancerAclState(LoadbalancerAclState $) {
        this.action = $.action;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.frontendId = $.frontendId;
        this.index = $.index;
        this.match = $.match;
        this.name = $.name;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerAclState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerAclState $;

        public Builder() {
            $ = new LoadbalancerAclState();
        }

        public Builder(LoadbalancerAclState defaults) {
            $ = new LoadbalancerAclState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to undertake when an ACL filter matches.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<LoadbalancerAclActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to undertake when an ACL filter matches.
         * 
         * @return builder
         * 
         */
        public Builder action(LoadbalancerAclActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param createdAt Date and time of ACL&#39;s creation (RFC 3339 format)
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Date and time of ACL&#39;s creation (RFC 3339 format)
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description The ACL description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The ACL description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param frontendId The load-balancer Frontend ID to attach the ACL to.
         * 
         * @return builder
         * 
         */
        public Builder frontendId(@Nullable Output<String> frontendId) {
            $.frontendId = frontendId;
            return this;
        }

        /**
         * @param frontendId The load-balancer Frontend ID to attach the ACL to.
         * 
         * @return builder
         * 
         */
        public Builder frontendId(String frontendId) {
            return frontendId(Output.of(frontendId));
        }

        /**
         * @param index The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
         * 
         * @return builder
         * 
         */
        public Builder index(@Nullable Output<Integer> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
         * 
         * @return builder
         * 
         */
        public Builder index(Integer index) {
            return index(Output.of(index));
        }

        /**
         * @param match The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable Output<LoadbalancerAclMatchArgs> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.
         * 
         * @return builder
         * 
         */
        public Builder match(LoadbalancerAclMatchArgs match) {
            return match(Output.of(match));
        }

        /**
         * @param name The ACL name. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The ACL name. If not provided it will be randomly generated.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param updatedAt Date and time of ACL&#39;s update (RFC 3339 format)
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Date and time of ACL&#39;s update (RFC 3339 format)
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public LoadbalancerAclState build() {
            return $;
        }
    }

}
