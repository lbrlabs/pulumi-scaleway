// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpamIpSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpamIpSourceArgs Empty = new IpamIpSourceArgs();

    /**
     * The private network the IP lives in if the IP is a private IP.
     * 
     */
    @Import(name="privateNetworkId")
    private @Nullable Output<String> privateNetworkId;

    /**
     * @return The private network the IP lives in if the IP is a private IP.
     * 
     */
    public Optional<Output<String>> privateNetworkId() {
        return Optional.ofNullable(this.privateNetworkId);
    }

    /**
     * The private network subnet the IP lives in if the IP is a private IP in a private network.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The private network subnet the IP lives in if the IP is a private IP in a private network.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The zone the IP lives in if the IP is a public zoned one
     * 
     */
    @Import(name="zonal")
    private @Nullable Output<String> zonal;

    /**
     * @return The zone the IP lives in if the IP is a public zoned one
     * 
     */
    public Optional<Output<String>> zonal() {
        return Optional.ofNullable(this.zonal);
    }

    private IpamIpSourceArgs() {}

    private IpamIpSourceArgs(IpamIpSourceArgs $) {
        this.privateNetworkId = $.privateNetworkId;
        this.subnetId = $.subnetId;
        this.zonal = $.zonal;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpamIpSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpamIpSourceArgs $;

        public Builder() {
            $ = new IpamIpSourceArgs();
        }

        public Builder(IpamIpSourceArgs defaults) {
            $ = new IpamIpSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param privateNetworkId The private network the IP lives in if the IP is a private IP.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkId(@Nullable Output<String> privateNetworkId) {
            $.privateNetworkId = privateNetworkId;
            return this;
        }

        /**
         * @param privateNetworkId The private network the IP lives in if the IP is a private IP.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkId(String privateNetworkId) {
            return privateNetworkId(Output.of(privateNetworkId));
        }

        /**
         * @param subnetId The private network subnet the IP lives in if the IP is a private IP in a private network.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The private network subnet the IP lives in if the IP is a private IP in a private network.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param zonal The zone the IP lives in if the IP is a public zoned one
         * 
         * @return builder
         * 
         */
        public Builder zonal(@Nullable Output<String> zonal) {
            $.zonal = zonal;
            return this;
        }

        /**
         * @param zonal The zone the IP lives in if the IP is a public zoned one
         * 
         * @return builder
         * 
         */
        public Builder zonal(String zonal) {
            return zonal(Output.of(zonal));
        }

        public IpamIpSourceArgs build() {
            return $;
        }
    }

}
