// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MnqSnsTopicSubscriptionState extends com.pulumi.resources.ResourceArgs {

    public static final MnqSnsTopicSubscriptionState Empty = new MnqSnsTopicSubscriptionState();

    /**
     * The access key of the SNS credentials.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return The access key of the SNS credentials.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The ARN of the topic subscription
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The ARN of the topic subscription
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Endpoint of the subscription
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return Endpoint of the subscription
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * `project_id`) The ID of the project the sns is enabled for.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the sns is enabled for.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Protocol of the SNS Topic Subscription.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol of the SNS Topic Subscription.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Activate JSON Redrive Policy.
     * 
     */
    @Import(name="redrivePolicy")
    private @Nullable Output<Boolean> redrivePolicy;

    /**
     * @return Activate JSON Redrive Policy.
     * 
     */
    public Optional<Output<Boolean>> redrivePolicy() {
        return Optional.ofNullable(this.redrivePolicy);
    }

    /**
     * `region`). The region
     * in which sns is enabled.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`). The region
     * in which sns is enabled.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The secret key of the SNS credentials.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return The secret key of the SNS credentials.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
     * 
     */
    @Import(name="snsEndpoint")
    private @Nullable Output<String> snsEndpoint;

    /**
     * @return The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
     * 
     */
    public Optional<Output<String>> snsEndpoint() {
        return Optional.ofNullable(this.snsEndpoint);
    }

    /**
     * The ARN of the topic. Either `topic_id` or `topic_arn` is required.
     * 
     */
    @Import(name="topicArn")
    private @Nullable Output<String> topicArn;

    /**
     * @return The ARN of the topic. Either `topic_id` or `topic_arn` is required.
     * 
     */
    public Optional<Output<String>> topicArn() {
        return Optional.ofNullable(this.topicArn);
    }

    /**
     * The ID of the topic. Either `topic_id` or `topic_arn` is required. Conflicts with `topic_arn`.
     * 
     */
    @Import(name="topicId")
    private @Nullable Output<String> topicId;

    /**
     * @return The ID of the topic. Either `topic_id` or `topic_arn` is required. Conflicts with `topic_arn`.
     * 
     */
    public Optional<Output<String>> topicId() {
        return Optional.ofNullable(this.topicId);
    }

    private MnqSnsTopicSubscriptionState() {}

    private MnqSnsTopicSubscriptionState(MnqSnsTopicSubscriptionState $) {
        this.accessKey = $.accessKey;
        this.arn = $.arn;
        this.endpoint = $.endpoint;
        this.projectId = $.projectId;
        this.protocol = $.protocol;
        this.redrivePolicy = $.redrivePolicy;
        this.region = $.region;
        this.secretKey = $.secretKey;
        this.snsEndpoint = $.snsEndpoint;
        this.topicArn = $.topicArn;
        this.topicId = $.topicId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MnqSnsTopicSubscriptionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MnqSnsTopicSubscriptionState $;

        public Builder() {
            $ = new MnqSnsTopicSubscriptionState();
        }

        public Builder(MnqSnsTopicSubscriptionState defaults) {
            $ = new MnqSnsTopicSubscriptionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The access key of the SNS credentials.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The access key of the SNS credentials.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param arn The ARN of the topic subscription
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The ARN of the topic subscription
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param endpoint Endpoint of the subscription
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint Endpoint of the subscription
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param projectId `project_id`) The ID of the project the sns is enabled for.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the sns is enabled for.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param protocol Protocol of the SNS Topic Subscription.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol of the SNS Topic Subscription.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param redrivePolicy Activate JSON Redrive Policy.
         * 
         * @return builder
         * 
         */
        public Builder redrivePolicy(@Nullable Output<Boolean> redrivePolicy) {
            $.redrivePolicy = redrivePolicy;
            return this;
        }

        /**
         * @param redrivePolicy Activate JSON Redrive Policy.
         * 
         * @return builder
         * 
         */
        public Builder redrivePolicy(Boolean redrivePolicy) {
            return redrivePolicy(Output.of(redrivePolicy));
        }

        /**
         * @param region `region`). The region
         * in which sns is enabled.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`). The region
         * in which sns is enabled.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretKey The secret key of the SNS credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The secret key of the SNS credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param snsEndpoint The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
         * 
         * @return builder
         * 
         */
        public Builder snsEndpoint(@Nullable Output<String> snsEndpoint) {
            $.snsEndpoint = snsEndpoint;
            return this;
        }

        /**
         * @param snsEndpoint The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
         * 
         * @return builder
         * 
         */
        public Builder snsEndpoint(String snsEndpoint) {
            return snsEndpoint(Output.of(snsEndpoint));
        }

        /**
         * @param topicArn The ARN of the topic. Either `topic_id` or `topic_arn` is required.
         * 
         * @return builder
         * 
         */
        public Builder topicArn(@Nullable Output<String> topicArn) {
            $.topicArn = topicArn;
            return this;
        }

        /**
         * @param topicArn The ARN of the topic. Either `topic_id` or `topic_arn` is required.
         * 
         * @return builder
         * 
         */
        public Builder topicArn(String topicArn) {
            return topicArn(Output.of(topicArn));
        }

        /**
         * @param topicId The ID of the topic. Either `topic_id` or `topic_arn` is required. Conflicts with `topic_arn`.
         * 
         * @return builder
         * 
         */
        public Builder topicId(@Nullable Output<String> topicId) {
            $.topicId = topicId;
            return this;
        }

        /**
         * @param topicId The ID of the topic. Either `topic_id` or `topic_arn` is required. Conflicts with `topic_arn`.
         * 
         * @return builder
         * 
         */
        public Builder topicId(String topicId) {
            return topicId(Output.of(topicId));
        }

        public MnqSnsTopicSubscriptionState build() {
            return $;
        }
    }

}
