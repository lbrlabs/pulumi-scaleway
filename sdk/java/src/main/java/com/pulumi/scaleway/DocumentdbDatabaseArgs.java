// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentdbDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DocumentdbDatabaseArgs Empty = new DocumentdbDatabaseArgs();

    /**
     * UUID of the documentdb instance.
     * 
     * &gt; **Important:** Updates to `instance_id` will recreate the Database.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return UUID of the documentdb instance.
     * 
     * &gt; **Important:** Updates to `instance_id` will recreate the Database.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Name of the database (e.g. `my-new-database`).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the database (e.g. `my-new-database`).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The project_id you want to attach the resource to
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project_id you want to attach the resource to
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * `region`) The region in which the resource exists.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return `region`) The region in which the resource exists.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private DocumentdbDatabaseArgs() {}

    private DocumentdbDatabaseArgs(DocumentdbDatabaseArgs $) {
        this.instanceId = $.instanceId;
        this.name = $.name;
        this.projectId = $.projectId;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentdbDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentdbDatabaseArgs $;

        public Builder() {
            $ = new DocumentdbDatabaseArgs();
        }

        public Builder(DocumentdbDatabaseArgs defaults) {
            $ = new DocumentdbDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceId UUID of the documentdb instance.
         * 
         * &gt; **Important:** Updates to `instance_id` will recreate the Database.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId UUID of the documentdb instance.
         * 
         * &gt; **Important:** Updates to `instance_id` will recreate the Database.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param name Name of the database (e.g. `my-new-database`).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the database (e.g. `my-new-database`).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The project_id you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project_id you want to attach the resource to
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region `region`) The region in which the resource exists.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region `region`) The region in which the resource exists.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public DocumentdbDatabaseArgs build() {
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            return $;
        }
    }

}
