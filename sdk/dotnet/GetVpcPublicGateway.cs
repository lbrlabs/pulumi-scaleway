// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Scaleway
{
    public static class GetVpcPublicGateway
    {
        /// <summary>
        /// Gets information about a public gateway.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var main = new Scaleway.VpcPublicGateway("main", new Scaleway.VpcPublicGatewayArgs
        ///         {
        ///             Type = "VPC-GW-S",
        ///         });
        ///         var pgTestByName = main.Name.Apply(name =&gt; Scaleway.GetVpcPublicGateway.InvokeAsync(new Scaleway.GetVpcPublicGatewayArgs
        ///         {
        ///             Name = name,
        ///         }));
        ///         var pgTestById = main.Id.Apply(id =&gt; Scaleway.GetVpcPublicGateway.InvokeAsync(new Scaleway.GetVpcPublicGatewayArgs
        ///         {
        ///             PublicGatewayId = id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVpcPublicGatewayResult> InvokeAsync(GetVpcPublicGatewayArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVpcPublicGatewayResult>("scaleway:index/getVpcPublicGateway:getVpcPublicGateway", args ?? new GetVpcPublicGatewayArgs(), options.WithVersion());

        /// <summary>
        /// Gets information about a public gateway.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var main = new Scaleway.VpcPublicGateway("main", new Scaleway.VpcPublicGatewayArgs
        ///         {
        ///             Type = "VPC-GW-S",
        ///         });
        ///         var pgTestByName = main.Name.Apply(name =&gt; Scaleway.GetVpcPublicGateway.InvokeAsync(new Scaleway.GetVpcPublicGatewayArgs
        ///         {
        ///             Name = name,
        ///         }));
        ///         var pgTestById = main.Id.Apply(id =&gt; Scaleway.GetVpcPublicGateway.InvokeAsync(new Scaleway.GetVpcPublicGatewayArgs
        ///         {
        ///             PublicGatewayId = id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVpcPublicGatewayResult> Invoke(GetVpcPublicGatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVpcPublicGatewayResult>("scaleway:index/getVpcPublicGateway:getVpcPublicGateway", args ?? new GetVpcPublicGatewayInvokeArgs(), options.WithVersion());
    }


    public sealed class GetVpcPublicGatewayArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Exact name of the public gateway.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("publicGatewayId")]
        public string? PublicGatewayId { get; set; }

        public GetVpcPublicGatewayArgs()
        {
        }
    }

    public sealed class GetVpcPublicGatewayInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Exact name of the public gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("publicGatewayId")]
        public Input<string>? PublicGatewayId { get; set; }

        public GetVpcPublicGatewayInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVpcPublicGatewayResult
    {
        public readonly string CreatedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpId;
        public readonly string? Name;
        public readonly string OrganizationId;
        public readonly string ProjectId;
        public readonly string? PublicGatewayId;
        public readonly ImmutableArray<string> Tags;
        public readonly string Type;
        public readonly string UpdatedAt;
        public readonly ImmutableArray<string> UpstreamDnsServers;
        public readonly string Zone;

        [OutputConstructor]
        private GetVpcPublicGatewayResult(
            string createdAt,

            string id,

            string ipId,

            string? name,

            string organizationId,

            string projectId,

            string? publicGatewayId,

            ImmutableArray<string> tags,

            string type,

            string updatedAt,

            ImmutableArray<string> upstreamDnsServers,

            string zone)
        {
            CreatedAt = createdAt;
            Id = id;
            IpId = ipId;
            Name = name;
            OrganizationId = organizationId;
            ProjectId = projectId;
            PublicGatewayId = publicGatewayId;
            Tags = tags;
            Type = type;
            UpdatedAt = updatedAt;
            UpstreamDnsServers = upstreamDnsServers;
            Zone = zone;
        }
    }
}
