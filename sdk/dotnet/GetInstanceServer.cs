// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway
{
    public static class GetInstanceServer
    {
        public static Task<GetInstanceServerResult> InvokeAsync(GetInstanceServerArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstanceServerResult>("scaleway:index/getInstanceServer:getInstanceServer", args ?? new GetInstanceServerArgs(), options.WithDefaults());

        public static Output<GetInstanceServerResult> Invoke(GetInstanceServerInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetInstanceServerResult>("scaleway:index/getInstanceServer:getInstanceServer", args ?? new GetInstanceServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceServerArgs : Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        [Input("serverId")]
        public string? ServerId { get; set; }

        [Input("zone")]
        public string? Zone { get; set; }

        public GetInstanceServerArgs()
        {
        }
    }

    public sealed class GetInstanceServerInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetInstanceServerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInstanceServerResult
    {
        public readonly ImmutableArray<string> AdditionalVolumeIds;
        public readonly string BootType;
        public readonly string BootscriptId;
        public readonly string CloudInit;
        public readonly bool EnableDynamicIp;
        public readonly bool EnableIpv6;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Image;
        public readonly string IpId;
        public readonly string Ipv6Address;
        public readonly string Ipv6Gateway;
        public readonly int Ipv6PrefixLength;
        public readonly string? Name;
        public readonly string OrganizationId;
        public readonly string PlacementGroupId;
        public readonly bool PlacementGroupPolicyRespected;
        public readonly string PrivateIp;
        public readonly ImmutableArray<Outputs.GetInstanceServerPrivateNetworkResult> PrivateNetworks;
        public readonly string ProjectId;
        public readonly string PublicIp;
        public readonly ImmutableArray<Outputs.GetInstanceServerRootVolumeResult> RootVolumes;
        public readonly string SecurityGroupId;
        public readonly string? ServerId;
        public readonly string State;
        public readonly ImmutableArray<string> Tags;
        public readonly string Type;
        public readonly ImmutableDictionary<string, string> UserData;
        public readonly string? Zone;

        [OutputConstructor]
        private GetInstanceServerResult(
            ImmutableArray<string> additionalVolumeIds,

            string bootType,

            string bootscriptId,

            string cloudInit,

            bool enableDynamicIp,

            bool enableIpv6,

            string id,

            string image,

            string ipId,

            string ipv6Address,

            string ipv6Gateway,

            int ipv6PrefixLength,

            string? name,

            string organizationId,

            string placementGroupId,

            bool placementGroupPolicyRespected,

            string privateIp,

            ImmutableArray<Outputs.GetInstanceServerPrivateNetworkResult> privateNetworks,

            string projectId,

            string publicIp,

            ImmutableArray<Outputs.GetInstanceServerRootVolumeResult> rootVolumes,

            string securityGroupId,

            string? serverId,

            string state,

            ImmutableArray<string> tags,

            string type,

            ImmutableDictionary<string, string> userData,

            string? zone)
        {
            AdditionalVolumeIds = additionalVolumeIds;
            BootType = bootType;
            BootscriptId = bootscriptId;
            CloudInit = cloudInit;
            EnableDynamicIp = enableDynamicIp;
            EnableIpv6 = enableIpv6;
            Id = id;
            Image = image;
            IpId = ipId;
            Ipv6Address = ipv6Address;
            Ipv6Gateway = ipv6Gateway;
            Ipv6PrefixLength = ipv6PrefixLength;
            Name = name;
            OrganizationId = organizationId;
            PlacementGroupId = placementGroupId;
            PlacementGroupPolicyRespected = placementGroupPolicyRespected;
            PrivateIp = privateIp;
            PrivateNetworks = privateNetworks;
            ProjectId = projectId;
            PublicIp = publicIp;
            RootVolumes = rootVolumes;
            SecurityGroupId = securityGroupId;
            ServerId = serverId;
            State = state;
            Tags = tags;
            Type = type;
            UserData = userData;
            Zone = zone;
        }
    }
}
