// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway
{
    /// <summary>
    /// Create and manage Scaleway RDB database privilege.
    /// For more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var priv = new Scaleway.DatabasePrivilege("priv", new Scaleway.DatabasePrivilegeArgs
    ///         {
    ///             InstanceId = scaleway_rdb_instance.Rdb.Id,
    ///             UserName = "my-db-user",
    ///             DatabaseName = "my-db-name",
    ///             Permission = "all",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/databasePrivilege:DatabasePrivilege")]
    public partial class DatabasePrivilege : Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the database (e.g. `my-db-name`).
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// UUID of the instance where to create the database.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
        /// </summary>
        [Output("permission")]
        public Output<string> Permission { get; private set; } = null!;

        /// <summary>
        /// Name of the user (e.g. `my-db-user`).
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a DatabasePrivilege resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabasePrivilege(string name, DatabasePrivilegeArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/databasePrivilege:DatabasePrivilege", name, args ?? new DatabasePrivilegeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabasePrivilege(string name, Input<string> id, DatabasePrivilegeState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/databasePrivilege:DatabasePrivilege", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabasePrivilege resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabasePrivilege Get(string name, Input<string> id, DatabasePrivilegeState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabasePrivilege(name, id, state, options);
        }
    }

    public sealed class DatabasePrivilegeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the database (e.g. `my-db-name`).
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// UUID of the instance where to create the database.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
        /// </summary>
        [Input("permission", required: true)]
        public Input<string> Permission { get; set; } = null!;

        /// <summary>
        /// Name of the user (e.g. `my-db-user`).
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public DatabasePrivilegeArgs()
        {
        }
    }

    public sealed class DatabasePrivilegeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the database (e.g. `my-db-name`).
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// UUID of the instance where to create the database.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
        /// </summary>
        [Input("permission")]
        public Input<string>? Permission { get; set; }

        /// <summary>
        /// Name of the user (e.g. `my-db-user`).
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public DatabasePrivilegeState()
        {
        }
    }
}
