// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Scaleway
{
    public static class GetVpcPublicGatewayIp
    {
        /// <summary>
        /// Gets information about a public gateway IP.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var main = new Scaleway.VpcPublicGatewayIp("main", new Scaleway.VpcPublicGatewayIpArgs
        ///         {
        ///         });
        ///         var ipById = main.Id.Apply(id =&gt; Scaleway.GetVpcPublicGatewayIp.InvokeAsync(new Scaleway.GetVpcPublicGatewayIpArgs
        ///         {
        ///             IpId = id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVpcPublicGatewayIpResult> InvokeAsync(GetVpcPublicGatewayIpArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVpcPublicGatewayIpResult>("scaleway:index/getVpcPublicGatewayIp:getVpcPublicGatewayIp", args ?? new GetVpcPublicGatewayIpArgs(), options.WithVersion());

        /// <summary>
        /// Gets information about a public gateway IP.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var main = new Scaleway.VpcPublicGatewayIp("main", new Scaleway.VpcPublicGatewayIpArgs
        ///         {
        ///         });
        ///         var ipById = main.Id.Apply(id =&gt; Scaleway.GetVpcPublicGatewayIp.InvokeAsync(new Scaleway.GetVpcPublicGatewayIpArgs
        ///         {
        ///             IpId = id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVpcPublicGatewayIpResult> Invoke(GetVpcPublicGatewayIpInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVpcPublicGatewayIpResult>("scaleway:index/getVpcPublicGatewayIp:getVpcPublicGatewayIp", args ?? new GetVpcPublicGatewayIpInvokeArgs(), options.WithVersion());
    }


    public sealed class GetVpcPublicGatewayIpArgs : Pulumi.InvokeArgs
    {
        [Input("ipId")]
        public string? IpId { get; set; }

        public GetVpcPublicGatewayIpArgs()
        {
        }
    }

    public sealed class GetVpcPublicGatewayIpInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("ipId")]
        public Input<string>? IpId { get; set; }

        public GetVpcPublicGatewayIpInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVpcPublicGatewayIpResult
    {
        public readonly string Address;
        public readonly string CreatedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? IpId;
        public readonly string OrganizationId;
        public readonly string ProjectId;
        public readonly string Reverse;
        public readonly ImmutableArray<string> Tags;
        public readonly string UpdatedAt;
        public readonly string Zone;

        [OutputConstructor]
        private GetVpcPublicGatewayIpResult(
            string address,

            string createdAt,

            string id,

            string? ipId,

            string organizationId,

            string projectId,

            string reverse,

            ImmutableArray<string> tags,

            string updatedAt,

            string zone)
        {
            Address = address;
            CreatedAt = createdAt;
            Id = id;
            IpId = ipId;
            OrganizationId = organizationId;
            ProjectId = projectId;
            Reverse = reverse;
            Tags = tags;
            UpdatedAt = updatedAt;
            Zone = zone;
        }
    }
}
