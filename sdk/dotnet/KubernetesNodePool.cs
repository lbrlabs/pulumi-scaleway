// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway
{
    [ScalewayResourceType("scaleway:index/kubernetesNodePool:KubernetesNodePool")]
    public partial class KubernetesNodePool : Pulumi.CustomResource
    {
        /// <summary>
        /// Enable the autohealing on the pool
        /// </summary>
        [Output("autohealing")]
        public Output<bool?> Autohealing { get; private set; } = null!;

        /// <summary>
        /// Enable the autoscaling on the pool
        /// </summary>
        [Output("autoscaling")]
        public Output<bool?> Autoscaling { get; private set; } = null!;

        /// <summary>
        /// The ID of the cluster on which this pool will be created
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Container runtime for the pool
        /// </summary>
        [Output("containerRuntime")]
        public Output<string?> ContainerRuntime { get; private set; } = null!;

        /// <summary>
        /// The date and time of the creation of the pool
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The actual size of the pool
        /// </summary>
        [Output("currentSize")]
        public Output<int> CurrentSize { get; private set; } = null!;

        /// <summary>
        /// The Kubelet arguments to be used by this pool
        /// </summary>
        [Output("kubeletArgs")]
        public Output<ImmutableDictionary<string, string>?> KubeletArgs { get; private set; } = null!;

        /// <summary>
        /// Maximum size of the pool
        /// </summary>
        [Output("maxSize")]
        public Output<int> MaxSize { get; private set; } = null!;

        /// <summary>
        /// Minimun size of the pool
        /// </summary>
        [Output("minSize")]
        public Output<int?> MinSize { get; private set; } = null!;

        /// <summary>
        /// The name of the cluster
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Server type of the pool servers
        /// </summary>
        [Output("nodeType")]
        public Output<string> NodeType { get; private set; } = null!;

        [Output("nodes")]
        public Output<ImmutableArray<Outputs.KubernetesNodePoolNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// ID of the placement group
        /// </summary>
        [Output("placementGroupId")]
        public Output<string?> PlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// The region you want to attach the resource to
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Size of the pool
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The status of the pool
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The tags associated with the pool
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update of the pool
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The Pool upgrade policy
        /// </summary>
        [Output("upgradePolicy")]
        public Output<Outputs.KubernetesNodePoolUpgradePolicy> UpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// The Kubernetes version of the pool
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// Whether to wait for the pool to be ready
        /// </summary>
        [Output("waitForPoolReady")]
        public Output<bool?> WaitForPoolReady { get; private set; } = null!;

        /// <summary>
        /// The zone you want to attach the resource to
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesNodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesNodePool(string name, KubernetesNodePoolArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/kubernetesNodePool:KubernetesNodePool", name, args ?? new KubernetesNodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesNodePool(string name, Input<string> id, KubernetesNodePoolState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/kubernetesNodePool:KubernetesNodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/jaxxstorm/pulumi-scaleway/releases/download/${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesNodePool Get(string name, Input<string> id, KubernetesNodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new KubernetesNodePool(name, id, state, options);
        }
    }

    public sealed class KubernetesNodePoolArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable the autohealing on the pool
        /// </summary>
        [Input("autohealing")]
        public Input<bool>? Autohealing { get; set; }

        /// <summary>
        /// Enable the autoscaling on the pool
        /// </summary>
        [Input("autoscaling")]
        public Input<bool>? Autoscaling { get; set; }

        /// <summary>
        /// The ID of the cluster on which this pool will be created
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Container runtime for the pool
        /// </summary>
        [Input("containerRuntime")]
        public Input<string>? ContainerRuntime { get; set; }

        [Input("kubeletArgs")]
        private InputMap<string>? _kubeletArgs;

        /// <summary>
        /// The Kubelet arguments to be used by this pool
        /// </summary>
        public InputMap<string> KubeletArgs
        {
            get => _kubeletArgs ?? (_kubeletArgs = new InputMap<string>());
            set => _kubeletArgs = value;
        }

        /// <summary>
        /// Maximum size of the pool
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// Minimun size of the pool
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// The name of the cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Server type of the pool servers
        /// </summary>
        [Input("nodeType", required: true)]
        public Input<string> NodeType { get; set; } = null!;

        /// <summary>
        /// ID of the placement group
        /// </summary>
        [Input("placementGroupId")]
        public Input<string>? PlacementGroupId { get; set; }

        /// <summary>
        /// The region you want to attach the resource to
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Size of the pool
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the pool
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The Pool upgrade policy
        /// </summary>
        [Input("upgradePolicy")]
        public Input<Inputs.KubernetesNodePoolUpgradePolicyArgs>? UpgradePolicy { get; set; }

        /// <summary>
        /// Whether to wait for the pool to be ready
        /// </summary>
        [Input("waitForPoolReady")]
        public Input<bool>? WaitForPoolReady { get; set; }

        /// <summary>
        /// The zone you want to attach the resource to
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public KubernetesNodePoolArgs()
        {
        }
    }

    public sealed class KubernetesNodePoolState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable the autohealing on the pool
        /// </summary>
        [Input("autohealing")]
        public Input<bool>? Autohealing { get; set; }

        /// <summary>
        /// Enable the autoscaling on the pool
        /// </summary>
        [Input("autoscaling")]
        public Input<bool>? Autoscaling { get; set; }

        /// <summary>
        /// The ID of the cluster on which this pool will be created
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Container runtime for the pool
        /// </summary>
        [Input("containerRuntime")]
        public Input<string>? ContainerRuntime { get; set; }

        /// <summary>
        /// The date and time of the creation of the pool
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The actual size of the pool
        /// </summary>
        [Input("currentSize")]
        public Input<int>? CurrentSize { get; set; }

        [Input("kubeletArgs")]
        private InputMap<string>? _kubeletArgs;

        /// <summary>
        /// The Kubelet arguments to be used by this pool
        /// </summary>
        public InputMap<string> KubeletArgs
        {
            get => _kubeletArgs ?? (_kubeletArgs = new InputMap<string>());
            set => _kubeletArgs = value;
        }

        /// <summary>
        /// Maximum size of the pool
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// Minimun size of the pool
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// The name of the cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Server type of the pool servers
        /// </summary>
        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        [Input("nodes")]
        private InputList<Inputs.KubernetesNodePoolNodeGetArgs>? _nodes;
        public InputList<Inputs.KubernetesNodePoolNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.KubernetesNodePoolNodeGetArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// ID of the placement group
        /// </summary>
        [Input("placementGroupId")]
        public Input<string>? PlacementGroupId { get; set; }

        /// <summary>
        /// The region you want to attach the resource to
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Size of the pool
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The status of the pool
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the pool
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The date and time of the last update of the pool
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The Pool upgrade policy
        /// </summary>
        [Input("upgradePolicy")]
        public Input<Inputs.KubernetesNodePoolUpgradePolicyGetArgs>? UpgradePolicy { get; set; }

        /// <summary>
        /// The Kubernetes version of the pool
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Whether to wait for the pool to be ready
        /// </summary>
        [Input("waitForPoolReady")]
        public Input<bool>? WaitForPoolReady { get; set; }

        /// <summary>
        /// The zone you want to attach the resource to
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public KubernetesNodePoolState()
        {
        }
    }
}
