// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getLoadbalancer(args?: GetLoadbalancerArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadbalancerResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("scaleway:index/getLoadbalancer:getLoadbalancer", {
        "lbId": args.lbId,
        "name": args.name,
        "releaseIp": args.releaseIp,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getLoadbalancer.
 */
export interface GetLoadbalancerArgs {
    lbId?: string;
    name?: string;
    releaseIp?: boolean;
    zone?: string;
}

/**
 * A collection of values returned by getLoadbalancer.
 */
export interface GetLoadbalancerResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipAddress: string;
    readonly ipId: string;
    readonly lbId?: string;
    readonly name?: string;
    readonly organizationId: string;
    readonly privateNetworks: outputs.GetLoadbalancerPrivateNetwork[];
    readonly projectId: string;
    readonly region: string;
    readonly releaseIp?: boolean;
    readonly tags: string[];
    readonly type: string;
    readonly zone?: string;
}

export function getLoadbalancerOutput(args?: GetLoadbalancerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadbalancerResult> {
    return pulumi.output(args).apply(a => getLoadbalancer(a, opts))
}

/**
 * A collection of arguments for invoking getLoadbalancer.
 */
export interface GetLoadbalancerOutputArgs {
    lbId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    releaseIp?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}
