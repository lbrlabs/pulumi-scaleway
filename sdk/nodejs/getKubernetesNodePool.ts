// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getKubernetesNodePool(args?: GetKubernetesNodePoolArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesNodePoolResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("scaleway:index/getKubernetesNodePool:getKubernetesNodePool", {
        "clusterId": args.clusterId,
        "name": args.name,
        "poolId": args.poolId,
        "region": args.region,
        "size": args.size,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetesNodePool.
 */
export interface GetKubernetesNodePoolArgs {
    clusterId?: string;
    name?: string;
    poolId?: string;
    region?: string;
    size?: number;
}

/**
 * A collection of values returned by getKubernetesNodePool.
 */
export interface GetKubernetesNodePoolResult {
    readonly autohealing: boolean;
    readonly autoscaling: boolean;
    readonly clusterId?: string;
    readonly containerRuntime: string;
    readonly createdAt: string;
    readonly currentSize: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly kubeletArgs: {[key: string]: string};
    readonly maxSize: number;
    readonly minSize: number;
    readonly name?: string;
    readonly nodeType: string;
    readonly nodes: outputs.GetKubernetesNodePoolNode[];
    readonly placementGroupId: string;
    readonly poolId?: string;
    readonly region?: string;
    readonly size?: number;
    readonly status: string;
    readonly tags: string[];
    readonly updatedAt: string;
    readonly upgradePolicies: outputs.GetKubernetesNodePoolUpgradePolicy[];
    readonly version: string;
    readonly waitForPoolReady: boolean;
    readonly zone: string;
}

export function getKubernetesNodePoolOutput(args?: GetKubernetesNodePoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesNodePoolResult> {
    return pulumi.output(args).apply(a => getKubernetesNodePool(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesNodePool.
 */
export interface GetKubernetesNodePoolOutputArgs {
    clusterId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    poolId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
}
