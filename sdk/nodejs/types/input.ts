// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface BaremetalServerIp {
    address?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    reverse?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface DatabaseAclAclRule {
    description?: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

export interface DatabaseInstanceLoadBalancer {
    endpointId?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface DatabaseInstancePrivateNetwork {
    endpointId?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipNet: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pnId: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    zone?: pulumi.Input<string>;
}

export interface DatabaseInstanceReadReplica {
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface DomainRecordGeoIp {
    matches: pulumi.Input<pulumi.Input<inputs.DomainRecordGeoIpMatch>[]>;
}

export interface DomainRecordGeoIpMatch {
    continents?: pulumi.Input<pulumi.Input<string>[]>;
    countries?: pulumi.Input<pulumi.Input<string>[]>;
    data: pulumi.Input<string>;
}

export interface DomainRecordHttpService {
    ips: pulumi.Input<pulumi.Input<string>[]>;
    mustContain: pulumi.Input<string>;
    strategy: pulumi.Input<string>;
    url: pulumi.Input<string>;
    userAgent?: pulumi.Input<string>;
}

export interface DomainRecordView {
    data: pulumi.Input<string>;
    subnet: pulumi.Input<string>;
}

export interface DomainRecordWeighted {
    ip: pulumi.Input<string>;
    weight: pulumi.Input<number>;
}

export interface InstanceSecurityGroupInboundRule {
    action: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipRange?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portRange?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface InstanceSecurityGroupOutboundRule {
    action: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipRange?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portRange?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface InstanceSecurityGroupRulesInboundRule {
    action: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipRange?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portRange?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface InstanceSecurityGroupRulesOutboundRule {
    action: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipRange?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portRange?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface InstanceServerPrivateNetwork {
    macAddress?: pulumi.Input<string>;
    pnId: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface InstanceServerRootVolume {
    boot?: pulumi.Input<boolean>;
    deleteOnTermination?: pulumi.Input<boolean>;
    sizeInGb?: pulumi.Input<number>;
    volumeId?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
}

export interface IotDeviceCertificate {
    crt?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface IotDeviceMessageFilters {
    publish?: pulumi.Input<inputs.IotDeviceMessageFiltersPublish>;
    subscribe?: pulumi.Input<inputs.IotDeviceMessageFiltersSubscribe>;
}

export interface IotDeviceMessageFiltersPublish {
    policy?: pulumi.Input<string>;
    topics?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IotDeviceMessageFiltersSubscribe {
    policy?: pulumi.Input<string>;
    topics?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IotRouteDatabase {
    dbname: pulumi.Input<string>;
    host: pulumi.Input<string>;
    password: pulumi.Input<string>;
    port: pulumi.Input<number>;
    query: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface IotRouteRest {
    headers: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uri: pulumi.Input<string>;
    verb: pulumi.Input<string>;
}

export interface IotRouteS3 {
    bucketName: pulumi.Input<string>;
    bucketRegion: pulumi.Input<string>;
    objectPrefix?: pulumi.Input<string>;
    strategy: pulumi.Input<string>;
}

export interface KubernetesClusterAutoUpgrade {
    enable: pulumi.Input<boolean>;
    maintenanceWindowDay: pulumi.Input<string>;
    maintenanceWindowStartHour: pulumi.Input<number>;
}

export interface KubernetesClusterAutoscalerConfig {
    balanceSimilarNodeGroups?: pulumi.Input<boolean>;
    disableScaleDown?: pulumi.Input<boolean>;
    estimator?: pulumi.Input<string>;
    expander?: pulumi.Input<string>;
    expendablePodsPriorityCutoff?: pulumi.Input<number>;
    ignoreDaemonsetsUtilization?: pulumi.Input<boolean>;
    maxGracefulTerminationSec?: pulumi.Input<number>;
    scaleDownDelayAfterAdd?: pulumi.Input<string>;
    scaleDownUnneededTime?: pulumi.Input<string>;
    scaleDownUtilizationThreshold?: pulumi.Input<number>;
}

export interface KubernetesClusterKubeconfig {
    clusterCaCertificate?: pulumi.Input<string>;
    configFile?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
}

export interface KubernetesClusterOpenIdConnectConfig {
    clientId: pulumi.Input<string>;
    groupsClaims?: pulumi.Input<pulumi.Input<string>[]>;
    groupsPrefix?: pulumi.Input<string>;
    issuerUrl: pulumi.Input<string>;
    requiredClaims?: pulumi.Input<pulumi.Input<string>[]>;
    usernameClaim?: pulumi.Input<string>;
    usernamePrefix?: pulumi.Input<string>;
}

export interface KubernetesNodePoolNode {
    name?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicIpV6?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface KubernetesNodePoolUpgradePolicy {
    maxSurge?: pulumi.Input<number>;
    maxUnavailable?: pulumi.Input<number>;
}

export interface LoadbalancerBackendHealthCheckHttp {
    code?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface LoadbalancerBackendHealthCheckHttps {
    code?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface LoadbalancerBackendHealthCheckTcp {
}

export interface LoadbalancerCertificateCustomCertificate {
    certificateChain: pulumi.Input<string>;
}

export interface LoadbalancerCertificateLetsencrypt {
    commonName: pulumi.Input<string>;
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LoadbalancerFrontendAcl {
    action: pulumi.Input<inputs.LoadbalancerFrontendAclAction>;
    match: pulumi.Input<inputs.LoadbalancerFrontendAclMatch>;
    name?: pulumi.Input<string>;
}

export interface LoadbalancerFrontendAclAction {
    type: pulumi.Input<string>;
}

export interface LoadbalancerFrontendAclMatch {
    httpFilter?: pulumi.Input<string>;
    httpFilterOption?: pulumi.Input<string>;
    httpFilterValues?: pulumi.Input<pulumi.Input<string>[]>;
    invert?: pulumi.Input<boolean>;
    ipSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LoadbalancerPrivateNetwork {
    dhcpConfig?: pulumi.Input<boolean>;
    privateNetworkId: pulumi.Input<string>;
    staticConfigs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface ObjectBucketCorsRule {
    allowedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    allowedMethods: pulumi.Input<pulumi.Input<string>[]>;
    allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
    exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    maxAgeSeconds?: pulumi.Input<number>;
}

export interface ObjectBucketLifecycleRule {
    abortIncompleteMultipartUploadDays?: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    expiration?: pulumi.Input<inputs.ObjectBucketLifecycleRuleExpiration>;
    id?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transitions?: pulumi.Input<pulumi.Input<inputs.ObjectBucketLifecycleRuleTransition>[]>;
}

export interface ObjectBucketLifecycleRuleExpiration {
    days: pulumi.Input<number>;
}

export interface ObjectBucketLifecycleRuleTransition {
    days?: pulumi.Input<number>;
    storageClass: pulumi.Input<string>;
}

export interface ObjectBucketVersioning {
    enabled?: pulumi.Input<boolean>;
}

export interface RedisClusterAcl {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

