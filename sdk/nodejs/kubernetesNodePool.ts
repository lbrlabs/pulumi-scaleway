// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class KubernetesNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesNodePool {
        return new KubernetesNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/kubernetesNodePool:KubernetesNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNodePool.__pulumiType;
    }

    /**
     * Enable the autohealing on the pool
     */
    public readonly autohealing!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the autoscaling on the pool
     */
    public readonly autoscaling!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the cluster on which this pool will be created
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Container runtime for the pool
     */
    public readonly containerRuntime!: pulumi.Output<string | undefined>;
    /**
     * The date and time of the creation of the pool
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The actual size of the pool
     */
    public /*out*/ readonly currentSize!: pulumi.Output<number>;
    /**
     * The Kubelet arguments to be used by this pool
     */
    public readonly kubeletArgs!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Maximum size of the pool
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * Minimun size of the pool
     */
    public readonly minSize!: pulumi.Output<number | undefined>;
    /**
     * The name of the cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Server type of the pool servers
     */
    public readonly nodeType!: pulumi.Output<string>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.KubernetesNodePoolNode[]>;
    /**
     * ID of the placement group
     */
    public readonly placementGroupId!: pulumi.Output<string | undefined>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Size of the pool
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The status of the pool
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tags associated with the pool
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The date and time of the last update of the pool
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The Pool upgrade policy
     */
    public readonly upgradePolicy!: pulumi.Output<outputs.KubernetesNodePoolUpgradePolicy>;
    /**
     * The Kubernetes version of the pool
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    /**
     * Whether to wait for the pool to be ready
     */
    public readonly waitForPoolReady!: pulumi.Output<boolean | undefined>;
    /**
     * The zone you want to attach the resource to
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a KubernetesNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesNodePoolArgs | KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesNodePoolState | undefined;
            resourceInputs["autohealing"] = state ? state.autohealing : undefined;
            resourceInputs["autoscaling"] = state ? state.autoscaling : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["containerRuntime"] = state ? state.containerRuntime : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["currentSize"] = state ? state.currentSize : undefined;
            resourceInputs["kubeletArgs"] = state ? state.kubeletArgs : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["placementGroupId"] = state ? state.placementGroupId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["upgradePolicy"] = state ? state.upgradePolicy : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["waitForPoolReady"] = state ? state.waitForPoolReady : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as KubernetesNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["autohealing"] = args ? args.autohealing : undefined;
            resourceInputs["autoscaling"] = args ? args.autoscaling : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["containerRuntime"] = args ? args.containerRuntime : undefined;
            resourceInputs["kubeletArgs"] = args ? args.kubeletArgs : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["placementGroupId"] = args ? args.placementGroupId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["upgradePolicy"] = args ? args.upgradePolicy : undefined;
            resourceInputs["waitForPoolReady"] = args ? args.waitForPoolReady : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["currentSize"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNodePool resources.
 */
export interface KubernetesNodePoolState {
    /**
     * Enable the autohealing on the pool
     */
    autohealing?: pulumi.Input<boolean>;
    /**
     * Enable the autoscaling on the pool
     */
    autoscaling?: pulumi.Input<boolean>;
    /**
     * The ID of the cluster on which this pool will be created
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Container runtime for the pool
     */
    containerRuntime?: pulumi.Input<string>;
    /**
     * The date and time of the creation of the pool
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The actual size of the pool
     */
    currentSize?: pulumi.Input<number>;
    /**
     * The Kubelet arguments to be used by this pool
     */
    kubeletArgs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maximum size of the pool
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Minimun size of the pool
     */
    minSize?: pulumi.Input<number>;
    /**
     * The name of the cluster
     */
    name?: pulumi.Input<string>;
    /**
     * Server type of the pool servers
     */
    nodeType?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.KubernetesNodePoolNode>[]>;
    /**
     * ID of the placement group
     */
    placementGroupId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Size of the pool
     */
    size?: pulumi.Input<number>;
    /**
     * The status of the pool
     */
    status?: pulumi.Input<string>;
    /**
     * The tags associated with the pool
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time of the last update of the pool
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The Pool upgrade policy
     */
    upgradePolicy?: pulumi.Input<inputs.KubernetesNodePoolUpgradePolicy>;
    /**
     * The Kubernetes version of the pool
     */
    version?: pulumi.Input<string>;
    /**
     * Whether to wait for the pool to be ready
     */
    waitForPoolReady?: pulumi.Input<boolean>;
    /**
     * The zone you want to attach the resource to
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesNodePool resource.
 */
export interface KubernetesNodePoolArgs {
    /**
     * Enable the autohealing on the pool
     */
    autohealing?: pulumi.Input<boolean>;
    /**
     * Enable the autoscaling on the pool
     */
    autoscaling?: pulumi.Input<boolean>;
    /**
     * The ID of the cluster on which this pool will be created
     */
    clusterId: pulumi.Input<string>;
    /**
     * Container runtime for the pool
     */
    containerRuntime?: pulumi.Input<string>;
    /**
     * The Kubelet arguments to be used by this pool
     */
    kubeletArgs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maximum size of the pool
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Minimun size of the pool
     */
    minSize?: pulumi.Input<number>;
    /**
     * The name of the cluster
     */
    name?: pulumi.Input<string>;
    /**
     * Server type of the pool servers
     */
    nodeType: pulumi.Input<string>;
    /**
     * ID of the placement group
     */
    placementGroupId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Size of the pool
     */
    size: pulumi.Input<number>;
    /**
     * The tags associated with the pool
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Pool upgrade policy
     */
    upgradePolicy?: pulumi.Input<inputs.KubernetesNodePoolUpgradePolicy>;
    /**
     * Whether to wait for the pool to be ready
     */
    waitForPoolReady?: pulumi.Input<boolean>;
    /**
     * The zone you want to attach the resource to
     */
    zone?: pulumi.Input<string>;
}
