{
    "name": "scaleway",
    "displayName": "Scaleway",
    "description": "A Pulumi package for creating and managing scaleway cloud resources.",
    "keywords": [
        "pulumi",
        "scaleway",
        "lbrlabs"
    ],
    "homepage": "https://leebriggs.co.uk/projects#pulumi-scaleway",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`scaleway` Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway).",
    "repository": "https://github.com/lbrlabs/pulumi-scaleway",
    "logoUrl": "https://raw.githubusercontent.com/lbrlabs/pulumi-scaleway/master/assets/scaleway-svgrepo-com.svg",
    "pluginDownloadURL": "github://api.github.com/lbrlabs",
    "publisher": "lbrlabs",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Lbrlabs.PulumiPackage"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing scaleway cloud resources.",
            "packageName": "@lbrlabs/pulumi-scaleway",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-scaleway` repo](https://github.com/lbrlabs/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "lbrlabs_pulumi_scaleway",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-scaleway` repo](https://github.com/lbrlabs/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_PROJECT_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                }
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                }
            }
        },
        "defaults": [
            "region",
            "zone"
        ]
    },
    "types": {
        "scaleway:index/BaremetalServerIp:BaremetalServerIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse of the IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id",
                        "reverse",
                        "version"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A text describing this rule. Default description: `IP allowed`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "ip"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Name of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "IP of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Name of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "IP of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipNet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pnId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "ipNet",
                "pnId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "ipNet",
                        "name",
                        "pnId",
                        "port",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseInstanceReadReplica:DatabaseInstanceReadReplica": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseReadReplicaDirectAccess:DatabaseReadReplicaDirectAccess": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the read replica.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of ip and hostname may be set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseReadReplicaPrivateNetwork:DatabaseReadReplicaPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the read replica.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of ip and hostname may be set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "UUID of the private network to be connected to the read replica.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIp": {
                    "type": "string",
                    "description": "Endpoint IPv4 address with a CIDR notation. Check documentation about IP and subnet limitations. (IP network).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateNetworkId",
                "serviceIp"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port",
                        "privateNetworkId",
                        "serviceIp",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordGeoIpMatch:DomainRecordGeoIpMatch"
                    },
                    "description": "The list of matches. *(Can be more than 1)*\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "matches"
            ]
        },
        "scaleway:index/DomainRecordGeoIpMatch:DomainRecordGeoIpMatch": {
            "properties": {
                "continents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "data": {
                    "type": "string",
                    "description": "The data of the view record\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "scaleway:index/DomainRecordHttpService:DomainRecordHttpService": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs to check\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mustContain": {
                    "type": "string",
                    "description": "Text to search\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy to return an IP from the IPs list. Can be `random` or `hashed`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "URL to match the `must_contain` text to validate an IP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAgent": {
                    "type": "string",
                    "description": "User-agent used when checking the URL\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ips",
                "mustContain",
                "strategy",
                "url"
            ]
        },
        "scaleway:index/DomainRecordView:DomainRecordView": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The data of the view record\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet of the view\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data",
                "subnet"
            ]
        },
        "scaleway:index/DomainRecordWeighted:DomainRecordWeighted": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The weighted IP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the IP as an integer UInt32.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "weight"
            ]
        },
        "scaleway:index/InstanceImageAdditionalVolume:InstanceImageAdditionalVolume": {
            "properties": {
                "creationDate": {
                    "type": "string",
                    "description": "Date of the volume creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exportUri": {
                    "type": "string",
                    "description": "The export URI of the volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the server containing the volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modificationDate": {
                    "type": "string",
                    "description": "Date of volume latest update.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image. If not provided it will be randomly generated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "description": "The organization ID the volume is associated with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project the volume is associated with\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Description of the server containing the volume (in case the image is a backup from a server).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "State of the volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume, possible values are `l_ssd` and `b_ssd`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The zone in which the image should be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "creationDate",
                        "exportUri",
                        "id",
                        "modificationDate",
                        "name",
                        "organization",
                        "project",
                        "server",
                        "size",
                        "state",
                        "tags",
                        "volumeType",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule applies to. If no `port` nor `port_range` are specified, the rule will apply to all port. Only one of `port` and `port_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule applies to. If no `port` nor `port_range` are specified, the rule will apply to all port. Only one of `port` and `port_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pnId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pnId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macAddress",
                        "pnId",
                        "status",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume": {
            "properties": {
                "boot": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Forces deletion of the root volume on instance termination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "Size of the root volume in gigabytes.\nTo find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and\ncheck the `volumes_constraint.{min|max}_size` (in bytes) for your `commercial_type`.\nUpdates to this field will recreate a new resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "Volume type of root volume, can be `b_ssd` or `l_ssd`, default value depends on server type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "sizeInGb",
                        "volumeId",
                        "volumeType"
                    ]
                }
            }
        },
        "scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "Key of the object to import\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "key"
            ]
        },
        "scaleway:index/IotDeviceCertificate:IotDeviceCertificate": {
            "properties": {
                "crt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "key": {
                    "type": "string",
                    "description": "The private key of the device, in case it is generated by Scaleway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "crt",
                        "key"
                    ]
                }
            }
        },
        "scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters": {
            "properties": {
                "publish": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFiltersPublish:IotDeviceMessageFiltersPublish",
                    "description": "Rules used to restrict topics the device can publish to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscribe": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFiltersSubscribe:IotDeviceMessageFiltersSubscribe",
                    "description": "Rules used to restrict topics the device can subscribe to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/IotDeviceMessageFiltersPublish:IotDeviceMessageFiltersPublish": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Same as publish rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Same as publish rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/IotDeviceMessageFiltersSubscribe:IotDeviceMessageFiltersSubscribe": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Same as publish rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Same as publish rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/IotRouteDatabase:IotRouteDatabase": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "query": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "dbname",
                "host",
                "password",
                "port",
                "query",
                "username"
            ]
        },
        "scaleway:index/IotRouteRest:IotRouteRest": {
            "properties": {
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "uri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "verb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "headers",
                "uri",
                "verb"
            ]
        },
        "scaleway:index/IotRouteS3:IotRouteS3": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "bucketRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "objectPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "bucketRegion",
                "strategy"
            ]
        },
        "scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Set to `true` to enable Kubernetes patch version auto upgrades.\n\u003e **Important:** When enabling auto upgrades, the `version` field take a minor version like x.y (ie 1.18).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowDay": {
                    "type": "string",
                    "description": "The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowStartHour": {
                    "type": "integer",
                    "description": "The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enable",
                "maintenanceWindowDay",
                "maintenanceWindowStartHour"
            ]
        },
        "scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig": {
            "properties": {
                "balanceSimilarNodeGroups": {
                    "type": "boolean",
                    "description": "Detect similar node groups and balance the number of nodes between them.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableScaleDown": {
                    "type": "boolean",
                    "description": "Disables the scale down feature of the autoscaler.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "estimator": {
                    "type": "string",
                    "description": "Type of resource estimator to be used in scale up.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expander": {
                    "type": "string",
                    "description": "Type of node group expander to be used in scale up.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expendablePodsPriorityCutoff": {
                    "type": "integer",
                    "description": "Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonsetsUtilization": {
                    "type": "boolean",
                    "description": "Ignore DaemonSet pods when calculating resource utilization for scaling down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxGracefulTerminationSec": {
                    "type": "integer",
                    "description": "Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownDelayAfterAdd": {
                    "type": "string",
                    "description": "How long after scale up that scale down evaluation resumes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownUnneededTime": {
                    "type": "string",
                    "description": "How long a node should be unneeded before it is eligible for scale down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownUtilizationThreshold": {
                    "type": "number",
                    "description": "Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/KubernetesClusterKubeconfig:KubernetesClusterKubeconfig": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "The CA certificate of the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configFile": {
                    "type": "string",
                    "description": "The raw kubeconfig file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "The token to connect to the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCaCertificate",
                        "configFile",
                        "host",
                        "token"
                    ]
                }
            }
        },
        "scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "A client id that all tokens must be issued for\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "JWT claim to use as the user's group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsPrefix": {
                    "type": "string",
                    "description": "Prefix prepended to group claims\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "URL of the provider which allows the API server to discover public signing keys\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Multiple key=value pairs that describes a required claim in the ID Token\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameClaim": {
                    "type": "string",
                    "description": "JWT claim to use as the user name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernamePrefix": {
                    "type": "string",
                    "description": "Prefix prepended to username\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "issuerUrl"
            ]
        },
        "scaleway:index/KubernetesNodePoolNode:KubernetesNodePoolNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIpV6": {
                    "type": "string",
                    "description": "The public IPv6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "publicIp",
                        "publicIpV6",
                        "status"
                    ]
                }
            }
        },
        "scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "The maximum number of nodes to be created during the upgrade\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "The maximum number of nodes that can be not ready at the same time\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for HC requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for HC requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp": {
            "type": "object"
        },
        "scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate": {
            "properties": {
                "certificateChain": {
                    "type": "string",
                    "description": "Full PEM-formatted certificate chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateChain"
            ]
        },
        "scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "Main domain of the certificate. A new certificate will be created if this field is changed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of alternative domain names.  A new certificate will be created if this field is changed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "commonName"
            ]
        },
        "scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl": {
            "properties": {
                "action": {
                    "$ref": "#/types/scaleway:index/LoadbalancerFrontendAclAction:LoadbalancerFrontendAclAction",
                    "description": "Action to undertake when an ACL filter matches.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "match": {
                    "$ref": "#/types/scaleway:index/LoadbalancerFrontendAclMatch:LoadbalancerFrontendAclMatch",
                    "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "match"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "match",
                        "name"
                    ]
                }
            }
        },
        "scaleway:index/LoadbalancerFrontendAclAction:LoadbalancerFrontendAclAction": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The action type. Possible values are: `allow` or `deny`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:index/LoadbalancerFrontendAclMatch:LoadbalancerFrontendAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "description": "The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.\nIt extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).\nPossible values are: `acl_http_filter_none`, `path_begin`, `path_end`, `http_header_match` or `regex`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpFilterOption": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of possible values to match for the given HTTP filter.\nKeep in mind that in the case of `http_header_match` the HTTP header field name is case-insensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "invert": {
                    "type": "boolean",
                    "description": "If set to `true`, the condition will be of type \"unless\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs or CIDR v4/v6 addresses of the client of the session to match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork": {
            "properties": {
                "dhcpConfig": {
                    "type": "boolean",
                    "description": "(Optional) Set to true if you want to let DHCP assign IP addresses. See below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "(Required) The ID of the Private Network to associate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticConfigs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) Define two local ip address of your choice for each load balancer instance. See below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "privateNetworkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateNetworkId",
                        "status",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy": {
            "properties": {
                "grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicyGrant:ObjectBucketAclAccessControlPolicyGrant"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicyOwner:ObjectBucketAclAccessControlPolicyOwner",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicyGrant:ObjectBucketAclAccessControlPolicyGrant": {
            "properties": {
                "grantee": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicyGrantGrantee:ObjectBucketAclAccessControlPolicyGrantGrantee",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicyGrantGrantee:ObjectBucketAclAccessControlPolicyGrantGrantee": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The `region`,`bucket` and `acl` separated by (`/`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "id",
                        "type"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicyOwner:ObjectBucketAclAccessControlPolicyOwner": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The `region`,`bucket` and `acl` separated by (`/`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "id"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule": {
            "properties": {
                "allowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAgeSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedMethods",
                "allowedOrigins"
            ]
        },
        "scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule": {
            "properties": {
                "abortIncompleteMultipartUploadDays": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiration": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRuleExpiration:ObjectBucketLifecycleRuleExpiration",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique name of the bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of tags (key / value) for the bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRuleTransition:ObjectBucketLifecycleRuleTransition"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "id"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketLifecycleRuleExpiration:ObjectBucketLifecycleRuleExpiration": {
            "properties": {
                "days": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "days"
            ]
        },
        "scaleway:index/ObjectBucketLifecycleRuleTransition:ObjectBucketLifecycleRuleTransition": {
            "properties": {
                "days": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageClass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "storageClass"
            ]
        },
        "scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule": {
            "properties": {
                "defaultRetention": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRuleDefaultRetention:ObjectBucketLockConfigurationRuleDefaultRetention",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultRetention"
            ]
        },
        "scaleway:index/ObjectBucketLockConfigurationRuleDefaultRetention:ObjectBucketLockConfigurationRuleDefaultRetention": {
            "properties": {
                "days": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "years": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument": {
            "properties": {
                "suffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "suffix"
            ]
        },
        "scaleway:index/RedisClusterAcl:RedisClusterAcl": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A text describing this rule. Default description: `Allow IP`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The UUID of the private network resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "id",
                        "ip"
                    ]
                }
            }
        },
        "scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The UUID of the private network resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Endpoint IPv4 addresses in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at least one IP per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Redis Cluster should be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "serviceIps"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "id",
                        "serviceIps",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The UUID of the private network resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ips",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/getBaremetalOfferCpu:getBaremetalOfferCpu": {
            "properties": {
                "coreCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequency": {
                    "type": "integer",
                    "description": "Frequency of the memory in MHz.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "coreCount",
                "frequency",
                "name",
                "threadCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalOfferDisk:getBaremetalOfferDisk": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of memory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalOfferMemory:getBaremetalOfferMemory": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequency": {
                    "type": "integer",
                    "description": "Frequency of the memory in MHz.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEcc": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of memory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "frequency",
                "isEcc",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerIp:getBaremetalServerIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverse": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "reverse",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseAclAclRule:getDatabaseAclAclRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A simple text describing this rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstanceLoadBalancer:getDatabaseInstanceLoadBalancer": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "hostname",
                "ip",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstancePrivateNetwork:getDatabaseInstancePrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipNet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pnId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "hostname",
                "ip",
                "ipNet",
                "name",
                "pnId",
                "port",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstanceReadReplica:getDatabaseInstanceReadReplica": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordGeoIp:getDomainRecordGeoIp": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getDomainRecordGeoIpMatch:getDomainRecordGeoIpMatch"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "matches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordGeoIpMatch:getDomainRecordGeoIpMatch": {
            "properties": {
                "continents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\nCannot be used with `record_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "continents",
                "countries",
                "data"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordHttpService:getDomainRecordHttpService": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mustContain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAgent": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ips",
                "mustContain",
                "strategy",
                "url",
                "userAgent"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordView:getDomainRecordView": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\nCannot be used with `record_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data",
                "subnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordWeighted:getDomainRecordWeighted": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerPrivateNetwork:getInstanceServerPrivateNetwork": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pnId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server exists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "macAddress",
                "pnId",
                "status",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerRootVolume:getInstanceServerRootVolume": {
            "properties": {
                "boot": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Forces deletion of the root volume on instance termination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The server name. Only one of `name` and `server_id` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "Size of the root volume in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID of the root volume of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "boot",
                "deleteOnTermination",
                "name",
                "sizeInGb",
                "volumeId",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServersServer:getInstanceServersServer": {
            "properties": {
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The server name used as filter. Servers with a name like it are listed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementGroupPolicyRespected": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Scaleway internal IP address of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the server is associated with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4 address of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags used as filter. Servers with these exact tags are listed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which servers exist.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bootType",
                "bootscriptId",
                "enableDynamicIp",
                "enableIpv6",
                "id",
                "image",
                "ipv6Address",
                "ipv6Gateway",
                "ipv6PrefixLength",
                "name",
                "organizationId",
                "placementGroupId",
                "placementGroupPolicyRespected",
                "privateIp",
                "projectId",
                "publicIp",
                "securityGroupId",
                "state",
                "tags",
                "type",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSnapshotImport:getInstanceSnapshotImport": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceCertificate:getIotDeviceCertificate": {
            "properties": {
                "crt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "crt",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceMessageFilter:getIotDeviceMessageFilter": {
            "properties": {
                "publishes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getIotDeviceMessageFilterPublish:getIotDeviceMessageFilterPublish"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscribes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getIotDeviceMessageFilterSubscribe:getIotDeviceMessageFilterSubscribe"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "publishes",
                "subscribes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceMessageFilterPublish:getIotDeviceMessageFilterPublish": {
            "properties": {
                "policy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "policy",
                "topics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceMessageFilterSubscribe:getIotDeviceMessageFilterSubscribe": {
            "properties": {
                "policy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "policy",
                "topics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterAutoUpgrade:getKubernetesClusterAutoUpgrade": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "True if Kubernetes patch version auto upgrades is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowDay": {
                    "type": "string",
                    "description": "The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowStartHour": {
                    "type": "integer",
                    "description": "The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enable",
                "maintenanceWindowDay",
                "maintenanceWindowStartHour"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterAutoscalerConfig:getKubernetesClusterAutoscalerConfig": {
            "properties": {
                "balanceSimilarNodeGroups": {
                    "type": "boolean",
                    "description": "True if detecting similar node groups and balance the number of nodes between them is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableScaleDown": {
                    "type": "boolean",
                    "description": "True if the scale down feature of the autoscaler is disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "estimator": {
                    "type": "string",
                    "description": "The type of resource estimator used in scale up.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expander": {
                    "type": "string",
                    "description": "The type of node group expander be used in scale up.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expendablePodsPriorityCutoff": {
                    "type": "integer",
                    "description": "Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonsetsUtilization": {
                    "type": "boolean",
                    "description": "True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxGracefulTerminationSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownDelayAfterAdd": {
                    "type": "string",
                    "description": "The duration after scale up that scale down evaluation resumes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownUnneededTime": {
                    "type": "string",
                    "description": "The duration a node should be unneeded before it is eligible for scale down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownUtilizationThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "balanceSimilarNodeGroups",
                "disableScaleDown",
                "estimator",
                "expander",
                "expendablePodsPriorityCutoff",
                "ignoreDaemonsetsUtilization",
                "maxGracefulTerminationSec",
                "scaleDownDelayAfterAdd",
                "scaleDownUnneededTime",
                "scaleDownUtilizationThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterKubeconfig:getKubernetesClusterKubeconfig": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "The CA certificate of the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configFile": {
                    "type": "string",
                    "description": "The raw kubeconfig file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "The token to connect to the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterCaCertificate",
                "configFile",
                "host",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterOpenIdConnectConfig:getKubernetesClusterOpenIdConnectConfig": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuerUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameClaim": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernamePrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "groupsClaims",
                "groupsPrefix",
                "issuerUrl",
                "requiredClaims",
                "usernameClaim",
                "usernamePrefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesNodePoolNode:getKubernetesNodePoolNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The pool name. Only one of `name` and `pool_id` should be specified. `cluster_id` should be specified with `name`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIpV6": {
                    "type": "string",
                    "description": "The public IPv6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "publicIp",
                "publicIpV6",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesNodePoolUpgradePolicy:getKubernetesNodePoolUpgradePolicy": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxSurge",
                "maxUnavailable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLoadbalancerCertificateCustomCertificate:getLoadbalancerCertificateCustomCertificate": {
            "properties": {
                "certificateChain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateChain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLoadbalancerCertificateLetsencrypt:getLoadbalancerCertificateLetsencrypt": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonName",
                "subjectAlternativeNames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLoadbalancerPrivateNetwork:getLoadbalancerPrivateNetwork": {
            "properties": {
                "dhcpConfig": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateNetworkId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticConfigs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the LB exists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dhcpConfig",
                "privateNetworkId",
                "staticConfigs",
                "status",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketCorsRule:getObjectBucketCorsRule": {
            "properties": {
                "allowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAgeSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedHeaders",
                "allowedMethods",
                "allowedOrigins",
                "exposeHeaders",
                "maxAgeSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketLifecycleRule:getObjectBucketLifecycleRule": {
            "properties": {
                "abortIncompleteMultipartUploadDays": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getObjectBucketLifecycleRuleExpiration:getObjectBucketLifecycleRuleExpiration"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique name of the bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getObjectBucketLifecycleRuleTransition:getObjectBucketLifecycleRuleTransition"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "abortIncompleteMultipartUploadDays",
                "enabled",
                "expirations",
                "id",
                "prefix",
                "tags",
                "transitions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketLifecycleRuleExpiration:getObjectBucketLifecycleRuleExpiration": {
            "properties": {
                "days": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "days"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketLifecycleRuleTransition:getObjectBucketLifecycleRuleTransition": {
            "properties": {
                "days": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageClass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "days",
                "storageClass"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketVersioning:getObjectBucketVersioning": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRedisClusterAcl:getRedisClusterAcl": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRedisClusterPrivateNetwork:getRedisClusterPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`region`) The zone in which the server exists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "id",
                "serviceIps",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRedisClusterPublicNetwork:getRedisClusterPublicNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "ips",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the scaleway package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n"
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n"
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "willReplaceOnChanges": true
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n"
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "willReplaceOnChanges": true
            }
        },
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_PROJECT_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                },
                "willReplaceOnChanges": true
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                }
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                },
                "willReplaceOnChanges": true
            }
        }
    },
    "resources": {
        "scaleway:index/accountSshKey:AccountSshKey": {
            "description": "Manages user SSH keys to access servers provisioned on Scaleway.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.AccountSshKey(\"main\", {\n    publicKey: \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.AccountSshKey(\"main\", public_key=\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.AccountSshKey(\"main\", new()\n    {\n        PublicKey = \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewAccountSshKey(ctx, \"main\", \u0026scaleway.AccountSshKeyArgs{\n\t\t\tPublicKey: pulumi.String(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountSshKey;\nimport com.pulumi.scaleway.AccountSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new AccountSshKey(\"main\", AccountSshKeyArgs.builder()        \n            .publicKey(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:AccountSshKey\n    properties:\n      publicKey: \u003cYOUR-PUBLIC-SSH-KEY\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSH keys can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/accountSshKey:AccountSshKey main 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the SSH key is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is associated with.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "publicKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountSshKey resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the SSH key is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public SSH key to be added.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/appleSliconValleyServer:AppleSliconValleyServer": {
            "description": "Creates and manages Scaleway Apple silicon M1. For more information,\nsee [the documentation](https://www.scaleway.com/en/docs/compute/apple-silicon/concepts).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst server = new scaleway.AppleSliconValleyServer(\"server\", {\n    type: \"M1-M\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nserver = scaleway.AppleSliconValleyServer(\"server\", type=\"M1-M\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var server = new Scaleway.AppleSliconValleyServer(\"server\", new()\n    {\n        Type = \"M1-M\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewAppleSliconValleyServer(ctx, \"server\", \u0026scaleway.AppleSliconValleyServerArgs{\n\t\t\tType: pulumi.String(\"M1-M\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AppleSliconValleyServer;\nimport com.pulumi.scaleway.AppleSliconValleyServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var server = new AppleSliconValleyServer(\"server\", AppleSliconValleyServerArgs.builder()        \n            .type(\"M1-M\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: scaleway:AppleSliconValleyServer\n    properties:\n      type: M1-M\n```\n\n\n## Import\n\nInstance servers can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/appleSliconValleyServer:AppleSliconValleyServer server fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Apple Silicon server.\n"
                },
                "deletableAt": {
                    "type": "string",
                    "description": "The minimal date and time on which you can delete this server due to Apple licence\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the server (IPv4 address).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is\nassociated with.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Check the possible values on\nour [sdk](https://github.com/scaleway/scaleway-sdk-go/blob/master/api/applesilicon/v1alpha1/applesilicon_sdk.go#L103).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server. You find all the available types on\nthe [pricing page](https://www.scaleway.com/en/pricing/#apple-silicon). Updates to this field will recreate a new\nresource.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Apple Silicon server.\n"
                },
                "vncUrl": {
                    "type": "string",
                    "description": "URL of the VNC.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe server should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "deletableAt",
                "ip",
                "name",
                "organizationId",
                "projectId",
                "state",
                "type",
                "updatedAt",
                "vncUrl",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is\nassociated with.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server. You find all the available types on\nthe [pricing page](https://www.scaleway.com/en/pricing/#apple-silicon). Updates to this field will recreate a new\nresource.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppleSliconValleyServer resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Apple Silicon server.\n"
                    },
                    "deletableAt": {
                        "type": "string",
                        "description": "The minimal date and time on which you can delete this server due to Apple licence\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IPv4 address of the server (IPv4 address).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is\nassociated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server. Check the possible values on\nour [sdk](https://github.com/scaleway/scaleway-sdk-go/blob/master/api/applesilicon/v1alpha1/applesilicon_sdk.go#L103).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The commercial type of the server. You find all the available types on\nthe [pricing page](https://www.scaleway.com/en/pricing/#apple-silicon). Updates to this field will recreate a new\nresource.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Apple Silicon server.\n"
                    },
                    "vncUrl": {
                        "type": "string",
                        "description": "URL of the VNC.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe server should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/baremetalServer:BaremetalServer": {
            "description": "Creates and manages Scaleway Compute Baremetal servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getAccountSshKey({\n    name: \"main\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: \"GP-BM1-S\",\n    os: \"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n    sshKeyIds: [main.then(main =\u003e main.id)],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_account_ssh_key(name=\"main\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=\"GP-BM1-S\",\n    os=\"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n    ssh_key_ids=[main.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetAccountSshKey.Invoke(new()\n    {\n        Name = \"main\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = \"GP-BM1-S\",\n        Os = \"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n        SshKeyIds = new[]\n        {\n            main.Apply(getAccountSshKeyResult =\u003e getAccountSshKeyResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.LookupAccountSshKey(ctx, \u0026GetAccountSshKeyArgs{\n\t\t\tName: pulumi.StringRef(\"main\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:  pulumi.String(\"fr-par-2\"),\n\t\t\tOffer: pulumi.String(\"GP-BM1-S\"),\n\t\t\tOs:    pulumi.String(\"d17d6872-0412-45d9-a198-af82c34d3c5c\"),\n\t\t\tSshKeyIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(main.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountSshKeyArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getAccountSshKey(GetAccountSshKeyArgs.builder()\n            .name(\"main\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()        \n            .zone(\"fr-par-2\")\n            .offer(\"GP-BM1-S\")\n            .os(\"d17d6872-0412-45d9-a198-af82c34d3c5c\")\n            .sshKeyIds(main.applyValue(getAccountSshKeyResult -\u003e getAccountSshKeyResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: GP-BM1-S\n      os: d17d6872-0412-45d9-a198-af82c34d3c5c\n      sshKeyIds:\n        - ${main.id}\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getAccountSshKey\n      Arguments:\n        name: main\n```\n\n\n## Import\n\nBaremetal servers can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/baremetalServer:BaremetalServer web fr-par-2/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the server.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the server.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the server.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerIp:BaremetalServerIp"
                    },
                    "description": "(List of) The IPs of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "offer": {
                    "type": "string",
                    "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.\n"
                },
                "offerId": {
                    "type": "string",
                    "description": "The ID of the offer.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                },
                "osId": {
                    "type": "string",
                    "description": "The ID of the os.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used for the installation. May be required depending on used os.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "reinstallOnConfigChanges": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to reinstall the server on install config changes.\n\u003e **Important:** Updates to `ssh_key_ids`, `user`, `password`, `service_user` or `service_password` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.\n"
                },
                "servicePassword": {
                    "type": "string",
                    "description": "Password used for the service to install. May be required depending on used os.\n",
                    "secret": true
                },
                "serviceUser": {
                    "type": "string",
                    "description": "User used for the service to install.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH keys allowed to connect to the server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used for the installation.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "required": [
                "domain",
                "ips",
                "name",
                "offer",
                "offerId",
                "organizationId",
                "os",
                "osId",
                "projectId",
                "serviceUser",
                "sshKeyIds",
                "user",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the server.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "offer": {
                    "type": "string",
                    "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.\n",
                    "willReplaceOnChanges": true
                },
                "os": {
                    "type": "string",
                    "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used for the installation. May be required depending on used os.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "reinstallOnConfigChanges": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to reinstall the server on install config changes.\n\u003e **Important:** Updates to `ssh_key_ids`, `user`, `password`, `service_user` or `service_password` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.\n"
                },
                "servicePassword": {
                    "type": "string",
                    "description": "Password used for the service to install. May be required depending on used os.\n",
                    "secret": true
                },
                "serviceUser": {
                    "type": "string",
                    "description": "User used for the service to install.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH keys allowed to connect to the server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used for the installation.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "offer",
                "os",
                "sshKeyIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BaremetalServer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the server.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the server.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the server.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerIp:BaremetalServerIp"
                        },
                        "description": "(List of) The IPs of the server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "offer": {
                        "type": "string",
                        "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.\n",
                        "willReplaceOnChanges": true
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The ID of the offer.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                    },
                    "osId": {
                        "type": "string",
                        "description": "The ID of the os.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used for the installation. May be required depending on used os.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "reinstallOnConfigChanges": {
                        "type": "boolean",
                        "description": "If True, this boolean allows to reinstall the server on install config changes.\n\u003e **Important:** Updates to `ssh_key_ids`, `user`, `password`, `service_user` or `service_password` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.\n"
                    },
                    "servicePassword": {
                        "type": "string",
                        "description": "Password used for the service to install. May be required depending on used os.\n",
                        "secret": true
                    },
                    "serviceUser": {
                        "type": "string",
                        "description": "User used for the service to install.\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SSH keys allowed to connect to the server.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "User used for the installation.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/container:Container": {
            "description": "Creates and manages Scaleway Container.\n\nFor more information consult the [documentation](https://www.scaleway.com/en/docs/faq/serverless-containers/).\n\nFor more details about the limitation check [containers-limitations](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/).\n\nYou can check also our [containers guide](https://www.scaleway.com/en/docs/compute/containers/concepts/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainContainerNamespace = new scaleway.ContainerNamespace(\"mainContainerNamespace\", {description: \"test container\"});\nconst mainContainer = new scaleway.Container(\"mainContainer\", {\n    description: \"environment variables test\",\n    namespaceId: mainContainerNamespace.id,\n    registryImage: pulumi.interpolate`${mainContainerNamespace.registryEndpoint}/alpine:test`,\n    port: 9997,\n    cpuLimit: 140,\n    memoryLimit: 256,\n    minScale: 3,\n    maxScale: 5,\n    timeout: 600,\n    maxConcurrency: 80,\n    privacy: \"private\",\n    protocol: \"h2c\",\n    deploy: true,\n    environmentVariables: {\n        foo: \"var\",\n    },\n    secretEnvironmentVariables: {\n        key: \"secret\",\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_container_namespace = scaleway.ContainerNamespace(\"mainContainerNamespace\", description=\"test container\")\nmain_container = scaleway.Container(\"mainContainer\",\n    description=\"environment variables test\",\n    namespace_id=main_container_namespace.id,\n    registry_image=main_container_namespace.registry_endpoint.apply(lambda registry_endpoint: f\"{registry_endpoint}/alpine:test\"),\n    port=9997,\n    cpu_limit=140,\n    memory_limit=256,\n    min_scale=3,\n    max_scale=5,\n    timeout=600,\n    max_concurrency=80,\n    privacy=\"private\",\n    protocol=\"h2c\",\n    deploy=True,\n    environment_variables={\n        \"foo\": \"var\",\n    },\n    secret_environment_variables={\n        \"key\": \"secret\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainContainerNamespace = new Scaleway.ContainerNamespace(\"mainContainerNamespace\", new()\n    {\n        Description = \"test container\",\n    });\n\n    var mainContainer = new Scaleway.Container(\"mainContainer\", new()\n    {\n        Description = \"environment variables test\",\n        NamespaceId = mainContainerNamespace.Id,\n        RegistryImage = mainContainerNamespace.RegistryEndpoint.Apply(registryEndpoint =\u003e $\"{registryEndpoint}/alpine:test\"),\n        Port = 9997,\n        CpuLimit = 140,\n        MemoryLimit = 256,\n        MinScale = 3,\n        MaxScale = 5,\n        Timeout = 600,\n        MaxConcurrency = 80,\n        Privacy = \"private\",\n        Protocol = \"h2c\",\n        Deploy = true,\n        EnvironmentVariables = \n        {\n            { \"foo\", \"var\" },\n        },\n        SecretEnvironmentVariables = \n        {\n            { \"key\", \"secret\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainContainerNamespace, err := scaleway.NewContainerNamespace(ctx, \"mainContainerNamespace\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"test container\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainer(ctx, \"mainContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tDescription: pulumi.String(\"environment variables test\"),\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t\tRegistryImage: mainContainerNamespace.RegistryEndpoint.ApplyT(func(registryEndpoint string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v/alpine:test\", registryEndpoint), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPort:           pulumi.Int(9997),\n\t\t\tCpuLimit:       pulumi.Int(140),\n\t\t\tMemoryLimit:    pulumi.Int(256),\n\t\t\tMinScale:       pulumi.Int(3),\n\t\t\tMaxScale:       pulumi.Int(5),\n\t\t\tTimeout:        pulumi.Int(600),\n\t\t\tMaxConcurrency: pulumi.Int(80),\n\t\t\tPrivacy:        pulumi.String(\"private\"),\n\t\t\tProtocol:       pulumi.String(\"h2c\"),\n\t\t\tDeploy:         pulumi.Bool(true),\n\t\t\tEnvironmentVariables: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"var\"),\n\t\t\t},\n\t\t\tSecretEnvironmentVariables: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"secret\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainContainerNamespace = new ContainerNamespace(\"mainContainerNamespace\", ContainerNamespaceArgs.builder()        \n            .description(\"test container\")\n            .build());\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()        \n            .description(\"environment variables test\")\n            .namespaceId(mainContainerNamespace.id())\n            .registryImage(mainContainerNamespace.registryEndpoint().applyValue(registryEndpoint -\u003e String.format(\"%s/alpine:test\", registryEndpoint)))\n            .port(9997)\n            .cpuLimit(140)\n            .memoryLimit(256)\n            .minScale(3)\n            .maxScale(5)\n            .timeout(600)\n            .maxConcurrency(80)\n            .privacy(\"private\")\n            .protocol(\"h2c\")\n            .deploy(true)\n            .environmentVariables(Map.of(\"foo\", \"var\"))\n            .secretEnvironmentVariables(Map.of(\"key\", \"secret\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainContainerNamespace:\n    type: scaleway:ContainerNamespace\n    properties:\n      description: test container\n  mainContainer:\n    type: scaleway:Container\n    properties:\n      description: environment variables test\n      namespaceId: ${mainContainerNamespace.id}\n      registryImage: ${mainContainerNamespace.registryEndpoint}/alpine:test\n      port: 9997\n      cpuLimit: 140\n      memoryLimit: 256\n      minScale: 3\n      maxScale: 5\n      timeout: 600\n      maxConcurrency: 80\n      privacy: private\n      protocol: h2c\n      deploy: true\n      environmentVariables:\n        foo: var\n      secretEnvironmentVariables:\n        key: secret\n```\n{{% /example %}}\n{{% /examples %}}\n## Protocols\n\nThe supported protocols are:\n\n* `h2c`: HTTP/2 over TCP.\n* `http1`: Hypertext Transfer Protocol.\n\n**Important:** For details about the protocols check [this](https://httpd.apache.org/docs/2.4/howto/http2.html)\n\n## Privacy\n\nBy default, creating a container will make it `public`, meaning that anybody knowing the endpoint could execute it.\nA container can be made `private` with the privacy parameter.\n\nPlease check our [authentication](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) section\n\n## Memory and vCPUs configuration\n\nThe vCPU represents a portion or share of the underlying, physical CPU that is assigned to a particular virtual machine (VM).\n\nYou may decide how much computing resources to allocate to each container.\nThe `memory_limit` (in MB) must correspond with the right amount of vCPU.\n\n**Important:** The right choice for your container's resources is very important, as you will be billed based on compute usage over time and the number of Containers executions.\n\nPlease check our [price](https://www.scaleway.com/en/docs/faq/serverless-containers/#prices) section for more details.\n\n| Memory (in MB) | vCPU |\n|----------------|------|\n| 128            | 70m  |\n| 256            | 140m |\n| 512            | 280m |\n| 1024           | 560m |\n\n**Note:** 560mCPU accounts roughly for half of one CPU power of a Scaleway General Purpose instance\n\n\n## Import\n\nContainer can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/container:Container main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "cpuLimit": {
                    "type": "integer",
                    "description": "The amount of vCPU computing resources to allocate to each container. Defaults to 70.\n"
                },
                "cronStatus": {
                    "type": "string",
                    "description": "The cron status of the container.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Boolean controlling whether the container is on a production environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the container.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The native domain name of the container\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "The error message of the container.\n"
                },
                "maxConcurrency": {
                    "type": "integer",
                    "description": "The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum of number of instances this container can scale to. Default to 20.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory computing resources in MB to allocate to each container. Defaults to 128.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum of running container instances continuously. Defaults to 0.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container name.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The container namespace ID of the container.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to expose the container. Defaults to 8080.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the container was created.\n"
                },
                "registryImage": {
                    "type": "string",
                    "description": "The registry image address. e.g: **\"rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE\"**.\n"
                },
                "registrySha256": {
                    "type": "string",
                    "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the container.\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "The container status.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.\n"
                }
            },
            "required": [
                "cpuLimit",
                "cronStatus",
                "domainName",
                "environmentVariables",
                "errorMessage",
                "maxConcurrency",
                "maxScale",
                "memoryLimit",
                "minScale",
                "name",
                "namespaceId",
                "port",
                "region",
                "registryImage",
                "status",
                "timeout"
            ],
            "inputProperties": {
                "cpuLimit": {
                    "type": "integer",
                    "description": "The amount of vCPU computing resources to allocate to each container. Defaults to 70.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Boolean controlling whether the container is on a production environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the container.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.\n"
                },
                "maxConcurrency": {
                    "type": "integer",
                    "description": "The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum of number of instances this container can scale to. Default to 20.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory computing resources in MB to allocate to each container. Defaults to 128.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum of running container instances continuously. Defaults to 0.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container name.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The container namespace ID of the container.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to expose the container. Defaults to 8080.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.\n"
                },
                "registryImage": {
                    "type": "string",
                    "description": "The registry image address. e.g: **\"rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE\"**.\n"
                },
                "registrySha256": {
                    "type": "string",
                    "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the container.\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "The container status.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.\n"
                }
            },
            "requiredInputs": [
                "namespaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Container resources.\n",
                "properties": {
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The amount of vCPU computing resources to allocate to each container. Defaults to 70.\n"
                    },
                    "cronStatus": {
                        "type": "string",
                        "description": "The cron status of the container.\n"
                    },
                    "deploy": {
                        "type": "boolean",
                        "description": "Boolean controlling whether the container is on a production environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the container.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The native domain name of the container\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "The error message of the container.\n"
                    },
                    "maxConcurrency": {
                        "type": "integer",
                        "description": "The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.\n"
                    },
                    "maxScale": {
                        "type": "integer",
                        "description": "The maximum of number of instances this container can scale to. Default to 20.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The memory computing resources in MB to allocate to each container. Defaults to 128.\n"
                    },
                    "minScale": {
                        "type": "integer",
                        "description": "The minimum of running container instances continuously. Defaults to 0.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the container name.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The container namespace ID of the container.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port to expose the container. Defaults to 8080.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the container was created.\n"
                    },
                    "registryImage": {
                        "type": "string",
                        "description": "The registry image address. e.g: **\"rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE\"**.\n"
                    },
                    "registrySha256": {
                        "type": "string",
                        "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the container.\n",
                        "secret": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The container status.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerCron:ContainerCron": {
            "description": "Creates and manages Scaleway Container Triggers. For the moment, the feature is limited to CRON Schedule (time-based).\n\nFor more information consult\nthe [documentation](https://www.scaleway.com/en/docs/compute/containers/api-cli/cont-uploading-with-serverless-framework/#configuring-events)\n.\n\nFor more details about the limitation\ncheck [containers-limitations](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/)\n.\n\nYou can check also\nour [containers cron api documentation](https://developers.scaleway.com/en/products/containers/api/#crons-942bf4).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainContainerNamespace = new scaleway.ContainerNamespace(\"mainContainerNamespace\", {});\nconst mainContainer = new scaleway.Container(\"mainContainer\", {namespaceId: mainContainerNamespace.id});\nconst mainContainerCron = new scaleway.ContainerCron(\"mainContainerCron\", {\n    containerId: mainContainer.id,\n    schedule: \"5 4 1 * *\",\n    args: JSON.stringify({\n        address: {\n            city: \"Paris\",\n            country: \"FR\",\n        },\n        age: 23,\n        firstName: \"John\",\n        isAlive: true,\n        lastName: \"Smith\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_container_namespace = scaleway.ContainerNamespace(\"mainContainerNamespace\")\nmain_container = scaleway.Container(\"mainContainer\", namespace_id=main_container_namespace.id)\nmain_container_cron = scaleway.ContainerCron(\"mainContainerCron\",\n    container_id=main_container.id,\n    schedule=\"5 4 1 * *\",\n    args=json.dumps({\n        \"address\": {\n            \"city\": \"Paris\",\n            \"country\": \"FR\",\n        },\n        \"age\": 23,\n        \"firstName\": \"John\",\n        \"isAlive\": True,\n        \"lastName\": \"Smith\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainContainerNamespace = new Scaleway.ContainerNamespace(\"mainContainerNamespace\");\n\n    var mainContainer = new Scaleway.Container(\"mainContainer\", new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n    });\n\n    var mainContainerCron = new Scaleway.ContainerCron(\"mainContainerCron\", new()\n    {\n        ContainerId = mainContainer.Id,\n        Schedule = \"5 4 1 * *\",\n        Args = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"address\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"city\"] = \"Paris\",\n                [\"country\"] = \"FR\",\n            },\n            [\"age\"] = 23,\n            [\"firstName\"] = \"John\",\n            [\"isAlive\"] = true,\n            [\"lastName\"] = \"Smith\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainContainerNamespace, err := scaleway.NewContainerNamespace(ctx, \"mainContainerNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainContainer, err := scaleway.NewContainer(ctx, \"mainContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"address\": map[string]interface{}{\n\t\t\t\t\"city\":    \"Paris\",\n\t\t\t\t\"country\": \"FR\",\n\t\t\t},\n\t\t\t\"age\":       23,\n\t\t\t\"firstName\": \"John\",\n\t\t\t\"isAlive\":   true,\n\t\t\t\"lastName\":  \"Smith\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = scaleway.NewContainerCron(ctx, \"mainContainerCron\", \u0026scaleway.ContainerCronArgs{\n\t\t\tContainerId: mainContainer.ID(),\n\t\t\tSchedule:    pulumi.String(\"5 4 1 * *\"),\n\t\t\tArgs:        pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.ContainerCron;\nimport com.pulumi.scaleway.ContainerCronArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainContainerNamespace = new ContainerNamespace(\"mainContainerNamespace\");\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()        \n            .namespaceId(mainContainerNamespace.id())\n            .build());\n\n        var mainContainerCron = new ContainerCron(\"mainContainerCron\", ContainerCronArgs.builder()        \n            .containerId(mainContainer.id())\n            .schedule(\"5 4 1 * *\")\n            .args(serializeJson(\n                jsonObject(\n                    jsonProperty(\"address\", jsonObject(\n                        jsonProperty(\"city\", \"Paris\"),\n                        jsonProperty(\"country\", \"FR\")\n                    )),\n                    jsonProperty(\"age\", 23),\n                    jsonProperty(\"firstName\", \"John\"),\n                    jsonProperty(\"isAlive\", true),\n                    jsonProperty(\"lastName\", \"Smith\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainContainerNamespace:\n    type: scaleway:ContainerNamespace\n  mainContainer:\n    type: scaleway:Container\n    properties:\n      namespaceId: ${mainContainerNamespace.id}\n  mainContainerCron:\n    type: scaleway:ContainerCron\n    properties:\n      containerId: ${mainContainer.id}\n      schedule: 5 4 1 * *\n      #cron at 04:05 on day-of-month 1\n      args:\n        fn::toJSON:\n          address:\n            city: Paris\n            country: FR\n          age: 23\n          firstName: John\n          isAlive: true\n          lastName: Smith\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nContainer Cron can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/containerCron:ContainerCron main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your container’s event object\nduring\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "The container ID to link with your cron.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region\nin where the job was created.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The cron status.\n"
                }
            },
            "required": [
                "args",
                "containerId",
                "region",
                "schedule",
                "status"
            ],
            "inputProperties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your container’s event object\nduring\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "The container ID to link with your cron.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                }
            },
            "requiredInputs": [
                "args",
                "containerId",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerCron resources.\n",
                "properties": {
                    "args": {
                        "type": "string",
                        "description": "The key-value mapping to define arguments that will be passed to your container’s event object\nduring\n"
                    },
                    "containerId": {
                        "type": "string",
                        "description": "The container ID to link with your cron.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region\nin where the job was created.\n"
                    },
                    "schedule": {
                        "type": "string",
                        "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The cron status.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerDomain:ContainerDomain": {
            "description": "Creates and manages Scaleway Container domain name bindings.\nYou can check our [containers guide](https://www.scaleway.com/en/docs/compute/containers/how-to/add-a-custom-domain-to-a-container/) for further information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Simple\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst appContainer = new scaleway.Container(\"appContainer\", {});\nconst appContainerDomain = new scaleway.ContainerDomain(\"appContainerDomain\", {\n    containerId: appContainer.id,\n    hostname: \"container.domain.tld\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\napp_container = scaleway.Container(\"appContainer\")\napp_container_domain = scaleway.ContainerDomain(\"appContainerDomain\",\n    container_id=app_container.id,\n    hostname=\"container.domain.tld\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var appContainer = new Scaleway.Container(\"appContainer\");\n\n    var appContainerDomain = new Scaleway.ContainerDomain(\"appContainerDomain\", new()\n    {\n        ContainerId = appContainer.Id,\n        Hostname = \"container.domain.tld\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tappContainer, err := scaleway.NewContainer(ctx, \"appContainer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerDomain(ctx, \"appContainerDomain\", \u0026scaleway.ContainerDomainArgs{\n\t\t\tContainerId: appContainer.ID(),\n\t\t\tHostname:    pulumi.String(\"container.domain.tld\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerDomain;\nimport com.pulumi.scaleway.ContainerDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var appContainer = new Container(\"appContainer\");\n\n        var appContainerDomain = new ContainerDomain(\"appContainerDomain\", ContainerDomainArgs.builder()        \n            .containerId(appContainer.id())\n            .hostname(\"container.domain.tld\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  appContainer:\n    type: scaleway:Container\n  appContainerDomain:\n    type: scaleway:ContainerDomain\n    properties:\n      containerId: ${appContainer.id}\n      hostname: container.domain.tld\n```\n{{% /example %}}\n{{% example %}}\n### Complete example with domain\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {description: \"test container\"});\nconst appContainer = new scaleway.Container(\"appContainer\", {\n    namespaceId: main.id,\n    registryImage: pulumi.interpolate`${main.registryEndpoint}/nginx:alpine`,\n    port: 80,\n    cpuLimit: 140,\n    memoryLimit: 256,\n    minScale: 1,\n    maxScale: 1,\n    timeout: 600,\n    maxConcurrency: 80,\n    privacy: \"public\",\n    protocol: \"h2c\",\n    deploy: true,\n});\nconst appDomainRecord = new scaleway.DomainRecord(\"appDomainRecord\", {\n    dnsZone: \"domain.tld\",\n    type: \"CNAME\",\n    data: pulumi.interpolate`${appContainer.domainName}.`,\n    ttl: 3600,\n});\nconst appContainerDomain = new scaleway.ContainerDomain(\"appContainerDomain\", {\n    containerId: appContainer.id,\n    hostname: pulumi.interpolate`${appDomainRecord.name}.${appDomainRecord.dnsZone}`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\", description=\"test container\")\napp_container = scaleway.Container(\"appContainer\",\n    namespace_id=main.id,\n    registry_image=main.registry_endpoint.apply(lambda registry_endpoint: f\"{registry_endpoint}/nginx:alpine\"),\n    port=80,\n    cpu_limit=140,\n    memory_limit=256,\n    min_scale=1,\n    max_scale=1,\n    timeout=600,\n    max_concurrency=80,\n    privacy=\"public\",\n    protocol=\"h2c\",\n    deploy=True)\napp_domain_record = scaleway.DomainRecord(\"appDomainRecord\",\n    dns_zone=\"domain.tld\",\n    type=\"CNAME\",\n    data=app_container.domain_name.apply(lambda domain_name: f\"{domain_name}.\"),\n    ttl=3600)\napp_container_domain = scaleway.ContainerDomain(\"appContainerDomain\",\n    container_id=app_container.id,\n    hostname=pulumi.Output.all(app_domain_record.name, app_domain_record.dns_zone).apply(lambda name, dns_zone: f\"{name}.{dns_zone}\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\", new()\n    {\n        Description = \"test container\",\n    });\n\n    var appContainer = new Scaleway.Container(\"appContainer\", new()\n    {\n        NamespaceId = main.Id,\n        RegistryImage = main.RegistryEndpoint.Apply(registryEndpoint =\u003e $\"{registryEndpoint}/nginx:alpine\"),\n        Port = 80,\n        CpuLimit = 140,\n        MemoryLimit = 256,\n        MinScale = 1,\n        MaxScale = 1,\n        Timeout = 600,\n        MaxConcurrency = 80,\n        Privacy = \"public\",\n        Protocol = \"h2c\",\n        Deploy = true,\n    });\n\n    var appDomainRecord = new Scaleway.DomainRecord(\"appDomainRecord\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Type = \"CNAME\",\n        Data = appContainer.DomainName.Apply(domainName =\u003e $\"{domainName}.\"),\n        Ttl = 3600,\n    });\n\n    var appContainerDomain = new Scaleway.ContainerDomain(\"appContainerDomain\", new()\n    {\n        ContainerId = appContainer.Id,\n        Hostname = Output.Tuple(appDomainRecord.Name, appDomainRecord.DnsZone).Apply(values =\u003e\n        {\n            var name = values.Item1;\n            var dnsZone = values.Item2;\n            return $\"{name}.{dnsZone}\";\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewContainerNamespace(ctx, \"main\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"test container\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tappContainer, err := scaleway.NewContainer(ctx, \"appContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tNamespaceId: main.ID(),\n\t\t\tRegistryImage: main.RegistryEndpoint.ApplyT(func(registryEndpoint string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v/nginx:alpine\", registryEndpoint), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPort:           pulumi.Int(80),\n\t\t\tCpuLimit:       pulumi.Int(140),\n\t\t\tMemoryLimit:    pulumi.Int(256),\n\t\t\tMinScale:       pulumi.Int(1),\n\t\t\tMaxScale:       pulumi.Int(1),\n\t\t\tTimeout:        pulumi.Int(600),\n\t\t\tMaxConcurrency: pulumi.Int(80),\n\t\t\tPrivacy:        pulumi.String(\"public\"),\n\t\t\tProtocol:       pulumi.String(\"h2c\"),\n\t\t\tDeploy:         pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tappDomainRecord, err := scaleway.NewDomainRecord(ctx, \"appDomainRecord\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tType:    pulumi.String(\"CNAME\"),\n\t\t\tData: appContainer.DomainName.ApplyT(func(domainName string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v.\", domainName), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTtl: pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerDomain(ctx, \"appContainerDomain\", \u0026scaleway.ContainerDomainArgs{\n\t\t\tContainerId: appContainer.ID(),\n\t\t\tHostname: pulumi.All(appDomainRecord.Name, appDomainRecord.DnsZone).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\tname := _args[0].(string)\n\t\t\t\tdnsZone := _args[1].(string)\n\t\t\t\treturn fmt.Sprintf(\"%v.%v\", name, dnsZone), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.ContainerDomain;\nimport com.pulumi.scaleway.ContainerDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\", ContainerNamespaceArgs.builder()        \n            .description(\"test container\")\n            .build());\n\n        var appContainer = new Container(\"appContainer\", ContainerArgs.builder()        \n            .namespaceId(main.id())\n            .registryImage(main.registryEndpoint().applyValue(registryEndpoint -\u003e String.format(\"%s/nginx:alpine\", registryEndpoint)))\n            .port(80)\n            .cpuLimit(140)\n            .memoryLimit(256)\n            .minScale(1)\n            .maxScale(1)\n            .timeout(600)\n            .maxConcurrency(80)\n            .privacy(\"public\")\n            .protocol(\"h2c\")\n            .deploy(true)\n            .build());\n\n        var appDomainRecord = new DomainRecord(\"appDomainRecord\", DomainRecordArgs.builder()        \n            .dnsZone(\"domain.tld\")\n            .type(\"CNAME\")\n            .data(appContainer.domainName().applyValue(domainName -\u003e String.format(\"%s.\", domainName)))\n            .ttl(3600)\n            .build());\n\n        var appContainerDomain = new ContainerDomain(\"appContainerDomain\", ContainerDomainArgs.builder()        \n            .containerId(appContainer.id())\n            .hostname(Output.tuple(appDomainRecord.name(), appDomainRecord.dnsZone()).applyValue(values -\u003e {\n                var name = values.t1;\n                var dnsZone = values.t2;\n                return String.format(\"%s.%s\", name,dnsZone);\n            }))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n    properties:\n      description: test container\n  appContainer:\n    type: scaleway:Container\n    properties:\n      namespaceId: ${main.id}\n      registryImage: ${main.registryEndpoint}/nginx:alpine\n      port: 80\n      cpuLimit: 140\n      memoryLimit: 256\n      minScale: 1\n      maxScale: 1\n      timeout: 600\n      maxConcurrency: 80\n      privacy: public\n      protocol: h2c\n      deploy: true\n  appDomainRecord:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: domain.tld\n      type: CNAME\n      data: ${appContainer.domainName}.\n      # Trailing dot is important in CNAME\n      ttl: 3600\n  appContainerDomain:\n    type: scaleway:ContainerDomain\n    properties:\n      containerId: ${appContainer.id}\n      hostname: ${appDomainRecord.name}.${appDomainRecord.dnsZone}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nContainer domain binding can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/containerDomain:ContainerDomain main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname with a CNAME record.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the container exists\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL used to query the container\n"
                }
            },
            "required": [
                "containerId",
                "hostname",
                "region",
                "url"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname with a CNAME record.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the container exists\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "containerId",
                "hostname"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerDomain resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The ID of the container.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname with a CNAME record.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the container exists\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL used to query the container\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerNamespace:ContainerNamespace": {
            "description": "Creates and manages Scaleway Container Namespace.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/containers/api/#namespaces-cdce79).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {\n    description: \"Main container namespace\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\", description=\"Main container namespace\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\", new()\n    {\n        Description = \"Main container namespace\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewContainerNamespace(ctx, \"main\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Main container namespace\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\", ContainerNamespaceArgs.builder()        \n            .description(\"Main container namespace\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n    properties:\n      description: Main container namespace\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/containerNamespace:ContainerNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "destroyRegistry": {
                    "type": "boolean",
                    "description": ". Destroy linked container registry on deletion.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the namespace is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "registryEndpoint": {
                    "type": "string",
                    "description": "The registry endpoint of the namespace.\n"
                },
                "registryNamespaceId": {
                    "type": "string",
                    "description": "The registry namespace ID of the namespace.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The secret environment variables of the namespace.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "region",
                "registryEndpoint",
                "registryNamespaceId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "destroyRegistry": {
                    "type": "boolean",
                    "description": ". Destroy linked container registry on deletion.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container namespace.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The secret environment variables of the namespace.\n",
                    "secret": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "destroyRegistry": {
                        "type": "boolean",
                        "description": ". Destroy linked container registry on deletion.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the container namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The secret environment variables of the namespace.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerToken:ContainerToken": {
            "description": "Creates and manages Scaleway Container Token.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/containers/api/#tokens-26b085).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainContainerNamespace = new scaleway.ContainerNamespace(\"mainContainerNamespace\", {});\nconst mainContainer = new scaleway.Container(\"mainContainer\", {namespaceId: mainContainerNamespace.id});\n// Namespace Token\nconst namespace = new scaleway.ContainerToken(\"namespace\", {\n    namespaceId: mainContainerNamespace.id,\n    expiresAt: \"2022-10-18T11:35:15+02:00\",\n});\n// Container Token\nconst container = new scaleway.ContainerToken(\"container\", {containerId: mainContainer.id});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_container_namespace = scaleway.ContainerNamespace(\"mainContainerNamespace\")\nmain_container = scaleway.Container(\"mainContainer\", namespace_id=main_container_namespace.id)\n# Namespace Token\nnamespace = scaleway.ContainerToken(\"namespace\",\n    namespace_id=main_container_namespace.id,\n    expires_at=\"2022-10-18T11:35:15+02:00\")\n# Container Token\ncontainer = scaleway.ContainerToken(\"container\", container_id=main_container.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainContainerNamespace = new Scaleway.ContainerNamespace(\"mainContainerNamespace\");\n\n    var mainContainer = new Scaleway.Container(\"mainContainer\", new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n    });\n\n    // Namespace Token\n    var @namespace = new Scaleway.ContainerToken(\"namespace\", new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n        ExpiresAt = \"2022-10-18T11:35:15+02:00\",\n    });\n\n    // Container Token\n    var container = new Scaleway.ContainerToken(\"container\", new()\n    {\n        ContainerId = mainContainer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainContainerNamespace, err := scaleway.NewContainerNamespace(ctx, \"mainContainerNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainContainer, err := scaleway.NewContainer(ctx, \"mainContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerToken(ctx, \"namespace\", \u0026scaleway.ContainerTokenArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t\tExpiresAt:   pulumi.String(\"2022-10-18T11:35:15+02:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerToken(ctx, \"container\", \u0026scaleway.ContainerTokenArgs{\n\t\t\tContainerId: mainContainer.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.ContainerToken;\nimport com.pulumi.scaleway.ContainerTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainContainerNamespace = new ContainerNamespace(\"mainContainerNamespace\");\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()        \n            .namespaceId(mainContainerNamespace.id())\n            .build());\n\n        var namespace = new ContainerToken(\"namespace\", ContainerTokenArgs.builder()        \n            .namespaceId(mainContainerNamespace.id())\n            .expiresAt(\"2022-10-18T11:35:15+02:00\")\n            .build());\n\n        var container = new ContainerToken(\"container\", ContainerTokenArgs.builder()        \n            .containerId(mainContainer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainContainerNamespace:\n    type: scaleway:ContainerNamespace\n  mainContainer:\n    type: scaleway:Container\n    properties:\n      namespaceId: ${mainContainerNamespace.id}\n  # Namespace Token\n  namespace:\n    type: scaleway:ContainerToken\n    properties:\n      namespaceId: ${mainContainerNamespace.id}\n      expiresAt: 2022-10-18T11:35:15+02:00\n  # Container Token\n  container:\n    type: scaleway:ContainerToken\n    properties:\n      containerId: ${mainContainer.id}\n```\n\n\n## Import\n\nTokens can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/containerToken:ContainerToken main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the container namespace.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token.\n",
                    "secret": true
                }
            },
            "required": [
                "region",
                "token"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "string",
                    "description": "The ID of the container.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the container namespace.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerToken resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The ID of the container.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The expiration date of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The ID of the container namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/database:Database": {
            "description": "Creates and manages Scaleway RDB database.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst main = new scaleway.Database(\"main\", {instanceId: scaleway_rdb_instance.main.id});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.Database(\"main\", instance_id=scaleway_rdb_instance[\"main\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.Database(\"main\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabase(ctx, \"main\", \u0026scaleway.DatabaseArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Database;\nimport com.pulumi.scaleway.DatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Database(\"main\", DatabaseArgs.builder()        \n            .instanceId(scaleway_rdb_instance.main().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Database\n    properties:\n      instanceId: ${scaleway_rdb_instance.main.id}\n```\n\n\n## Import\n\nRDB Database can be imported using the `{region}/{id}/{DBNAME}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/database:Database rdb01_mydb fr-par/11111111-1111-1111-1111-111111111111/mydb\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where to create the database.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Whether or not the database is managed or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The name of the owner of the database.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of the database (in bytes).\n"
                }
            },
            "required": [
                "instanceId",
                "managed",
                "name",
                "owner",
                "size"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where to create the database.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the instance where to create the database.\n",
                        "willReplaceOnChanges": true
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether or not the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-new-database`).\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database (in bytes).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseAcl:DatabaseAcl": {
            "description": "Creates and manages Scaleway Database instance authorized IPs.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api/#acl-rules-allowed-ips).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst main = new scaleway.DatabaseAcl(\"main\", {\n    instanceId: scaleway_rdb_instance.main.id,\n    aclRules: [{\n        ip: \"1.2.3.4/32\",\n        description: \"foo\",\n    }],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.DatabaseAcl(\"main\",\n    instance_id=scaleway_rdb_instance[\"main\"][\"id\"],\n    acl_rules=[scaleway.DatabaseAclAclRuleArgs(\n        ip=\"1.2.3.4/32\",\n        description=\"foo\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseAcl(\"main\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Main.Id,\n        AclRules = new[]\n        {\n            new Scaleway.Inputs.DatabaseAclAclRuleArgs\n            {\n                Ip = \"1.2.3.4/32\",\n                Description = \"foo\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseAcl(ctx, \"main\", \u0026scaleway.DatabaseAclArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),\n\t\t\tAclRules: DatabaseAclAclRuleArray{\n\t\t\t\t\u0026DatabaseAclAclRuleArgs{\n\t\t\t\t\tIp:          pulumi.String(\"1.2.3.4/32\"),\n\t\t\t\t\tDescription: pulumi.String(\"foo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseAcl;\nimport com.pulumi.scaleway.DatabaseAclArgs;\nimport com.pulumi.scaleway.inputs.DatabaseAclAclRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseAcl(\"main\", DatabaseAclArgs.builder()        \n            .instanceId(scaleway_rdb_instance.main().id())\n            .aclRules(DatabaseAclAclRuleArgs.builder()\n                .ip(\"1.2.3.4/32\")\n                .description(\"foo\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseAcl\n    properties:\n      instanceId: ${scaleway_rdb_instance.main.id}\n      aclRules:\n        - ip: 1.2.3.4/32\n          description: foo\n```\n\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/databaseAcl:DatabaseAcl acl01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "aclRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule"
                    },
                    "description": "A list of ACLs (structure is described below)\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance on which to create the ACL.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "required": [
                "aclRules",
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "aclRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule"
                    },
                    "description": "A list of ACLs (structure is described below)\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance on which to create the ACL.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "aclRules",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseAcl resources.\n",
                "properties": {
                    "aclRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule"
                        },
                        "description": "A list of ACLs (structure is described below)\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance on which to create the ACL.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseBackup:DatabaseBackup": {
            "description": "Creates and manages Scaleway RDB database backup.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst main = new scaleway.DatabaseBackup(\"main\", {\n    instanceId: data.scaleway_rdb_instance.main.id,\n    databaseName: data.scaleway_rdb_database.main.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.DatabaseBackup(\"main\",\n    instance_id=data[\"scaleway_rdb_instance\"][\"main\"][\"id\"],\n    database_name=data[\"scaleway_rdb_database\"][\"main\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseBackup(\"main\", new()\n    {\n        InstanceId = data.Scaleway_rdb_instance.Main.Id,\n        DatabaseName = data.Scaleway_rdb_database.Main.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseBackup(ctx, \"main\", \u0026scaleway.DatabaseBackupArgs{\n\t\t\tInstanceId:   pulumi.Any(data.Scaleway_rdb_instance.Main.Id),\n\t\t\tDatabaseName: pulumi.Any(data.Scaleway_rdb_database.Main.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseBackup;\nimport com.pulumi.scaleway.DatabaseBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseBackup(\"main\", DatabaseBackupArgs.builder()        \n            .instanceId(data.scaleway_rdb_instance().main().id())\n            .databaseName(data.scaleway_rdb_database().main().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseBackup\n    properties:\n      instanceId: ${data.scaleway_rdb_instance.main.id}\n      databaseName: ${data.scaleway_rdb_database.main.name}\n```\n\n### With expiration\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst main = new scaleway.DatabaseBackup(\"main\", {\n    instanceId: data.scaleway_rdb_instance.main.id,\n    databaseName: data.scaleway_rdb_database.main.name,\n    expiresAt: \"2022-06-16T07:48:44Z\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.DatabaseBackup(\"main\",\n    instance_id=data[\"scaleway_rdb_instance\"][\"main\"][\"id\"],\n    database_name=data[\"scaleway_rdb_database\"][\"main\"][\"name\"],\n    expires_at=\"2022-06-16T07:48:44Z\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseBackup(\"main\", new()\n    {\n        InstanceId = data.Scaleway_rdb_instance.Main.Id,\n        DatabaseName = data.Scaleway_rdb_database.Main.Name,\n        ExpiresAt = \"2022-06-16T07:48:44Z\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseBackup(ctx, \"main\", \u0026scaleway.DatabaseBackupArgs{\n\t\t\tInstanceId:   pulumi.Any(data.Scaleway_rdb_instance.Main.Id),\n\t\t\tDatabaseName: pulumi.Any(data.Scaleway_rdb_database.Main.Name),\n\t\t\tExpiresAt:    pulumi.String(\"2022-06-16T07:48:44Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseBackup;\nimport com.pulumi.scaleway.DatabaseBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseBackup(\"main\", DatabaseBackupArgs.builder()        \n            .instanceId(data.scaleway_rdb_instance().main().id())\n            .databaseName(data.scaleway_rdb_database().main().name())\n            .expiresAt(\"2022-06-16T07:48:44Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseBackup\n    properties:\n      instanceId: ${data.scaleway_rdb_instance.main.id}\n      databaseName: ${data.scaleway_rdb_database.main.name}\n      expiresAt: 2022-06-16T07:48:44Z\n```\n\n\n## Import\n\nRDB Database can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/databaseBackup:DatabaseBackup mybackup fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date (Format ISO 8601).\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database of this backup.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date (Format ISO 8601).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where the database to backup is.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Name of the instance of the backup.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-database`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the backup (in bytes).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Updated date (Format ISO 8601).\n"
                }
            },
            "required": [
                "createdAt",
                "databaseName",
                "instanceId",
                "instanceName",
                "name",
                "region",
                "size",
                "updatedAt"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database of this backup.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date (Format ISO 8601).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where the database to backup is.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-database`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseBackup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date (Format ISO 8601).\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database of this backup.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration date (Format ISO 8601).\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the instance where the database to backup is.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Name of the instance of the backup.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-database`).\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the backup (in bytes).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated date (Format ISO 8601).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseInstance:DatabaseInstance": {
            "description": "Creates and manages Scaleway Database Instances.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Example Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    disableBackup: true,\n    engine: \"PostgreSQL-11\",\n    isHaCluster: true,\n    nodeType: \"DB-DEV-S\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    userName: \"my_initial_user\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    disable_backup=True,\n    engine=\"PostgreSQL-11\",\n    is_ha_cluster=True,\n    node_type=\"DB-DEV-S\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    user_name=\"my_initial_user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        DisableBackup = true,\n        Engine = \"PostgreSQL-11\",\n        IsHaCluster = true,\n        NodeType = \"DB-DEV-S\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        UserName = \"my_initial_user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-11\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()        \n            .disableBackup(true)\n            .engine(\"PostgreSQL-11\")\n            .isHaCluster(true)\n            .nodeType(\"DB-DEV-S\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .userName(\"my_initial_user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      disableBackup: true\n      engine: PostgreSQL-11\n      isHaCluster: true\n      nodeType: DB-DEV-S\n      password: thiZ_is_v\u0026ry_s3cret\n      userName: my_initial_user\n```\n\n### Example with Settings\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    disableBackup: true,\n    engine: \"MySQL-8\",\n    initSettings: {\n        lower_case_table_names: 1,\n    },\n    nodeType: \"db-dev-s\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    settings: {\n        max_connections: \"350\",\n    },\n    userName: \"my_initial_user\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    disable_backup=True,\n    engine=\"MySQL-8\",\n    init_settings={\n        \"lower_case_table_names\": \"1\",\n    },\n    node_type=\"db-dev-s\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    settings={\n        \"max_connections\": \"350\",\n    },\n    user_name=\"my_initial_user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        DisableBackup = true,\n        Engine = \"MySQL-8\",\n        InitSettings = \n        {\n            { \"lower_case_table_names\", \"1\" },\n        },\n        NodeType = \"db-dev-s\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Settings = \n        {\n            { \"max_connections\", \"350\" },\n        },\n        UserName = \"my_initial_user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tEngine:        pulumi.String(\"MySQL-8\"),\n\t\t\tInitSettings: pulumi.StringMap{\n\t\t\t\t\"lower_case_table_names\": pulumi.String(\"1\"),\n\t\t\t},\n\t\t\tNodeType: pulumi.String(\"db-dev-s\"),\n\t\t\tPassword: pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tSettings: pulumi.StringMap{\n\t\t\t\t\"max_connections\": pulumi.String(\"350\"),\n\t\t\t},\n\t\t\tUserName: pulumi.String(\"my_initial_user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()        \n            .disableBackup(true)\n            .engine(\"MySQL-8\")\n            .initSettings(Map.of(\"lower_case_table_names\", 1))\n            .nodeType(\"db-dev-s\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .settings(Map.of(\"max_connections\", \"350\"))\n            .userName(\"my_initial_user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      disableBackup: true\n      engine: MySQL-8\n      initSettings:\n        lower_case_table_names: 1\n      nodeType: db-dev-s\n      password: thiZ_is_v\u0026ry_s3cret\n      settings:\n        max_connections: '350'\n      userName: my_initial_user\n```\n\n### Example with backup schedule\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    backupScheduleFrequency: 24, // every day\n    backupScheduleRetention: 7, // keep it one week\n    disableBackup: false,\n    engine: \"PostgreSQL-11\",\n    isHaCluster: true,\n    nodeType: \"DB-DEV-S\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    userName: \"my_initial_user\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    backup_schedule_frequency=24,\n    backup_schedule_retention=7,\n    disable_backup=False,\n    engine=\"PostgreSQL-11\",\n    is_ha_cluster=True,\n    node_type=\"DB-DEV-S\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    user_name=\"my_initial_user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        BackupScheduleFrequency = 24,\n        BackupScheduleRetention = 7,\n        DisableBackup = false,\n        Engine = \"PostgreSQL-11\",\n        IsHaCluster = true,\n        NodeType = \"DB-DEV-S\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        UserName = \"my_initial_user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tBackupScheduleFrequency: pulumi.Int(24),\n\t\t\tBackupScheduleRetention: pulumi.Int(7),\n\t\t\tDisableBackup:           pulumi.Bool(false),\n\t\t\tEngine:                  pulumi.String(\"PostgreSQL-11\"),\n\t\t\tIsHaCluster:             pulumi.Bool(true),\n\t\t\tNodeType:                pulumi.String(\"DB-DEV-S\"),\n\t\t\tPassword:                pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tUserName:                pulumi.String(\"my_initial_user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()        \n            .backupScheduleFrequency(24)\n            .backupScheduleRetention(7)\n            .disableBackup(false)\n            .engine(\"PostgreSQL-11\")\n            .isHaCluster(true)\n            .nodeType(\"DB-DEV-S\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .userName(\"my_initial_user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      backupScheduleFrequency: 24\n      # every day\n      backupScheduleRetention: 7\n      # keep it one week\n      disableBackup: false\n      engine: PostgreSQL-11\n      isHaCluster: true\n      nodeType: DB-DEV-S\n      password: thiZ_is_v\u0026ry_s3cret\n      userName: my_initial_user\n```\n\n### Example with private network and dhcp configuration\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst pn02 = new scaleway.VpcPrivateNetwork(\"pn02\", {});\nconst mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", {subnet: \"192.168.1.0/24\"});\nconst mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\", {});\nconst mainVpcPublicGateway = new scaleway.VpcPublicGateway(\"mainVpcPublicGateway\", {\n    type: \"VPC-GW-S\",\n    ipId: mainVpcPublicGatewayIp.id,\n});\nconst mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateNetworkId: pn02.id,\n    dhcpId: mainVpcPublicGatewayDhcp.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n}, {\n    dependsOn: [\n        mainVpcPublicGatewayIp,\n        pn02,\n    ],\n});\nconst mainDatabaseInstance = new scaleway.DatabaseInstance(\"mainDatabaseInstance\", {\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-11\",\n    isHaCluster: false,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    region: \"fr-par\",\n    tags: [\n        \"terraform-test\",\n        \"scaleway_rdb_instance\",\n        \"volume\",\n        \"rdb_pn\",\n    ],\n    volumeType: \"bssd\",\n    volumeSizeInGb: 10,\n    privateNetwork: {\n        ipNet: \"192.168.1.254/24\",\n        pnId: pn02.id,\n    },\n});\nconst mainVpcPublicGatewayPatRule = new scaleway.VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateIp: mainVpcPublicGatewayDhcp.address,\n    privatePort: mainDatabaseInstance.privateNetwork.apply(privateNetwork =\u003e privateNetwork?.port),\n    publicPort: 42,\n    protocol: \"both\",\n}, {\n    dependsOn: [\n        mainVpcGatewayNetwork,\n        pn02,\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\npn02 = scaleway.VpcPrivateNetwork(\"pn02\")\nmain_vpc_public_gateway_dhcp = scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", subnet=\"192.168.1.0/24\")\nmain_vpc_public_gateway_ip = scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\")\nmain_vpc_public_gateway = scaleway.VpcPublicGateway(\"mainVpcPublicGateway\",\n    type=\"VPC-GW-S\",\n    ip_id=main_vpc_public_gateway_ip.id)\nmain_vpc_gateway_network = scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_network_id=pn02.id,\n    dhcp_id=main_vpc_public_gateway_dhcp.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True,\n    opts=pulumi.ResourceOptions(depends_on=[\n            main_vpc_public_gateway_ip,\n            pn02,\n        ]))\nmain_database_instance = scaleway.DatabaseInstance(\"mainDatabaseInstance\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-11\",\n    is_ha_cluster=False,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    region=\"fr-par\",\n    tags=[\n        \"terraform-test\",\n        \"scaleway_rdb_instance\",\n        \"volume\",\n        \"rdb_pn\",\n    ],\n    volume_type=\"bssd\",\n    volume_size_in_gb=10,\n    private_network=scaleway.DatabaseInstancePrivateNetworkArgs(\n        ip_net=\"192.168.1.254/24\",\n        pn_id=pn02.id,\n    ))\nmain_vpc_public_gateway_pat_rule = scaleway.VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_ip=main_vpc_public_gateway_dhcp.address,\n    private_port=main_database_instance.private_network.port,\n    public_port=42,\n    protocol=\"both\",\n    opts=pulumi.ResourceOptions(depends_on=[\n            main_vpc_gateway_network,\n            pn02,\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn02 = new Scaleway.VpcPrivateNetwork(\"pn02\");\n\n    var mainVpcPublicGatewayDhcp = new Scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n    var mainVpcPublicGatewayIp = new Scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n    var mainVpcPublicGateway = new Scaleway.VpcPublicGateway(\"mainVpcPublicGateway\", new()\n    {\n        Type = \"VPC-GW-S\",\n        IpId = mainVpcPublicGatewayIp.Id,\n    });\n\n    var mainVpcGatewayNetwork = new Scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\", new()\n    {\n        GatewayId = mainVpcPublicGateway.Id,\n        PrivateNetworkId = pn02.Id,\n        DhcpId = mainVpcPublicGatewayDhcp.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainVpcPublicGatewayIp,\n            pn02,\n        },\n    });\n\n    var mainDatabaseInstance = new Scaleway.DatabaseInstance(\"mainDatabaseInstance\", new()\n    {\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-11\",\n        IsHaCluster = false,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Region = \"fr-par\",\n        Tags = new[]\n        {\n            \"terraform-test\",\n            \"scaleway_rdb_instance\",\n            \"volume\",\n            \"rdb_pn\",\n        },\n        VolumeType = \"bssd\",\n        VolumeSizeInGb = 10,\n        PrivateNetwork = new Scaleway.Inputs.DatabaseInstancePrivateNetworkArgs\n        {\n            IpNet = \"192.168.1.254/24\",\n            PnId = pn02.Id,\n        },\n    });\n\n    var mainVpcPublicGatewayPatRule = new Scaleway.VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\", new()\n    {\n        GatewayId = mainVpcPublicGateway.Id,\n        PrivateIp = mainVpcPublicGatewayDhcp.Address,\n        PrivatePort = mainDatabaseInstance.PrivateNetwork.Apply(privateNetwork =\u003e privateNetwork?.Port),\n        PublicPort = 42,\n        Protocol = \"both\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainVpcGatewayNetwork,\n            pn02,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn02, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn02\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayDhcp, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"mainVpcPublicGatewayDhcp\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, \"mainVpcPublicGatewayIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGateway, err := scaleway.NewVpcPublicGateway(ctx, \"mainVpcPublicGateway\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: mainVpcPublicGatewayIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcGatewayNetwork, err := scaleway.NewVpcGatewayNetwork(ctx, \"mainVpcGatewayNetwork\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        mainVpcPublicGateway.ID(),\n\t\t\tPrivateNetworkId: pn02.ID(),\n\t\t\tDhcpId:           mainVpcPublicGatewayDhcp.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainVpcPublicGatewayIp,\n\t\t\tpn02,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainDatabaseInstance, err := scaleway.NewDatabaseInstance(ctx, \"mainDatabaseInstance\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-11\"),\n\t\t\tIsHaCluster:   pulumi.Bool(false),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tRegion:        pulumi.String(\"fr-par\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform-test\"),\n\t\t\t\tpulumi.String(\"scaleway_rdb_instance\"),\n\t\t\t\tpulumi.String(\"volume\"),\n\t\t\t\tpulumi.String(\"rdb_pn\"),\n\t\t\t},\n\t\t\tVolumeType:     pulumi.String(\"bssd\"),\n\t\t\tVolumeSizeInGb: pulumi.Int(10),\n\t\t\tPrivateNetwork: \u0026DatabaseInstancePrivateNetworkArgs{\n\t\t\t\tIpNet: pulumi.String(\"192.168.1.254/24\"),\n\t\t\t\tPnId:  pn02.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayPatRule(ctx, \"mainVpcPublicGatewayPatRule\", \u0026scaleway.VpcPublicGatewayPatRuleArgs{\n\t\t\tGatewayId: mainVpcPublicGateway.ID(),\n\t\t\tPrivateIp: mainVpcPublicGatewayDhcp.Address,\n\t\t\tPrivatePort: mainDatabaseInstance.PrivateNetwork.ApplyT(func(privateNetwork DatabaseInstancePrivateNetwork) (int, error) {\n\t\t\t\treturn privateNetwork.Port, nil\n\t\t\t}).(pulumi.IntOutput),\n\t\t\tPublicPort: pulumi.Int(42),\n\t\t\tProtocol:   pulumi.String(\"both\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainVpcGatewayNetwork,\n\t\t\tpn02,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.inputs.DatabaseInstancePrivateNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRule;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRuleArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn02 = new VpcPrivateNetwork(\"pn02\");\n\n        var mainVpcPublicGatewayDhcp = new VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n        var mainVpcPublicGatewayIp = new VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n        var mainVpcPublicGateway = new VpcPublicGateway(\"mainVpcPublicGateway\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .ipId(mainVpcPublicGatewayIp.id())\n            .build());\n\n        var mainVpcGatewayNetwork = new VpcGatewayNetwork(\"mainVpcGatewayNetwork\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(mainVpcPublicGateway.id())\n            .privateNetworkId(pn02.id())\n            .dhcpId(mainVpcPublicGatewayDhcp.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    mainVpcPublicGatewayIp,\n                    pn02)\n                .build());\n\n        var mainDatabaseInstance = new DatabaseInstance(\"mainDatabaseInstance\", DatabaseInstanceArgs.builder()        \n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-11\")\n            .isHaCluster(false)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .region(\"fr-par\")\n            .tags(            \n                \"terraform-test\",\n                \"scaleway_rdb_instance\",\n                \"volume\",\n                \"rdb_pn\")\n            .volumeType(\"bssd\")\n            .volumeSizeInGb(10)\n            .privateNetwork(DatabaseInstancePrivateNetworkArgs.builder()\n                .ipNet(\"192.168.1.254/24\")\n                .pnId(pn02.id())\n                .build())\n            .build());\n\n        var mainVpcPublicGatewayPatRule = new VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\", VpcPublicGatewayPatRuleArgs.builder()        \n            .gatewayId(mainVpcPublicGateway.id())\n            .privateIp(mainVpcPublicGatewayDhcp.address())\n            .privatePort(mainDatabaseInstance.privateNetwork().applyValue(privateNetwork -\u003e privateNetwork.port()))\n            .publicPort(42)\n            .protocol(\"both\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    mainVpcGatewayNetwork,\n                    pn02)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn02:\n    type: scaleway:VpcPrivateNetwork\n  mainVpcPublicGatewayDhcp:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n  mainVpcPublicGatewayIp:\n    type: scaleway:VpcPublicGatewayIp\n  mainVpcPublicGateway:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n      ipId: ${mainVpcPublicGatewayIp.id}\n  mainVpcPublicGatewayPatRule:\n    type: scaleway:VpcPublicGatewayPatRule\n    properties:\n      gatewayId: ${mainVpcPublicGateway.id}\n      privateIp: ${mainVpcPublicGatewayDhcp.address}\n      privatePort: ${mainDatabaseInstance.privateNetwork.port}\n      publicPort: 42\n      protocol: both\n    options:\n      dependson:\n        - ${mainVpcGatewayNetwork}\n        - ${pn02}\n  mainVpcGatewayNetwork:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${mainVpcPublicGateway.id}\n      privateNetworkId: ${pn02.id}\n      dhcpId: ${mainVpcPublicGatewayDhcp.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n    options:\n      dependson:\n        - ${mainVpcPublicGatewayIp}\n        - ${pn02}\n  mainDatabaseInstance:\n    type: scaleway:DatabaseInstance\n    properties:\n      nodeType: db-dev-s\n      engine: PostgreSQL-11\n      isHaCluster: false\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      region: fr-par\n      tags:\n        - terraform-test\n        - scaleway_rdb_instance\n        - volume\n        - rdb_pn\n      volumeType: bssd\n      volumeSizeInGb: 10\n      privateNetwork:\n        ipNet: 192.168.1.254/24\n        pnId: ${pn02.id}\n```\n\n## Settings\n\nPlease consult the [GoDoc](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@v1.0.0-beta.9/api/rdb/v1#EngineVersion) to list all available `settings` and `init_settings` on your `node_type` of your convenient.\n\n## Private Network\n\n\u003e **Important:** Updates to `private_network` will recreate the attachment Instance.\n\n- `ip_net` - (Required) The IP network where to con.\n- `pn_id` - (Required) The ID of the private network. If not provided it will be randomly generated.\n\n## Limitations\n\nThe Managed Database product is only compliant with the private network in the default availability zone (AZ).\ni.e. `fr-par-1`, `nl-ams-1`, `pl-waw-1`. To learn more, read our section [How to connect a PostgreSQL and MySQL Database Instance to a Private Network](https://www.scaleway.com/en/docs/managed-databases/postgresql-and-mysql/how-to/connect-database-private-network/)\n\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/databaseInstance:DatabaseInstance rdb01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "backupSameRegion": {
                    "type": "boolean",
                    "description": "Boolean to store logical backups in the same region as the database instance.\n"
                },
                "backupScheduleFrequency": {
                    "type": "integer",
                    "description": "Backup schedule frequency in hours.\n"
                },
                "backupScheduleRetention": {
                    "type": "integer",
                    "description": "Backup schedule retention in days.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Certificate of the database instance.\n"
                },
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance.\n"
                },
                "endpointIp": {
                    "type": "string",
                    "description": "(Deprecated) The IP of the Database Instance.\n",
                    "deprecationMessage": "Please use the private_network or the load_balancer attribute"
                },
                "endpointPort": {
                    "type": "integer",
                    "description": "(Deprecated) The port of the Database Instance.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n"
                },
                "initSettings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set at database initialisation.\n"
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n"
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer"
                    },
                    "description": "List of load balancer endpoints of the database instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `db-dev-s`).\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the Database Instance is associated with.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n",
                    "secret": true
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork",
                    "description": "List of private networks endpoints of the database instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database Instance is associated with.\n"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseInstanceReadReplica:DatabaseInstanceReadReplica"
                    },
                    "description": "List of read replicas of the database instance.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set. Using this option will override default config.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n"
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`. Must be a multiple of 5000000000.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "required": [
                "backupSameRegion",
                "backupScheduleFrequency",
                "backupScheduleRetention",
                "certificate",
                "endpointIp",
                "endpointPort",
                "engine",
                "loadBalancers",
                "name",
                "nodeType",
                "organizationId",
                "projectId",
                "readReplicas",
                "region",
                "settings",
                "volumeSizeInGb"
            ],
            "inputProperties": {
                "backupSameRegion": {
                    "type": "boolean",
                    "description": "Boolean to store logical backups in the same region as the database instance.\n"
                },
                "backupScheduleFrequency": {
                    "type": "integer",
                    "description": "Backup schedule frequency in hours.\n"
                },
                "backupScheduleRetention": {
                    "type": "integer",
                    "description": "Backup schedule retention in days.\n"
                },
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n",
                    "willReplaceOnChanges": true
                },
                "initSettings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set at database initialisation.\n",
                    "willReplaceOnChanges": true
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `db-dev-s`).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n",
                    "secret": true
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork",
                    "description": "List of private networks endpoints of the database instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database Instance is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set. Using this option will override default config.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n",
                    "willReplaceOnChanges": true
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`. Must be a multiple of 5000000000.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "requiredInputs": [
                "engine",
                "nodeType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseInstance resources.\n",
                "properties": {
                    "backupSameRegion": {
                        "type": "boolean",
                        "description": "Boolean to store logical backups in the same region as the database instance.\n"
                    },
                    "backupScheduleFrequency": {
                        "type": "integer",
                        "description": "Backup schedule frequency in hours.\n"
                    },
                    "backupScheduleRetention": {
                        "type": "integer",
                        "description": "Backup schedule retention in days.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Certificate of the database instance.\n"
                    },
                    "disableBackup": {
                        "type": "boolean",
                        "description": "Disable automated backup for the database instance.\n"
                    },
                    "endpointIp": {
                        "type": "string",
                        "description": "(Deprecated) The IP of the Database Instance.\n",
                        "deprecationMessage": "Please use the private_network or the load_balancer attribute"
                    },
                    "endpointPort": {
                        "type": "integer",
                        "description": "(Deprecated) The port of the Database Instance.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n",
                        "willReplaceOnChanges": true
                    },
                    "initSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of engine settings to be set at database initialisation.\n",
                        "willReplaceOnChanges": true
                    },
                    "isHaCluster": {
                        "type": "boolean",
                        "description": "Enable or disable high availability for the database instance.\n"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer"
                        },
                        "description": "List of load balancer endpoints of the database instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database Instance.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of database instance you want to create (e.g. `db-dev-s`).\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the Database Instance is associated with.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the database instance.\n",
                        "secret": true
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork",
                        "description": "List of private networks endpoints of the database instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Database Instance is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "readReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DatabaseInstanceReadReplica:DatabaseInstanceReadReplica"
                        },
                        "description": "List of read replicas of the database instance.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of engine settings to be set. Using this option will override default config.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Database Instance.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the database instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeSizeInGb": {
                        "type": "integer",
                        "description": "Volume size (in GB) when `volume_type` is set to `bssd`. Must be a multiple of 5000000000.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databasePrivilege:DatabasePrivilege": {
            "description": "Create and manage Scaleway RDB database privilege.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainDatabaseUser = new scaleway.DatabaseUser(\"mainDatabaseUser\", {\n    instanceId: scaleway_rdb_instance.pgsql.id,\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    isAdmin: false,\n});\nconst mainDatabase = new scaleway.Database(\"mainDatabase\", {instanceId: scaleway_rdb_instance.pgsql.id});\nconst priv = new scaleway.DatabasePrivilege(\"priv\", {\n    instanceId: scaleway_rdb_instance.rdb.id,\n    userName: \"my-db-user\",\n    databaseName: \"my-db-name\",\n    permission: \"all\",\n}, {\n    dependsOn: [\n        mainDatabaseUser,\n        mainDatabase,\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_database_user = scaleway.DatabaseUser(\"mainDatabaseUser\",\n    instance_id=scaleway_rdb_instance[\"pgsql\"][\"id\"],\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    is_admin=False)\nmain_database = scaleway.Database(\"mainDatabase\", instance_id=scaleway_rdb_instance[\"pgsql\"][\"id\"])\npriv = scaleway.DatabasePrivilege(\"priv\",\n    instance_id=scaleway_rdb_instance[\"rdb\"][\"id\"],\n    user_name=\"my-db-user\",\n    database_name=\"my-db-name\",\n    permission=\"all\",\n    opts=pulumi.ResourceOptions(depends_on=[\n            main_database_user,\n            main_database,\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainDatabaseUser = new Scaleway.DatabaseUser(\"mainDatabaseUser\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Pgsql.Id,\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        IsAdmin = false,\n    });\n\n    var mainDatabase = new Scaleway.Database(\"mainDatabase\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Pgsql.Id,\n    });\n\n    var priv = new Scaleway.DatabasePrivilege(\"priv\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Rdb.Id,\n        UserName = \"my-db-user\",\n        DatabaseName = \"my-db-name\",\n        Permission = \"all\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainDatabaseUser,\n            mainDatabase,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainDatabaseUser, err := scaleway.NewDatabaseUser(ctx, \"mainDatabaseUser\", \u0026scaleway.DatabaseUserArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Pgsql.Id),\n\t\t\tPassword:   pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tIsAdmin:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainDatabase, err := scaleway.NewDatabase(ctx, \"mainDatabase\", \u0026scaleway.DatabaseArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Pgsql.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabasePrivilege(ctx, \"priv\", \u0026scaleway.DatabasePrivilegeArgs{\n\t\t\tInstanceId:   pulumi.Any(scaleway_rdb_instance.Rdb.Id),\n\t\t\tUserName:     pulumi.String(\"my-db-user\"),\n\t\t\tDatabaseName: pulumi.String(\"my-db-name\"),\n\t\t\tPermission:   pulumi.String(\"all\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainDatabaseUser,\n\t\t\tmainDatabase,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseUser;\nimport com.pulumi.scaleway.DatabaseUserArgs;\nimport com.pulumi.scaleway.Database;\nimport com.pulumi.scaleway.DatabaseArgs;\nimport com.pulumi.scaleway.DatabasePrivilege;\nimport com.pulumi.scaleway.DatabasePrivilegeArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainDatabaseUser = new DatabaseUser(\"mainDatabaseUser\", DatabaseUserArgs.builder()        \n            .instanceId(scaleway_rdb_instance.pgsql().id())\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .isAdmin(false)\n            .build());\n\n        var mainDatabase = new Database(\"mainDatabase\", DatabaseArgs.builder()        \n            .instanceId(scaleway_rdb_instance.pgsql().id())\n            .build());\n\n        var priv = new DatabasePrivilege(\"priv\", DatabasePrivilegeArgs.builder()        \n            .instanceId(scaleway_rdb_instance.rdb().id())\n            .userName(\"my-db-user\")\n            .databaseName(\"my-db-name\")\n            .permission(\"all\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    mainDatabaseUser,\n                    mainDatabase)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  priv:\n    type: scaleway:DatabasePrivilege\n    properties:\n      instanceId: ${scaleway_rdb_instance.rdb.id}\n      userName: my-db-user\n      databaseName: my-db-name\n      permission: all\n    options:\n      dependson:\n        - ${mainDatabaseUser}\n        - ${mainDatabase}\n  mainDatabaseUser:\n    type: scaleway:DatabaseUser\n    properties:\n      instanceId: ${scaleway_rdb_instance.pgsql.id}\n      password: thiZ_is_v\u0026ry_s3cret\n      isAdmin: false\n  mainDatabase:\n    type: scaleway:Database\n    properties:\n      instanceId: ${scaleway_rdb_instance.pgsql.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where to create the database.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "required": [
                "databaseName",
                "instanceId",
                "permission",
                "userName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where to create the database.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "instanceId",
                "permission",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabasePrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-db-name`).\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the instance where to create the database.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Name of the user (e.g. `my-db-user`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseReadReplica:DatabaseReadReplica": {
            "description": "Creates and manages Scaleway Database read replicas.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst instance = new scaleway.DatabaseInstance(\"instance\", {\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-14\",\n    isHaCluster: false,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    tags: [\n        \"terraform-test\",\n        \"scaleway_rdb_read_replica\",\n        \"minimal\",\n    ],\n});\nconst replica = new scaleway.DatabaseReadReplica(\"replica\", {\n    instanceId: instance.id,\n    directAccess: {},\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\ninstance = scaleway.DatabaseInstance(\"instance\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-14\",\n    is_ha_cluster=False,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    tags=[\n        \"terraform-test\",\n        \"scaleway_rdb_read_replica\",\n        \"minimal\",\n    ])\nreplica = scaleway.DatabaseReadReplica(\"replica\",\n    instance_id=instance.id,\n    direct_access=scaleway.DatabaseReadReplicaDirectAccessArgs())\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.DatabaseInstance(\"instance\", new()\n    {\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-14\",\n        IsHaCluster = false,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Tags = new[]\n        {\n            \"terraform-test\",\n            \"scaleway_rdb_read_replica\",\n            \"minimal\",\n        },\n    });\n\n    var replica = new Scaleway.DatabaseReadReplica(\"replica\", new()\n    {\n        InstanceId = instance.Id,\n        DirectAccess = null,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewDatabaseInstance(ctx, \"instance\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-14\"),\n\t\t\tIsHaCluster:   pulumi.Bool(false),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform-test\"),\n\t\t\t\tpulumi.String(\"scaleway_rdb_read_replica\"),\n\t\t\t\tpulumi.String(\"minimal\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseReadReplica(ctx, \"replica\", \u0026scaleway.DatabaseReadReplicaArgs{\n\t\t\tInstanceId:   instance.ID(),\n\t\t\tDirectAccess: nil,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.DatabaseReadReplica;\nimport com.pulumi.scaleway.DatabaseReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.DatabaseReadReplicaDirectAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new DatabaseInstance(\"instance\", DatabaseInstanceArgs.builder()        \n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-14\")\n            .isHaCluster(false)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .tags(            \n                \"terraform-test\",\n                \"scaleway_rdb_read_replica\",\n                \"minimal\")\n            .build());\n\n        var replica = new DatabaseReadReplica(\"replica\", DatabaseReadReplicaArgs.builder()        \n            .instanceId(instance.id())\n            .directAccess()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:DatabaseInstance\n    properties:\n      nodeType: db-dev-s\n      engine: PostgreSQL-14\n      isHaCluster: false\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      tags:\n        - terraform-test\n        - scaleway_rdb_read_replica\n        - minimal\n  replica:\n    type: scaleway:DatabaseReadReplica\n    properties:\n      instanceId: ${instance.id}\n      directAccess: {}\n```\n\n### Private network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst instance = new scaleway.DatabaseInstance(\"instance\", {\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-14\",\n    isHaCluster: false,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst replica = new scaleway.DatabaseReadReplica(\"replica\", {\n    instanceId: instance.id,\n    privateNetwork: {\n        privateNetworkId: pn.id,\n        serviceIp: \"192.168.1.254/24\",\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\ninstance = scaleway.DatabaseInstance(\"instance\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-14\",\n    is_ha_cluster=False,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\npn = scaleway.VpcPrivateNetwork(\"pn\")\nreplica = scaleway.DatabaseReadReplica(\"replica\",\n    instance_id=instance.id,\n    private_network=scaleway.DatabaseReadReplicaPrivateNetworkArgs(\n        private_network_id=pn.id,\n        service_ip=\"192.168.1.254/24\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.DatabaseInstance(\"instance\", new()\n    {\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-14\",\n        IsHaCluster = false,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var replica = new Scaleway.DatabaseReadReplica(\"replica\", new()\n    {\n        InstanceId = instance.Id,\n        PrivateNetwork = new Scaleway.Inputs.DatabaseReadReplicaPrivateNetworkArgs\n        {\n            PrivateNetworkId = pn.Id,\n            ServiceIp = \"192.168.1.254/24\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewDatabaseInstance(ctx, \"instance\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-14\"),\n\t\t\tIsHaCluster:   pulumi.Bool(false),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseReadReplica(ctx, \"replica\", \u0026scaleway.DatabaseReadReplicaArgs{\n\t\t\tInstanceId: instance.ID(),\n\t\t\tPrivateNetwork: \u0026DatabaseReadReplicaPrivateNetworkArgs{\n\t\t\t\tPrivateNetworkId: pn.ID(),\n\t\t\t\tServiceIp:        pulumi.String(\"192.168.1.254/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.DatabaseReadReplica;\nimport com.pulumi.scaleway.DatabaseReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.DatabaseReadReplicaPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new DatabaseInstance(\"instance\", DatabaseInstanceArgs.builder()        \n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-14\")\n            .isHaCluster(false)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var replica = new DatabaseReadReplica(\"replica\", DatabaseReadReplicaArgs.builder()        \n            .instanceId(instance.id())\n            .privateNetwork(DatabaseReadReplicaPrivateNetworkArgs.builder()\n                .privateNetworkId(pn.id())\n                .serviceIp(\"192.168.1.254/24\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:DatabaseInstance\n    properties:\n      nodeType: db-dev-s\n      engine: PostgreSQL-14\n      isHaCluster: false\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  replica:\n    type: scaleway:DatabaseReadReplica\n    properties:\n      instanceId: ${instance.id}\n      privateNetwork:\n        privateNetworkId: ${pn.id}\n        serviceIp: 192.168.1.254/24\n```\n\n\n## Import\n\nDatabase Read replica can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/databaseReadReplica:DatabaseReadReplica rr fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/DatabaseReadReplicaDirectAccess:DatabaseReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to rdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of the rdb instance to replicate.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseReadReplicaPrivateNetwork:DatabaseReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a private network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database read replica should be created.\n"
                }
            },
            "required": [
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/DatabaseReadReplicaDirectAccess:DatabaseReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to rdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of the rdb instance to replicate.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseReadReplicaPrivateNetwork:DatabaseReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a private network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database read replica should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseReadReplica resources.\n",
                "properties": {
                    "directAccess": {
                        "$ref": "#/types/scaleway:index/DatabaseReadReplicaDirectAccess:DatabaseReadReplicaDirectAccess",
                        "description": "Creates a direct access endpoint to rdb replica.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of the rdb instance to replicate.\n"
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/DatabaseReadReplicaPrivateNetwork:DatabaseReadReplicaPrivateNetwork",
                        "description": "Create an endpoint in a private network.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database read replica should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseUser:DatabaseUser": {
            "description": "Creates and manages Scaleway Database Users.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as random from \"@pulumi/random\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst dbPassword = new random.RandomPassword(\"dbPassword\", {\n    length: 16,\n    special: true,\n});\nconst dbAdmin = new scaleway.DatabaseUser(\"dbAdmin\", {\n    instanceId: scaleway_rdb_instance.main.id,\n    password: dbPassword.result,\n    isAdmin: true,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_random as random\n\ndb_password = random.RandomPassword(\"dbPassword\",\n    length=16,\n    special=True)\ndb_admin = scaleway.DatabaseUser(\"dbAdmin\",\n    instance_id=scaleway_rdb_instance[\"main\"][\"id\"],\n    password=db_password.result,\n    is_admin=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Random = Pulumi.Random;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbPassword = new Random.RandomPassword(\"dbPassword\", new()\n    {\n        Length = 16,\n        Special = true,\n    });\n\n    var dbAdmin = new Scaleway.DatabaseUser(\"dbAdmin\", new()\n    {\n        InstanceId = scaleway_rdb_instance.Main.Id,\n        Password = dbPassword.Result,\n        IsAdmin = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi-random/sdk/v4/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdbPassword, err := random.NewRandomPassword(ctx, \"dbPassword\", \u0026random.RandomPasswordArgs{\n\t\t\tLength:  pulumi.Int(16),\n\t\t\tSpecial: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseUser(ctx, \"dbAdmin\", \u0026scaleway.DatabaseUserArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),\n\t\t\tPassword:   dbPassword.Result,\n\t\t\tIsAdmin:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.random.RandomPassword;\nimport com.pulumi.random.RandomPasswordArgs;\nimport com.pulumi.scaleway.DatabaseUser;\nimport com.pulumi.scaleway.DatabaseUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbPassword = new RandomPassword(\"dbPassword\", RandomPasswordArgs.builder()        \n            .length(16)\n            .special(true)\n            .build());\n\n        var dbAdmin = new DatabaseUser(\"dbAdmin\", DatabaseUserArgs.builder()        \n            .instanceId(scaleway_rdb_instance.main().id())\n            .password(dbPassword.result())\n            .isAdmin(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dbPassword:\n    type: random:RandomPassword\n    properties:\n      length: 16\n      special: true\n  dbAdmin:\n    type: scaleway:DatabaseUser\n    properties:\n      instanceId: ${scaleway_rdb_instance.main.id}\n      password: ${dbPassword.result}\n      isAdmin: true\n```\n\n\n## Import\n\nDatabase User can be imported using `{region}/{instance_id}/{name}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/databaseUser:DatabaseUser admin fr-par/11111111-1111-1111-1111-111111111111/admin\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The instance on which to create the user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database User name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "password",
                "region"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The instance on which to create the user.\n",
                    "willReplaceOnChanges": true
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database User name.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseUser resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The instance on which to create the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Grant admin permissions to the Database User.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Database User name.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Database User password.\n",
                        "secret": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/domainRecord:DomainRecord": {
            "description": "Creates and manages Scaleway Domain record.  \nFor more information, see [the documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst www = new scaleway.DomainRecord(\"www\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n});\nconst www2 = new scaleway.DomainRecord(\"www2\", {\n    data: \"1.2.3.5\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n});\nconst mx = new scaleway.DomainRecord(\"mx\", {\n    data: \"mx.online.net.\",\n    dnsZone: \"domain.tld\",\n    priority: 10,\n    ttl: 3600,\n    type: \"MX\",\n});\nconst mx2 = new scaleway.DomainRecord(\"mx2\", {\n    data: \"mx-cache.online.net.\",\n    dnsZone: \"domain.tld\",\n    priority: 20,\n    ttl: 3600,\n    type: \"MX\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nwww = scaleway.DomainRecord(\"www\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\")\nwww2 = scaleway.DomainRecord(\"www2\",\n    data=\"1.2.3.5\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\")\nmx = scaleway.DomainRecord(\"mx\",\n    data=\"mx.online.net.\",\n    dns_zone=\"domain.tld\",\n    priority=10,\n    ttl=3600,\n    type=\"MX\")\nmx2 = scaleway.DomainRecord(\"mx2\",\n    data=\"mx-cache.online.net.\",\n    dns_zone=\"domain.tld\",\n    priority=20,\n    ttl=3600,\n    type=\"MX\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var www = new Scaleway.DomainRecord(\"www\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n    var www2 = new Scaleway.DomainRecord(\"www2\", new()\n    {\n        Data = \"1.2.3.5\",\n        DnsZone = \"domain.tld\",\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n    var mx = new Scaleway.DomainRecord(\"mx\", new()\n    {\n        Data = \"mx.online.net.\",\n        DnsZone = \"domain.tld\",\n        Priority = 10,\n        Ttl = 3600,\n        Type = \"MX\",\n    });\n\n    var mx2 = new Scaleway.DomainRecord(\"mx2\", new()\n    {\n        Data = \"mx-cache.online.net.\",\n        DnsZone = \"domain.tld\",\n        Priority = 20,\n        Ttl = 3600,\n        Type = \"MX\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainRecord(ctx, \"www\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"www2\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.5\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:     pulumi.String(\"mx.online.net.\"),\n\t\t\tDnsZone:  pulumi.String(\"domain.tld\"),\n\t\t\tPriority: pulumi.Int(10),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tType:     pulumi.String(\"MX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx2\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:     pulumi.String(\"mx-cache.online.net.\"),\n\t\t\tDnsZone:  pulumi.String(\"domain.tld\"),\n\t\t\tPriority: pulumi.Int(20),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tType:     pulumi.String(\"MX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www = new DomainRecord(\"www\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n        var www2 = new DomainRecord(\"www2\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.5\")\n            .dnsZone(\"domain.tld\")\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n        var mx = new DomainRecord(\"mx\", DomainRecordArgs.builder()        \n            .data(\"mx.online.net.\")\n            .dnsZone(\"domain.tld\")\n            .priority(10)\n            .ttl(3600)\n            .type(\"MX\")\n            .build());\n\n        var mx2 = new DomainRecord(\"mx2\", DomainRecordArgs.builder()        \n            .data(\"mx-cache.online.net.\")\n            .dnsZone(\"domain.tld\")\n            .priority(20)\n            .ttl(3600)\n            .type(\"MX\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  www:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      ttl: 3600\n      type: A\n  www2:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.5\n      dnsZone: domain.tld\n      ttl: 3600\n      type: A\n  mx:\n    type: scaleway:DomainRecord\n    properties:\n      data: mx.online.net.\n      dnsZone: domain.tld\n      priority: 10\n      ttl: 3600\n      type: MX\n  mx2:\n    type: scaleway:DomainRecord\n    properties:\n      data: mx-cache.online.net.\n      dnsZone: domain.tld\n      priority: 20\n      ttl: 3600\n      type: MX\n```\n\n### With dynamic records\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst geoIp = new scaleway.DomainRecord(\"geo_ip\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    geoIp: {\n        matches: [\n            {\n                continents: [\"EU\"],\n                countries: [\"FR\"],\n                data: \"1.2.3.5\",\n            },\n            {\n                continents: [\"NA\"],\n                data: \"4.3.2.1\",\n            },\n        ],\n    },\n    ttl: 3600,\n    type: \"A\",\n});\nconst httpService = new scaleway.DomainRecord(\"http_service\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    httpService: {\n        ips: [\n            \"1.2.3.5\",\n            \"1.2.3.6\",\n        ],\n        mustContain: \"up\",\n        strategy: \"hashed\",\n        url: \"http://mywebsite.com/health\",\n        userAgent: \"scw_service_up\",\n    },\n    ttl: 3600,\n    type: \"A\",\n});\nconst view = new scaleway.DomainRecord(\"view\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n    views: [\n        {\n            data: \"1.2.3.5\",\n            subnet: \"100.0.0.0/16\",\n        },\n        {\n            data: \"1.2.3.6\",\n            subnet: \"100.1.0.0/16\",\n        },\n    ],\n});\nconst weighted = new scaleway.DomainRecord(\"weighted\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n    weighteds: [\n        {\n            ip: \"1.2.3.5\",\n            weight: 1,\n        },\n        {\n            ip: \"1.2.3.6\",\n            weight: 2,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\ngeo_ip = scaleway.DomainRecord(\"geoIp\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    geo_ip=scaleway.DomainRecordGeoIpArgs(\n        matches=[\n            scaleway.DomainRecordGeoIpMatchArgs(\n                continents=[\"EU\"],\n                countries=[\"FR\"],\n                data=\"1.2.3.5\",\n            ),\n            scaleway.DomainRecordGeoIpMatchArgs(\n                continents=[\"NA\"],\n                data=\"4.3.2.1\",\n            ),\n        ],\n    ),\n    ttl=3600,\n    type=\"A\")\nhttp_service = scaleway.DomainRecord(\"httpService\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    http_service=scaleway.DomainRecordHttpServiceArgs(\n        ips=[\n            \"1.2.3.5\",\n            \"1.2.3.6\",\n        ],\n        must_contain=\"up\",\n        strategy=\"hashed\",\n        url=\"http://mywebsite.com/health\",\n        user_agent=\"scw_service_up\",\n    ),\n    ttl=3600,\n    type=\"A\")\nview = scaleway.DomainRecord(\"view\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\",\n    views=[\n        scaleway.DomainRecordViewArgs(\n            data=\"1.2.3.5\",\n            subnet=\"100.0.0.0/16\",\n        ),\n        scaleway.DomainRecordViewArgs(\n            data=\"1.2.3.6\",\n            subnet=\"100.1.0.0/16\",\n        ),\n    ])\nweighted = scaleway.DomainRecord(\"weighted\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\",\n    weighteds=[\n        scaleway.DomainRecordWeightedArgs(\n            ip=\"1.2.3.5\",\n            weight=1,\n        ),\n        scaleway.DomainRecordWeightedArgs(\n            ip=\"1.2.3.6\",\n            weight=2,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var geoIp = new Scaleway.DomainRecord(\"geoIp\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        GeoIp = new Scaleway.Inputs.DomainRecordGeoIpArgs\n        {\n            Matches = new[]\n            {\n                new Scaleway.Inputs.DomainRecordGeoIpMatchArgs\n                {\n                    Continents = new[]\n                    {\n                        \"EU\",\n                    },\n                    Countries = new[]\n                    {\n                        \"FR\",\n                    },\n                    Data = \"1.2.3.5\",\n                },\n                new Scaleway.Inputs.DomainRecordGeoIpMatchArgs\n                {\n                    Continents = new[]\n                    {\n                        \"NA\",\n                    },\n                    Data = \"4.3.2.1\",\n                },\n            },\n        },\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n    var httpService = new Scaleway.DomainRecord(\"httpService\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        HttpService = new Scaleway.Inputs.DomainRecordHttpServiceArgs\n        {\n            Ips = new[]\n            {\n                \"1.2.3.5\",\n                \"1.2.3.6\",\n            },\n            MustContain = \"up\",\n            Strategy = \"hashed\",\n            Url = \"http://mywebsite.com/health\",\n            UserAgent = \"scw_service_up\",\n        },\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n    var view = new Scaleway.DomainRecord(\"view\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        Ttl = 3600,\n        Type = \"A\",\n        Views = new[]\n        {\n            new Scaleway.Inputs.DomainRecordViewArgs\n            {\n                Data = \"1.2.3.5\",\n                Subnet = \"100.0.0.0/16\",\n            },\n            new Scaleway.Inputs.DomainRecordViewArgs\n            {\n                Data = \"1.2.3.6\",\n                Subnet = \"100.1.0.0/16\",\n            },\n        },\n    });\n\n    var weighted = new Scaleway.DomainRecord(\"weighted\", new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        Ttl = 3600,\n        Type = \"A\",\n        Weighteds = new[]\n        {\n            new Scaleway.Inputs.DomainRecordWeightedArgs\n            {\n                Ip = \"1.2.3.5\",\n                Weight = 1,\n            },\n            new Scaleway.Inputs.DomainRecordWeightedArgs\n            {\n                Ip = \"1.2.3.6\",\n                Weight = 2,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainRecord(ctx, \"geoIp\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tGeoIp: \u0026DomainRecordGeoIpArgs{\n\t\t\t\tMatches: DomainRecordGeoIpMatchArray{\n\t\t\t\t\t\u0026DomainRecordGeoIpMatchArgs{\n\t\t\t\t\t\tContinents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"EU\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tCountries: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"FR\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tData: pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026DomainRecordGeoIpMatchArgs{\n\t\t\t\t\t\tContinents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"NA\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tData: pulumi.String(\"4.3.2.1\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTtl:  pulumi.Int(3600),\n\t\t\tType: pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"httpService\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tHttpService: \u0026DomainRecordHttpServiceArgs{\n\t\t\t\tIps: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tpulumi.String(\"1.2.3.6\"),\n\t\t\t\t},\n\t\t\t\tMustContain: pulumi.String(\"up\"),\n\t\t\t\tStrategy:    pulumi.String(\"hashed\"),\n\t\t\t\tUrl:         pulumi.String(\"http://mywebsite.com/health\"),\n\t\t\t\tUserAgent:   pulumi.String(\"scw_service_up\"),\n\t\t\t},\n\t\t\tTtl:  pulumi.Int(3600),\n\t\t\tType: pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"view\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tViews: DomainRecordViewArray{\n\t\t\t\t\u0026DomainRecordViewArgs{\n\t\t\t\t\tData:   pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tSubnet: pulumi.String(\"100.0.0.0/16\"),\n\t\t\t\t},\n\t\t\t\t\u0026DomainRecordViewArgs{\n\t\t\t\t\tData:   pulumi.String(\"1.2.3.6\"),\n\t\t\t\t\tSubnet: pulumi.String(\"100.1.0.0/16\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"weighted\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tWeighteds: DomainRecordWeightedArray{\n\t\t\t\t\u0026DomainRecordWeightedArgs{\n\t\t\t\t\tIp:     pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tWeight: pulumi.Int(1),\n\t\t\t\t},\n\t\t\t\t\u0026DomainRecordWeightedArgs{\n\t\t\t\t\tIp:     pulumi.String(\"1.2.3.6\"),\n\t\t\t\t\tWeight: pulumi.Int(2),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordGeoIpArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordHttpServiceArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordViewArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordWeightedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var geoIp = new DomainRecord(\"geoIp\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .geoIp(DomainRecordGeoIpArgs.builder()\n                .matches(                \n                    DomainRecordGeoIpMatchArgs.builder()\n                        .continents(\"EU\")\n                        .countries(\"FR\")\n                        .data(\"1.2.3.5\")\n                        .build(),\n                    DomainRecordGeoIpMatchArgs.builder()\n                        .continents(\"NA\")\n                        .data(\"4.3.2.1\")\n                        .build())\n                .build())\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n        var httpService = new DomainRecord(\"httpService\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .httpService(DomainRecordHttpServiceArgs.builder()\n                .ips(                \n                    \"1.2.3.5\",\n                    \"1.2.3.6\")\n                .mustContain(\"up\")\n                .strategy(\"hashed\")\n                .url(\"http://mywebsite.com/health\")\n                .userAgent(\"scw_service_up\")\n                .build())\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n        var view = new DomainRecord(\"view\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .ttl(3600)\n            .type(\"A\")\n            .views(            \n                DomainRecordViewArgs.builder()\n                    .data(\"1.2.3.5\")\n                    .subnet(\"100.0.0.0/16\")\n                    .build(),\n                DomainRecordViewArgs.builder()\n                    .data(\"1.2.3.6\")\n                    .subnet(\"100.1.0.0/16\")\n                    .build())\n            .build());\n\n        var weighted = new DomainRecord(\"weighted\", DomainRecordArgs.builder()        \n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .ttl(3600)\n            .type(\"A\")\n            .weighteds(            \n                DomainRecordWeightedArgs.builder()\n                    .ip(\"1.2.3.5\")\n                    .weight(1)\n                    .build(),\n                DomainRecordWeightedArgs.builder()\n                    .ip(\"1.2.3.6\")\n                    .weight(2)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  geoIp:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      geoIp:\n        matches:\n          - continents:\n              - EU\n            countries:\n              - FR\n            data: 1.2.3.5\n          - continents:\n              - NA\n            data: 4.3.2.1\n      ttl: 3600\n      type: A\n  httpService:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      httpService:\n        ips:\n          - 1.2.3.5\n          - 1.2.3.6\n        mustContain: up\n        strategy: hashed\n        url: http://mywebsite.com/health\n        userAgent: scw_service_up\n      ttl: 3600\n      type: A\n  view:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      ttl: 3600\n      type: A\n      views:\n        - data: 1.2.3.5\n          subnet: 100.0.0.0/16\n        - data: 1.2.3.6\n          subnet: 100.1.0.0/16\n  weighted:\n    type: scaleway:DomainRecord\n    properties:\n      data: 1.2.3.4\n      dnsZone: domain.tld\n      ttl: 3600\n      type: A\n      weighteds:\n        - ip: 1.2.3.5\n          weight: 1\n        - ip: 1.2.3.6\n          weight: 2\n```\n\n### Create an instance and add records with the new instance IP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst dnsZone = config.require(\"dnsZone\");\nconst publicIp = new scaleway.InstanceIp(\"publicIp\", {projectId: projectId});\nconst web = new scaleway.InstanceServer(\"web\", {\n    projectId: projectId,\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    tags: [\n        \"front\",\n        \"web\",\n    ],\n    ipId: publicIp.id,\n    rootVolume: {\n        sizeInGb: 20,\n    },\n});\nconst webA = new scaleway.DomainRecord(\"webA\", {\n    dnsZone: dnsZone,\n    type: \"A\",\n    data: web.publicIp,\n    ttl: 3600,\n});\nconst webCname = new scaleway.DomainRecord(\"webCname\", {\n    dnsZone: dnsZone,\n    type: \"CNAME\",\n    data: `web.${dnsZone}.`,\n    ttl: 3600,\n});\nconst webAlias = new scaleway.DomainRecord(\"webAlias\", {\n    dnsZone: dnsZone,\n    type: \"ALIAS\",\n    data: `web.${dnsZone}.`,\n    ttl: 3600,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\ndns_zone = config.require(\"dnsZone\")\npublic_ip = scaleway.InstanceIp(\"publicIp\", project_id=project_id)\nweb = scaleway.InstanceServer(\"web\",\n    project_id=project_id,\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    tags=[\n        \"front\",\n        \"web\",\n    ],\n    ip_id=public_ip.id,\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        size_in_gb=20,\n    ))\nweb_a = scaleway.DomainRecord(\"webA\",\n    dns_zone=dns_zone,\n    type=\"A\",\n    data=web.public_ip,\n    ttl=3600)\nweb_cname = scaleway.DomainRecord(\"webCname\",\n    dns_zone=dns_zone,\n    type=\"CNAME\",\n    data=f\"web.{dns_zone}.\",\n    ttl=3600)\nweb_alias = scaleway.DomainRecord(\"webAlias\",\n    dns_zone=dns_zone,\n    type=\"ALIAS\",\n    data=f\"web.{dns_zone}.\",\n    ttl=3600)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var projectId = config.Require(\"projectId\");\n    var dnsZone = config.Require(\"dnsZone\");\n    var publicIp = new Scaleway.InstanceIp(\"publicIp\", new()\n    {\n        ProjectId = projectId,\n    });\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        ProjectId = projectId,\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        Tags = new[]\n        {\n            \"front\",\n            \"web\",\n        },\n        IpId = publicIp.Id,\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            SizeInGb = 20,\n        },\n    });\n\n    var webA = new Scaleway.DomainRecord(\"webA\", new()\n    {\n        DnsZone = dnsZone,\n        Type = \"A\",\n        Data = web.PublicIp,\n        Ttl = 3600,\n    });\n\n    var webCname = new Scaleway.DomainRecord(\"webCname\", new()\n    {\n        DnsZone = dnsZone,\n        Type = \"CNAME\",\n        Data = $\"web.{dnsZone}.\",\n        Ttl = 3600,\n    });\n\n    var webAlias = new Scaleway.DomainRecord(\"webAlias\", new()\n    {\n        DnsZone = dnsZone,\n        Type = \"ALIAS\",\n        Data = $\"web.{dnsZone}.\",\n        Ttl = 3600,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tdnsZone := cfg.Require(\"dnsZone\")\n\t\tpublicIp, err := scaleway.NewInstanceIp(ctx, \"publicIp\", \u0026scaleway.InstanceIpArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tweb, err := scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t\tType:      pulumi.String(\"DEV1-S\"),\n\t\t\tImage:     pulumi.String(\"ubuntu_jammy\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"front\"),\n\t\t\t\tpulumi.String(\"web\"),\n\t\t\t},\n\t\t\tIpId: publicIp.ID(),\n\t\t\tRootVolume: \u0026InstanceServerRootVolumeArgs{\n\t\t\t\tSizeInGb: pulumi.Int(20),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"webA\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    web.PublicIp,\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"webCname\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tType:    pulumi.String(\"CNAME\"),\n\t\t\tData:    pulumi.String(fmt.Sprintf(\"web.%v.\", dnsZone)),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"webAlias\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tType:    pulumi.String(\"ALIAS\"),\n\t\t\tData:    pulumi.String(fmt.Sprintf(\"web.%v.\", dnsZone)),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.InstanceIpArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\");\n        final var dnsZone = config.get(\"dnsZone\");\n        var publicIp = new InstanceIp(\"publicIp\", InstanceIpArgs.builder()        \n            .projectId(projectId)\n            .build());\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .projectId(projectId)\n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .tags(            \n                \"front\",\n                \"web\")\n            .ipId(publicIp.id())\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .sizeInGb(20)\n                .build())\n            .build());\n\n        var webA = new DomainRecord(\"webA\", DomainRecordArgs.builder()        \n            .dnsZone(dnsZone)\n            .type(\"A\")\n            .data(web.publicIp())\n            .ttl(3600)\n            .build());\n\n        var webCname = new DomainRecord(\"webCname\", DomainRecordArgs.builder()        \n            .dnsZone(dnsZone)\n            .type(\"CNAME\")\n            .data(String.format(\"web.%s.\", dnsZone))\n            .ttl(3600)\n            .build());\n\n        var webAlias = new DomainRecord(\"webAlias\", DomainRecordArgs.builder()        \n            .dnsZone(dnsZone)\n            .type(\"ALIAS\")\n            .data(String.format(\"web.%s.\", dnsZone))\n            .ttl(3600)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  projectId:\n    type: string\n  dnsZone:\n    type: string\nresources:\n  publicIp:\n    type: scaleway:InstanceIp\n    properties:\n      projectId: ${projectId}\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      projectId: ${projectId}\n      type: DEV1-S\n      image: ubuntu_jammy\n      tags:\n        - front\n        - web\n      ipId: ${publicIp.id}\n      rootVolume:\n        sizeInGb: 20\n  webA:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${dnsZone}\n      type: A\n      data: ${web.publicIp}\n      ttl: 3600\n  webCname:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${dnsZone}\n      type: CNAME\n      data: web.${dnsZone}.\n      ttl: 3600\n  webAlias:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${dnsZone}\n      type: ALIAS\n      data: web.${dnsZone}.\n      ttl: 3600\n```\n\n## Multiple records\n\nSome record types can have multiple `data` with the same `name` (eg: `A`, `AAAA`, `MX`, `NS`...).  \nYou can duplicate a resource `scaleway.DomainRecord` with the same `name`, the records will be added.\n\nPlease note, some record (eg: `CNAME`, Multiple dynamic records of different types...) has to be unique.\n\n\n## Import\n\nRecord can be imported using the `{dns_zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/domainRecord:DomainRecord www subdomain.domain.tld/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The data of the view record\n"
                },
                "dnsZone": {
                    "type": "string",
                    "description": "The DNS Zone of the domain. If the DNS zone doesn't exist, it will be automatically created.\n"
                },
                "geoIp": {
                    "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                    "description": "The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)\n"
                },
                "httpService": {
                    "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                    "description": "The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)\n"
                },
                "keepEmptyZone": {
                    "type": "boolean",
                    "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the record (can be an empty string for a root record).\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the record (mostly used with an `MX` record)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "rootZone": {
                    "type": "boolean",
                    "description": "Does the DNS zone is the root zone or not\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time To Live of the record in seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n"
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                    },
                    "description": "The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)\n"
                },
                "weighteds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                    },
                    "description": "You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)\n"
                }
            },
            "required": [
                "data",
                "dnsZone",
                "name",
                "priority",
                "projectId",
                "rootZone",
                "type"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "The data of the view record\n"
                },
                "dnsZone": {
                    "type": "string",
                    "description": "The DNS Zone of the domain. If the DNS zone doesn't exist, it will be automatically created.\n",
                    "willReplaceOnChanges": true
                },
                "geoIp": {
                    "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                    "description": "The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)\n"
                },
                "httpService": {
                    "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                    "description": "The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)\n"
                },
                "keepEmptyZone": {
                    "type": "boolean",
                    "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the record (can be an empty string for a root record).\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the record (mostly used with an `MX` record)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time To Live of the record in seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n",
                    "willReplaceOnChanges": true
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                    },
                    "description": "The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)\n"
                },
                "weighteds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                    },
                    "description": "You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)\n"
                }
            },
            "requiredInputs": [
                "data",
                "dnsZone",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainRecord resources.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The data of the view record\n"
                    },
                    "dnsZone": {
                        "type": "string",
                        "description": "The DNS Zone of the domain. If the DNS zone doesn't exist, it will be automatically created.\n",
                        "willReplaceOnChanges": true
                    },
                    "geoIp": {
                        "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                        "description": "The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#geo-ip-records)\n"
                    },
                    "httpService": {
                        "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                        "description": "The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#healthcheck-records)\n"
                    },
                    "keepEmptyZone": {
                        "type": "boolean",
                        "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record (can be an empty string for a root record).\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the record (mostly used with an `MX` record)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "rootZone": {
                        "type": "boolean",
                        "description": "Does the DNS zone is the root zone or not\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time To Live of the record in seconds.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n",
                        "willReplaceOnChanges": true
                    },
                    "views": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                        },
                        "description": "The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#views-records)\n"
                    },
                    "weighteds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                        },
                        "description": "You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/#weight-records)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/domainZone:DomainZone": {
            "description": "Creates and manages Scaleway Domain zone.  \nFor more information, see [the documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/configure-dns-zones/).\n\n## Examples\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst test = new scaleway.DomainZone(\"test\", {\n    domain: \"scaleway-terraform.com\",\n    subdomain: \"test\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\ntest = scaleway.DomainZone(\"test\",\n    domain=\"scaleway-terraform.com\",\n    subdomain=\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Scaleway.DomainZone(\"test\", new()\n    {\n        Domain = \"scaleway-terraform.com\",\n        Subdomain = \"test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainZone(ctx, \"test\", \u0026scaleway.DomainZoneArgs{\n\t\t\tDomain:    pulumi.String(\"scaleway-terraform.com\"),\n\t\t\tSubdomain: pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DomainZone;\nimport com.pulumi.scaleway.DomainZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DomainZone(\"test\", DomainZoneArgs.builder()        \n            .domain(\"scaleway-terraform.com\")\n            .subdomain(\"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: scaleway:DomainZone\n    properties:\n      domain: scaleway-terraform.com\n      subdomain: test\n```\n\n\n## Import\n\nZone can be imported using the `{subdomain}.{domain}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/domainZone:DomainZone test test.scaleway-terraform.com\n```\n\n ",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain where the DNS zone will be created.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message\n"
                },
                "ns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "NameServer list for zone.\n"
                },
                "nsDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "NameServer default list for zone.\n"
                },
                "nsMasters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "NameServer master list for zone.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The domain zone status.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "The subdomain(zone name) to create in the domain.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the DNS zone.\n"
                }
            },
            "required": [
                "domain",
                "message",
                "ns",
                "nsDefaults",
                "nsMasters",
                "projectId",
                "status",
                "subdomain",
                "updatedAt"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain where the DNS zone will be created.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "The subdomain(zone name) to create in the domain.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "subdomain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainZone resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain where the DNS zone will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Message\n"
                    },
                    "ns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer list for zone.\n"
                    },
                    "nsDefaults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer default list for zone.\n"
                    },
                    "nsMasters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer master list for zone.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the domain is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The domain zone status.\n"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "The subdomain(zone name) to create in the domain.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the DNS zone.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/flexibleIp:FlexibleIp": {
            "description": "Creates and manages Scaleway flexible IPs.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/flexible-ip/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.FlexibleIp(\"main\", {\n    reverse: \"my-reverse.com\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.FlexibleIp(\"main\", reverse=\"my-reverse.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FlexibleIp(\"main\", new()\n    {\n        Reverse = \"my-reverse.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFlexibleIp(ctx, \"main\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tReverse: pulumi.String(\"my-reverse.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FlexibleIp(\"main\", FlexibleIpArgs.builder()        \n            .reverse(\"my-reverse.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FlexibleIp\n    properties:\n      reverse: my-reverse.com\n```\n\n### With zone\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.FlexibleIp(\"main\", {\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.FlexibleIp(\"main\", zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FlexibleIp(\"main\", new()\n    {\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFlexibleIp(ctx, \"main\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tZone: pulumi.String(\"fr-par-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FlexibleIp(\"main\", FlexibleIpArgs.builder()        \n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FlexibleIp\n    properties:\n      zone: fr-par-2\n```\n\n### With baremetal server\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst mainAccountSshKey = new scaleway.AccountSshKey(\"mainAccountSshKey\", {publicKey: \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\"});\nconst byId = scaleway.getBaremetalOs({\n    zone: \"fr-par-2\",\n    name: \"Ubuntu\",\n    version: \"20.04 LTS (Focal Fossa)\",\n});\nconst myOffer = scaleway.getBaremetalOffer({\n    zone: \"fr-par-2\",\n    name: \"EM-A210R-HDD\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    os: byId.then(byId =\u003e byId.osId),\n    sshKeyIds: mainAccountSshKey.id,\n});\nconst mainFlexibleIp = new scaleway.FlexibleIp(\"mainFlexibleIp\", {\n    serverId: base.id,\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain_account_ssh_key = scaleway.AccountSshKey(\"mainAccountSshKey\", public_key=\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\")\nby_id = scaleway.get_baremetal_os(zone=\"fr-par-2\",\n    name=\"Ubuntu\",\n    version=\"20.04 LTS (Focal Fossa)\")\nmy_offer = scaleway.get_baremetal_offer(zone=\"fr-par-2\",\n    name=\"EM-A210R-HDD\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=my_offer.offer_id,\n    os=by_id.os_id,\n    ssh_key_ids=main_account_ssh_key.id)\nmain_flexible_ip = scaleway.FlexibleIp(\"mainFlexibleIp\",\n    server_id=base.id,\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainAccountSshKey = new Scaleway.AccountSshKey(\"mainAccountSshKey\", new()\n    {\n        PublicKey = \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\",\n    });\n\n    var byId = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"Ubuntu\",\n        Version = \"20.04 LTS (Focal Fossa)\",\n    });\n\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"EM-A210R-HDD\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        Os = byId.Apply(getBaremetalOsResult =\u003e getBaremetalOsResult.OsId),\n        SshKeyIds = mainAccountSshKey.Id,\n    });\n\n    var mainFlexibleIp = new Scaleway.FlexibleIp(\"mainFlexibleIp\", new()\n    {\n        ServerId = @base.Id,\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainAccountSshKey, err := scaleway.NewAccountSshKey(ctx, \"mainAccountSshKey\", \u0026scaleway.AccountSshKeyArgs{\n\t\t\tPublicKey: pulumi.String(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbyId, err := scaleway.GetBaremetalOs(ctx, \u0026GetBaremetalOsArgs{\n\t\t\tZone:    pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName:    pulumi.StringRef(\"Ubuntu\"),\n\t\t\tVersion: pulumi.StringRef(\"20.04 LTS (Focal Fossa)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026GetBaremetalOfferArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"EM-A210R-HDD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:      pulumi.String(\"fr-par-2\"),\n\t\t\tOffer:     pulumi.String(myOffer.OfferId),\n\t\t\tOs:        pulumi.String(byId.OsId),\n\t\t\tSshKeyIds: mainAccountSshKey.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIp(ctx, \"mainFlexibleIp\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t\tZone:     pulumi.String(\"fr-par-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountSshKey;\nimport com.pulumi.scaleway.AccountSshKeyArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOsArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainAccountSshKey = new AccountSshKey(\"mainAccountSshKey\", AccountSshKeyArgs.builder()        \n            .publicKey(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\")\n            .build());\n\n        final var byId = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"Ubuntu\")\n            .version(\"20.04 LTS (Focal Fossa)\")\n            .build());\n\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"EM-A210R-HDD\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()        \n            .zone(\"fr-par-2\")\n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .os(byId.applyValue(getBaremetalOsResult -\u003e getBaremetalOsResult.osId()))\n            .sshKeyIds(mainAccountSshKey.id())\n            .build());\n\n        var mainFlexibleIp = new FlexibleIp(\"mainFlexibleIp\", FlexibleIpArgs.builder()        \n            .serverId(base.id())\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainAccountSshKey:\n    type: scaleway:AccountSshKey\n    properties:\n      publicKey: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: ${myOffer.offerId}\n      os: ${byId.osId}\n      sshKeyIds: ${mainAccountSshKey.id}\n  mainFlexibleIp:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n      zone: fr-par-2\nvariables:\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        zone: fr-par-2\n        name: Ubuntu\n        version: 20.04 LTS (Focal Fossa)\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        zone: fr-par-2\n        name: EM-A210R-HDD\n```\n\n\n## Import\n\nFlexible IPs can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/flexibleIp:FlexibleIp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Flexible IP (Format ISO 8601)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the flexible IP\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IPv4 address of the Flexible IP\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address of the server associated with this flexible IP\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization of the Flexible IP\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project of the Flexible IP\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this flexible IP.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the associated server\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the flexible IP\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Flexible IP (Format ISO 8601)\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Flexible IP\n"
                }
            },
            "required": [
                "createdAt",
                "ipAddress",
                "macAddress",
                "organizationId",
                "projectId",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the flexible IP\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project of the Flexible IP\n",
                    "willReplaceOnChanges": true
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this flexible IP.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the associated server\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the flexible IP\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Flexible IP\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FlexibleIp resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Flexible IP (Format ISO 8601)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the flexible IP\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IPv4 address of the Flexible IP\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address of the server associated with this flexible IP\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization of the Flexible IP\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project of the Flexible IP\n",
                        "willReplaceOnChanges": true
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this flexible IP.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the associated server\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the flexible IP\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Flexible IP (Format ISO 8601)\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone of the Flexible IP\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/function:Function": {
            "description": "Creates and manages Scaleway Functions.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/functions/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainFunctionNamespace = new scaleway.FunctionNamespace(\"mainFunctionNamespace\", {description: \"Main function namespace\"});\nconst mainFunction = new scaleway.Function(\"mainFunction\", {\n    namespaceId: mainFunctionNamespace.id,\n    runtime: \"go118\",\n    handler: \"Handle\",\n    privacy: \"private\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_function_namespace = scaleway.FunctionNamespace(\"mainFunctionNamespace\", description=\"Main function namespace\")\nmain_function = scaleway.Function(\"mainFunction\",\n    namespace_id=main_function_namespace.id,\n    runtime=\"go118\",\n    handler=\"Handle\",\n    privacy=\"private\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFunctionNamespace = new Scaleway.FunctionNamespace(\"mainFunctionNamespace\", new()\n    {\n        Description = \"Main function namespace\",\n    });\n\n    var mainFunction = new Scaleway.Function(\"mainFunction\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        Runtime = \"go118\",\n        Handler = \"Handle\",\n        Privacy = \"private\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFunctionNamespace, err := scaleway.NewFunctionNamespace(ctx, \"mainFunctionNamespace\", \u0026scaleway.FunctionNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Main function namespace\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFunction(ctx, \"mainFunction\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tRuntime:     pulumi.String(\"go118\"),\n\t\t\tHandler:     pulumi.String(\"Handle\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.FunctionNamespaceArgs;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFunctionNamespace = new FunctionNamespace(\"mainFunctionNamespace\", FunctionNamespaceArgs.builder()        \n            .description(\"Main function namespace\")\n            .build());\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .runtime(\"go118\")\n            .handler(\"Handle\")\n            .privacy(\"private\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainFunctionNamespace:\n    type: scaleway:FunctionNamespace\n    properties:\n      description: Main function namespace\n  mainFunction:\n    type: scaleway:Function\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      runtime: go118\n      handler: Handle\n      privacy: private\n```\n\n\n## Import\n\nFunctions can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/function:Function main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "cpuLimit": {
                    "type": "integer",
                    "description": "The CPU limit in mCPU for your function. More infos on resources [here](https://developers.scaleway.com/en/products/functions/api/#functions)\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Define if the function should be deployed, terraform will wait for function to be deployed\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the function.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The native domain name of the function\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the function.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Handler of the function. Depends on the runtime ([function guide](https://developers.scaleway.com/en/products/functions/api/#create-a-function))\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "Maximum replicas for your function (defaults to 20), our system will scale your functions automatically based on incoming workload, but will never scale the number of replicas above the configured max_scale.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "Memory limit in MB for your function, defaults to 128MB\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "Minimum replicas for your function, defaults to 0, Note that a function is billed when it gets executed, and using a min_scale greater than 0 will cause your function container to run constantly.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace ID associated with this function\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the function is associated with.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "Privacy of the function. Can be either `private` or `public`. Read more on [authentication](https://developers.scaleway.com/en/products/functions/api/#authentication)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime of the function. Runtimes can be fetched using [specific route](https://developers.scaleway.com/en/products/functions/api/#get-f7de6a)\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/functions/concepts/#secrets) variables of the function.\n",
                    "secret": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "Holds the max duration (in seconds) the function is allowed for responding to a request\n"
                },
                "zipFile": {
                    "type": "string",
                    "description": "Location of the zip file to upload containing your function sources\n"
                },
                "zipHash": {
                    "type": "string",
                    "description": "The hash of your source zip file, changing it will re-apply function. Can be any string\n"
                }
            },
            "required": [
                "cpuLimit",
                "domainName",
                "handler",
                "name",
                "namespaceId",
                "organizationId",
                "privacy",
                "projectId",
                "region",
                "runtime",
                "timeout"
            ],
            "inputProperties": {
                "deploy": {
                    "type": "boolean",
                    "description": "Define if the function should be deployed, terraform will wait for function to be deployed\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the function.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the function.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Handler of the function. Depends on the runtime ([function guide](https://developers.scaleway.com/en/products/functions/api/#create-a-function))\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "Maximum replicas for your function (defaults to 20), our system will scale your functions automatically based on incoming workload, but will never scale the number of replicas above the configured max_scale.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "Memory limit in MB for your function, defaults to 128MB\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "Minimum replicas for your function, defaults to 0, Note that a function is billed when it gets executed, and using a min_scale greater than 0 will cause your function container to run constantly.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace ID associated with this function\n",
                    "willReplaceOnChanges": true
                },
                "privacy": {
                    "type": "string",
                    "description": "Privacy of the function. Can be either `private` or `public`. Read more on [authentication](https://developers.scaleway.com/en/products/functions/api/#authentication)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime of the function. Runtimes can be fetched using [specific route](https://developers.scaleway.com/en/products/functions/api/#get-f7de6a)\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/functions/concepts/#secrets) variables of the function.\n",
                    "secret": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "Holds the max duration (in seconds) the function is allowed for responding to a request\n"
                },
                "zipFile": {
                    "type": "string",
                    "description": "Location of the zip file to upload containing your function sources\n"
                },
                "zipHash": {
                    "type": "string",
                    "description": "The hash of your source zip file, changing it will re-apply function. Can be any string\n"
                }
            },
            "requiredInputs": [
                "handler",
                "namespaceId",
                "privacy",
                "runtime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Function resources.\n",
                "properties": {
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The CPU limit in mCPU for your function. More infos on resources [here](https://developers.scaleway.com/en/products/functions/api/#functions)\n"
                    },
                    "deploy": {
                        "type": "boolean",
                        "description": "Define if the function should be deployed, terraform will wait for function to be deployed\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the function.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The native domain name of the function\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the function.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "Handler of the function. Depends on the runtime ([function guide](https://developers.scaleway.com/en/products/functions/api/#create-a-function))\n"
                    },
                    "maxScale": {
                        "type": "integer",
                        "description": "Maximum replicas for your function (defaults to 20), our system will scale your functions automatically based on incoming workload, but will never scale the number of replicas above the configured max_scale.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "Memory limit in MB for your function, defaults to 128MB\n"
                    },
                    "minScale": {
                        "type": "integer",
                        "description": "Minimum replicas for your function, defaults to 0, Note that a function is billed when it gets executed, and using a min_scale greater than 0 will cause your function container to run constantly.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the function.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace ID associated with this function\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the function is associated with.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "Privacy of the function. Can be either `private` or `public`. Read more on [authentication](https://developers.scaleway.com/en/products/functions/api/#authentication)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "runtime": {
                        "type": "string",
                        "description": "Runtime of the function. Runtimes can be fetched using [specific route](https://developers.scaleway.com/en/products/functions/api/#get-f7de6a)\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/functions/concepts/#secrets) variables of the function.\n",
                        "secret": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Holds the max duration (in seconds) the function is allowed for responding to a request\n"
                    },
                    "zipFile": {
                        "type": "string",
                        "description": "Location of the zip file to upload containing your function sources\n"
                    },
                    "zipHash": {
                        "type": "string",
                        "description": "The hash of your source zip file, changing it will re-apply function. Can be any string\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionCron:FunctionCron": {
            "description": "Creates and manages Scaleway Function Triggers. For the moment, the feature is limited to CRON Schedule (time-based).\n\nFor more information consult\nthe [documentation](https://www.scaleway.com/en/docs/compute/functions/api-cli/fun-uploading-with-serverless-framework/#configuring-events)\n.\n\nFor more details about the limitation\ncheck [functions-limitations](https://www.scaleway.com/en/docs/compute/functions/reference-content/functions-limitations/).\n\nYou can check also\nour [functions cron api documentation](https://developers.scaleway.com/en/products/functions/api/#crons-942bf4).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainFunctionNamespace = new scaleway.FunctionNamespace(\"mainFunctionNamespace\", {});\nconst mainFunction = new scaleway.Function(\"mainFunction\", {\n    namespaceId: mainFunctionNamespace.id,\n    runtime: \"node14\",\n    privacy: \"private\",\n    handler: \"handler.handle\",\n});\nconst mainFunctionCron = new scaleway.FunctionCron(\"mainFunctionCron\", {\n    functionId: mainFunction.id,\n    schedule: \"0 0 * * *\",\n    args: JSON.stringify({\n        test: \"scw\",\n    }),\n});\nconst func = new scaleway.FunctionCron(\"func\", {\n    functionId: mainFunction.id,\n    schedule: \"0 1 * * *\",\n    args: JSON.stringify({\n        my_var: \"terraform\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_function_namespace = scaleway.FunctionNamespace(\"mainFunctionNamespace\")\nmain_function = scaleway.Function(\"mainFunction\",\n    namespace_id=main_function_namespace.id,\n    runtime=\"node14\",\n    privacy=\"private\",\n    handler=\"handler.handle\")\nmain_function_cron = scaleway.FunctionCron(\"mainFunctionCron\",\n    function_id=main_function.id,\n    schedule=\"0 0 * * *\",\n    args=json.dumps({\n        \"test\": \"scw\",\n    }))\nfunc = scaleway.FunctionCron(\"func\",\n    function_id=main_function.id,\n    schedule=\"0 1 * * *\",\n    args=json.dumps({\n        \"my_var\": \"terraform\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFunctionNamespace = new Scaleway.FunctionNamespace(\"mainFunctionNamespace\");\n\n    var mainFunction = new Scaleway.Function(\"mainFunction\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        Runtime = \"node14\",\n        Privacy = \"private\",\n        Handler = \"handler.handle\",\n    });\n\n    var mainFunctionCron = new Scaleway.FunctionCron(\"mainFunctionCron\", new()\n    {\n        FunctionId = mainFunction.Id,\n        Schedule = \"0 0 * * *\",\n        Args = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"test\"] = \"scw\",\n        }),\n    });\n\n    var func = new Scaleway.FunctionCron(\"func\", new()\n    {\n        FunctionId = mainFunction.Id,\n        Schedule = \"0 1 * * *\",\n        Args = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"my_var\"] = \"terraform\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFunctionNamespace, err := scaleway.NewFunctionNamespace(ctx, \"mainFunctionNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainFunction, err := scaleway.NewFunction(ctx, \"mainFunction\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tRuntime:     pulumi.String(\"node14\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t\tHandler:     pulumi.String(\"handler.handle\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"test\": \"scw\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = scaleway.NewFunctionCron(ctx, \"mainFunctionCron\", \u0026scaleway.FunctionCronArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t\tSchedule:   pulumi.String(\"0 0 * * *\"),\n\t\t\tArgs:       pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"my_var\": \"terraform\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = scaleway.NewFunctionCron(ctx, \"func\", \u0026scaleway.FunctionCronArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t\tSchedule:   pulumi.String(\"0 1 * * *\"),\n\t\t\tArgs:       pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport com.pulumi.scaleway.FunctionCron;\nimport com.pulumi.scaleway.FunctionCronArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFunctionNamespace = new FunctionNamespace(\"mainFunctionNamespace\");\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .runtime(\"node14\")\n            .privacy(\"private\")\n            .handler(\"handler.handle\")\n            .build());\n\n        var mainFunctionCron = new FunctionCron(\"mainFunctionCron\", FunctionCronArgs.builder()        \n            .functionId(mainFunction.id())\n            .schedule(\"0 0 * * *\")\n            .args(serializeJson(\n                jsonObject(\n                    jsonProperty(\"test\", \"scw\")\n                )))\n            .build());\n\n        var func = new FunctionCron(\"func\", FunctionCronArgs.builder()        \n            .functionId(mainFunction.id())\n            .schedule(\"0 1 * * *\")\n            .args(serializeJson(\n                jsonObject(\n                    jsonProperty(\"my_var\", \"terraform\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainFunctionNamespace:\n    type: scaleway:FunctionNamespace\n  mainFunction:\n    type: scaleway:Function\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      runtime: node14\n      privacy: private\n      handler: handler.handle\n  mainFunctionCron:\n    type: scaleway:FunctionCron\n    properties:\n      functionId: ${mainFunction.id}\n      schedule: 0 0 * * *\n      args:\n        fn::toJSON:\n          test: scw\n  func:\n    type: scaleway:FunctionCron\n    properties:\n      functionId: ${mainFunction.id}\n      schedule: 0 1 * * *\n      args:\n        fn::toJSON:\n          my_var: terraform\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nContainer Cron can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/functionCron:FunctionCron main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your function’s event object\nduring\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The function ID to link with your cron.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region\nin where the job was created.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The cron status.\n"
                }
            },
            "required": [
                "args",
                "functionId",
                "region",
                "schedule",
                "status"
            ],
            "inputProperties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your function’s event object\nduring\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The function ID to link with your cron.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region\nin where the job was created.\n",
                    "willReplaceOnChanges": true
                },
                "schedule": {
                    "type": "string",
                    "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                }
            },
            "requiredInputs": [
                "args",
                "functionId",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionCron resources.\n",
                "properties": {
                    "args": {
                        "type": "string",
                        "description": "The key-value mapping to define arguments that will be passed to your function’s event object\nduring\n"
                    },
                    "functionId": {
                        "type": "string",
                        "description": "The function ID to link with your cron.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region\nin where the job was created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schedule": {
                        "type": "string",
                        "description": "Cron format string, e.g. @hourly, as schedule time of its jobs to be created and\nexecuted.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The cron status.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionDomain:FunctionDomain": {
            "description": "Creates and manages Scaleway Function Domain bindings.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/functions/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainFunctionNamespace = new scaleway.FunctionNamespace(\"mainFunctionNamespace\", {});\nconst mainFunction = new scaleway.Function(\"mainFunction\", {\n    namespaceId: mainFunctionNamespace.id,\n    runtime: \"go118\",\n    privacy: \"private\",\n    handler: \"Handle\",\n    zipFile: \"testfixture/gofunction.zip\",\n    deploy: true,\n});\nconst mainFunctionDomain = new scaleway.FunctionDomain(\"mainFunctionDomain\", {\n    functionId: mainFunction.id,\n    hostname: \"example.com\",\n}, {\n    dependsOn: [mainFunction],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_function_namespace = scaleway.FunctionNamespace(\"mainFunctionNamespace\")\nmain_function = scaleway.Function(\"mainFunction\",\n    namespace_id=main_function_namespace.id,\n    runtime=\"go118\",\n    privacy=\"private\",\n    handler=\"Handle\",\n    zip_file=\"testfixture/gofunction.zip\",\n    deploy=True)\nmain_function_domain = scaleway.FunctionDomain(\"mainFunctionDomain\",\n    function_id=main_function.id,\n    hostname=\"example.com\",\n    opts=pulumi.ResourceOptions(depends_on=[main_function]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFunctionNamespace = new Scaleway.FunctionNamespace(\"mainFunctionNamespace\");\n\n    var mainFunction = new Scaleway.Function(\"mainFunction\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        Runtime = \"go118\",\n        Privacy = \"private\",\n        Handler = \"Handle\",\n        ZipFile = \"testfixture/gofunction.zip\",\n        Deploy = true,\n    });\n\n    var mainFunctionDomain = new Scaleway.FunctionDomain(\"mainFunctionDomain\", new()\n    {\n        FunctionId = mainFunction.Id,\n        Hostname = \"example.com\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainFunction,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFunctionNamespace, err := scaleway.NewFunctionNamespace(ctx, \"mainFunctionNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainFunction, err := scaleway.NewFunction(ctx, \"mainFunction\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tRuntime:     pulumi.String(\"go118\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t\tHandler:     pulumi.String(\"Handle\"),\n\t\t\tZipFile:     pulumi.String(\"testfixture/gofunction.zip\"),\n\t\t\tDeploy:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFunctionDomain(ctx, \"mainFunctionDomain\", \u0026scaleway.FunctionDomainArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t\tHostname:   pulumi.String(\"example.com\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainFunction,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport com.pulumi.scaleway.FunctionDomain;\nimport com.pulumi.scaleway.FunctionDomainArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFunctionNamespace = new FunctionNamespace(\"mainFunctionNamespace\");\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .runtime(\"go118\")\n            .privacy(\"private\")\n            .handler(\"Handle\")\n            .zipFile(\"testfixture/gofunction.zip\")\n            .deploy(true)\n            .build());\n\n        var mainFunctionDomain = new FunctionDomain(\"mainFunctionDomain\", FunctionDomainArgs.builder()        \n            .functionId(mainFunction.id())\n            .hostname(\"example.com\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(mainFunction)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainFunctionDomain:\n    type: scaleway:FunctionDomain\n    properties:\n      functionId: ${mainFunction.id}\n      hostname: example.com\n    options:\n      dependson:\n        - ${mainFunction}\n  mainFunctionNamespace:\n    type: scaleway:FunctionNamespace\n  mainFunction:\n    type: scaleway:Function\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      runtime: go118\n      privacy: private\n      handler: Handle\n      zipFile: testfixture/gofunction.zip\n      deploy: true\n```\n\n\n## Import\n\nDomain can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/functionDomain:FunctionDomain main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function you want to create a domain with.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname that should resolve to your function id native domain.\nYou should use a CNAME domain record that point to your native function `domain_name` for it.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL that triggers the function\n"
                }
            },
            "required": [
                "functionId",
                "hostname",
                "region",
                "url"
            ],
            "inputProperties": {
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function you want to create a domain with.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname that should resolve to your function id native domain.\nYou should use a CNAME domain record that point to your native function `domain_name` for it.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "functionId",
                "hostname"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionDomain resources.\n",
                "properties": {
                    "functionId": {
                        "type": "string",
                        "description": "The ID of the function you want to create a domain with.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname that should resolve to your function id native domain.\nYou should use a CNAME domain record that point to your native function `domain_name` for it.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL that triggers the function\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionNamespace:FunctionNamespace": {
            "description": "Creates and manages Scaleway Function Namespace.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/functions/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.FunctionNamespace(\"main\", {\n    description: \"Main function namespace\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.FunctionNamespace(\"main\", description=\"Main function namespace\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FunctionNamespace(\"main\", new()\n    {\n        Description = \"Main function namespace\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFunctionNamespace(ctx, \"main\", \u0026scaleway.FunctionNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Main function namespace\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.FunctionNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FunctionNamespace(\"main\", FunctionNamespaceArgs.builder()        \n            .description(\"Main function namespace\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionNamespace\n    properties:\n      description: Main function namespace\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/functionNamespace:FunctionNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the namespace is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "registryEndpoint": {
                    "type": "string",
                    "description": "The registry endpoint of the namespace.\n"
                },
                "registryNamespaceId": {
                    "type": "string",
                    "description": "The registry namespace ID of the namespace.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the namespace.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "region",
                "registryEndpoint",
                "registryNamespaceId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function namespace.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the namespace.\n",
                    "secret": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the function namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [secret environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) variables of the namespace.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionToken:FunctionToken": {
            "description": "Creates and manages Scaleway Function Token.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/functions/api/#tokens-26b085).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainFunctionNamespace = new scaleway.FunctionNamespace(\"mainFunctionNamespace\", {});\nconst mainFunction = new scaleway.Function(\"mainFunction\", {\n    namespaceId: mainFunctionNamespace.id,\n    runtime: \"go118\",\n    handler: \"Handle\",\n    privacy: \"private\",\n});\n// Namespace Token\nconst namespace = new scaleway.FunctionToken(\"namespace\", {\n    namespaceId: mainFunctionNamespace.id,\n    expiresAt: \"2022-10-18T11:35:15+02:00\",\n});\n// Function Token\nconst _function = new scaleway.FunctionToken(\"function\", {functionId: mainFunction.id});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_function_namespace = scaleway.FunctionNamespace(\"mainFunctionNamespace\")\nmain_function = scaleway.Function(\"mainFunction\",\n    namespace_id=main_function_namespace.id,\n    runtime=\"go118\",\n    handler=\"Handle\",\n    privacy=\"private\")\n# Namespace Token\nnamespace = scaleway.FunctionToken(\"namespace\",\n    namespace_id=main_function_namespace.id,\n    expires_at=\"2022-10-18T11:35:15+02:00\")\n# Function Token\nfunction = scaleway.FunctionToken(\"function\", function_id=main_function.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFunctionNamespace = new Scaleway.FunctionNamespace(\"mainFunctionNamespace\");\n\n    var mainFunction = new Scaleway.Function(\"mainFunction\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        Runtime = \"go118\",\n        Handler = \"Handle\",\n        Privacy = \"private\",\n    });\n\n    // Namespace Token\n    var @namespace = new Scaleway.FunctionToken(\"namespace\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        ExpiresAt = \"2022-10-18T11:35:15+02:00\",\n    });\n\n    // Function Token\n    var function = new Scaleway.FunctionToken(\"function\", new()\n    {\n        FunctionId = mainFunction.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFunctionNamespace, err := scaleway.NewFunctionNamespace(ctx, \"mainFunctionNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainFunction, err := scaleway.NewFunction(ctx, \"mainFunction\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tRuntime:     pulumi.String(\"go118\"),\n\t\t\tHandler:     pulumi.String(\"Handle\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFunctionToken(ctx, \"namespace\", \u0026scaleway.FunctionTokenArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tExpiresAt:   pulumi.String(\"2022-10-18T11:35:15+02:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFunctionToken(ctx, \"function\", \u0026scaleway.FunctionTokenArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport com.pulumi.scaleway.FunctionToken;\nimport com.pulumi.scaleway.FunctionTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFunctionNamespace = new FunctionNamespace(\"mainFunctionNamespace\");\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .runtime(\"go118\")\n            .handler(\"Handle\")\n            .privacy(\"private\")\n            .build());\n\n        var namespace = new FunctionToken(\"namespace\", FunctionTokenArgs.builder()        \n            .namespaceId(mainFunctionNamespace.id())\n            .expiresAt(\"2022-10-18T11:35:15+02:00\")\n            .build());\n\n        var function = new FunctionToken(\"function\", FunctionTokenArgs.builder()        \n            .functionId(mainFunction.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainFunctionNamespace:\n    type: scaleway:FunctionNamespace\n  mainFunction:\n    type: scaleway:Function\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      runtime: go118\n      handler: Handle\n      privacy: private\n  # Namespace Token\n  namespace:\n    type: scaleway:FunctionToken\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      expiresAt: 2022-10-18T11:35:15+02:00\n  # Function Token\n  function:\n    type: scaleway:FunctionToken\n    properties:\n      functionId: ${mainFunction.id}\n```\n\n\n## Import\n\nTokens can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/functionToken:FunctionToken main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the function namespace.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token.\n",
                    "secret": true
                }
            },
            "required": [
                "region",
                "token"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n",
                    "willReplaceOnChanges": true
                },
                "functionId": {
                    "type": "string",
                    "description": "The ID of the function.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The ID of the function namespace.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionToken resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The expiration date of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionId": {
                        "type": "string",
                        "description": "The ID of the function.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The ID of the function namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceImage:InstanceImage": {
            "description": "Creates and manages Scaleway Compute Images.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#images-41389b).\n\n## Example\n\n### From a volume\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst volume = new scaleway.InstanceVolume(\"volume\", {\n    type: \"b_ssd\",\n    sizeInGb: 20,\n});\nconst volumeSnapshot = new scaleway.InstanceSnapshot(\"volumeSnapshot\", {volumeId: volume.id});\nconst volumeImage = new scaleway.InstanceImage(\"volumeImage\", {rootVolumeId: volumeSnapshot.id});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nvolume = scaleway.InstanceVolume(\"volume\",\n    type=\"b_ssd\",\n    size_in_gb=20)\nvolume_snapshot = scaleway.InstanceSnapshot(\"volumeSnapshot\", volume_id=volume.id)\nvolume_image = scaleway.InstanceImage(\"volumeImage\", root_volume_id=volume_snapshot.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var volume = new Scaleway.InstanceVolume(\"volume\", new()\n    {\n        Type = \"b_ssd\",\n        SizeInGb = 20,\n    });\n\n    var volumeSnapshot = new Scaleway.InstanceSnapshot(\"volumeSnapshot\", new()\n    {\n        VolumeId = volume.Id,\n    });\n\n    var volumeImage = new Scaleway.InstanceImage(\"volumeImage\", new()\n    {\n        RootVolumeId = volumeSnapshot.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvolume, err := scaleway.NewInstanceVolume(ctx, \"volume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tType:     pulumi.String(\"b_ssd\"),\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvolumeSnapshot, err := scaleway.NewInstanceSnapshot(ctx, \"volumeSnapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: volume.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceImage(ctx, \"volumeImage\", \u0026scaleway.InstanceImageArgs{\n\t\t\tRootVolumeId: volumeSnapshot.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceImage;\nimport com.pulumi.scaleway.InstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var volume = new InstanceVolume(\"volume\", InstanceVolumeArgs.builder()        \n            .type(\"b_ssd\")\n            .sizeInGb(20)\n            .build());\n\n        var volumeSnapshot = new InstanceSnapshot(\"volumeSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(volume.id())\n            .build());\n\n        var volumeImage = new InstanceImage(\"volumeImage\", InstanceImageArgs.builder()        \n            .rootVolumeId(volumeSnapshot.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  volume:\n    type: scaleway:InstanceVolume\n    properties:\n      type: b_ssd\n      sizeInGb: 20\n  volumeSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${volume.id}\n  volumeImage:\n    type: scaleway:InstanceImage\n    properties:\n      rootVolumeId: ${volumeSnapshot.id}\n```\n\n### From a server\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst server = new scaleway.InstanceServer(\"server\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n});\nconst serverSnapshot = new scaleway.InstanceSnapshot(\"serverSnapshot\", {volumeId: scaleway_instance_server.main.root_volume[0].volume_id});\nconst serverImage = new scaleway.InstanceImage(\"serverImage\", {rootVolumeId: serverSnapshot.id});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nserver = scaleway.InstanceServer(\"server\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\")\nserver_snapshot = scaleway.InstanceSnapshot(\"serverSnapshot\", volume_id=scaleway_instance_server[\"main\"][\"root_volume\"][0][\"volume_id\"])\nserver_image = scaleway.InstanceImage(\"serverImage\", root_volume_id=server_snapshot.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var server = new Scaleway.InstanceServer(\"server\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n    });\n\n    var serverSnapshot = new Scaleway.InstanceSnapshot(\"serverSnapshot\", new()\n    {\n        VolumeId = scaleway_instance_server.Main.Root_volume[0].Volume_id,\n    });\n\n    var serverImage = new Scaleway.InstanceImage(\"serverImage\", new()\n    {\n        RootVolumeId = serverSnapshot.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"server\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tserverSnapshot, err := scaleway.NewInstanceSnapshot(ctx, \"serverSnapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: pulumi.Any(scaleway_instance_server.Main.Root_volume[0].Volume_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceImage(ctx, \"serverImage\", \u0026scaleway.InstanceImageArgs{\n\t\t\tRootVolumeId: serverSnapshot.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceImage;\nimport com.pulumi.scaleway.InstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var server = new InstanceServer(\"server\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .build());\n\n        var serverSnapshot = new InstanceSnapshot(\"serverSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(scaleway_instance_server.main().root_volume()[0].volume_id())\n            .build());\n\n        var serverImage = new InstanceImage(\"serverImage\", InstanceImageArgs.builder()        \n            .rootVolumeId(serverSnapshot.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n  serverSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${scaleway_instance_server.main.root_volume[0].volume_id}\n  serverImage:\n    type: scaleway:InstanceImage\n    properties:\n      rootVolumeId: ${serverSnapshot.id}\n```\n\n### With additional volumes\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceImage;\nimport com.pulumi.scaleway.InstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var server = new InstanceServer(\"server\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .build());\n\n        var volume = new InstanceVolume(\"volume\", InstanceVolumeArgs.builder()        \n            .type(\"b_ssd\")\n            .sizeInGb(20)\n            .build());\n\n        var volumeSnapshot = new InstanceSnapshot(\"volumeSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(volume.id())\n            .build());\n\n        var serverSnapshot = new InstanceSnapshot(\"serverSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(scaleway_instance_server.main().root_volume()[0].volume_id())\n            .build());\n\n        var image = new InstanceImage(\"image\", InstanceImageArgs.builder()        \n            .rootVolumeId(serverSnapshot.id())\n            .additionalVolumes(volumeSnapshot.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n  volume:\n    type: scaleway:InstanceVolume\n    properties:\n      type: b_ssd\n      sizeInGb: 20\n  volumeSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${volume.id}\n  serverSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${scaleway_instance_server.main.root_volume[0].volume_id}\n  image:\n    type: scaleway:InstanceImage\n    properties:\n      rootVolumeId: ${serverSnapshot.id}\n      additionalVolumes:\n        - ${volumeSnapshot.id}\n```\n\n\n## Import\n\nImages can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceImage:InstanceImage main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "additionalVolumeIds": {
                    "type": "string",
                    "description": "List of IDs of the snapshots of the additional volumes to be attached to the image.\n"
                },
                "additionalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceImageAdditionalVolume:InstanceImageAdditionalVolume"
                    },
                    "description": "The description of the extra volumes attached to the image.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                },
                "creationDate": {
                    "type": "string",
                    "description": "Date of the volume creation.\n"
                },
                "fromServerId": {
                    "type": "string",
                    "description": "ID of the server the image is based on (in case it is a backup).\n"
                },
                "modificationDate": {
                    "type": "string",
                    "description": "Date of volume latest update.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the image is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the image is associated with.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Set to `true` if the image is public.\n"
                },
                "rootVolumeId": {
                    "type": "string",
                    "description": "The ID of the snapshot of the volume to be used as root in the image.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the volume.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the image.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone in which the image should be created.\n"
                }
            },
            "required": [
                "additionalVolumes",
                "creationDate",
                "fromServerId",
                "modificationDate",
                "name",
                "organizationId",
                "projectId",
                "rootVolumeId",
                "state",
                "zone"
            ],
            "inputProperties": {
                "additionalVolumeIds": {
                    "type": "string",
                    "description": "List of IDs of the snapshots of the additional volumes to be attached to the image.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the image is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "public": {
                    "type": "boolean",
                    "description": "Set to `true` if the image is public.\n"
                },
                "rootVolumeId": {
                    "type": "string",
                    "description": "The ID of the snapshot of the volume to be used as root in the image.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the image.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone in which the image should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rootVolumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceImage resources.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "string",
                        "description": "List of IDs of the snapshots of the additional volumes to be attached to the image.\n"
                    },
                    "additionalVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceImageAdditionalVolume:InstanceImageAdditionalVolume"
                        },
                        "description": "The description of the extra volumes attached to the image.\n"
                    },
                    "architecture": {
                        "type": "string",
                        "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date of the volume creation.\n"
                    },
                    "fromServerId": {
                        "type": "string",
                        "description": "ID of the server the image is based on (in case it is a backup).\n"
                    },
                    "modificationDate": {
                        "type": "string",
                        "description": "Date of volume latest update.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the image. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the image is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Set to `true` if the image is public.\n"
                    },
                    "rootVolumeId": {
                        "type": "string",
                        "description": "The ID of the snapshot of the volume to be used as root in the image.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the volume.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the image.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone in which the image should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIp:InstanceIp": {
            "description": "Creates and manages Scaleway Compute Instance IPs. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#ips-268151).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst serverIp = new scaleway.InstanceIp(\"server_ip\", {});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nserver_ip = scaleway.InstanceIp(\"serverIp\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serverIp = new Scaleway.InstanceIp(\"serverIp\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceIp(ctx, \"serverIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serverIp = new InstanceIp(\"serverIp\");\n\n    }\n}\n```\n```yaml\nresources:\n  serverIp:\n    type: scaleway:InstanceIp\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIPs can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceIp:InstanceIp server_ip fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the IP is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse dns attached to this IP\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server associated with this IP\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "address",
                "organizationId",
                "projectId",
                "reverse",
                "serverId",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the IP is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse dns attached to this IP\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server associated with this IP\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIpReverseDns:InstanceIpReverseDns": {
            "description": "Manages Scaleway Compute Instance IPs Reverse DNS.\n\nPlease check our [guide](https://www.scaleway.com/en/docs/compute/instances/how-to/configure-reverse-dns/) for more details\n\n\n## Import\n\nIPs reverse DNS can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceIpReverseDns:InstanceIpReverseDns reverse fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "ipId",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipId",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIpReverseDns resources.\n",
                "properties": {
                    "ipId": {
                        "type": "string",
                        "description": "The IP ID\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse DNS for this IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instancePlacementGroup:InstancePlacementGroup": {
            "description": "Creates and manages Compute Instance Placement Groups. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst availabilityGroup = new scaleway.InstancePlacementGroup(\"availability_group\", {});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\navailability_group = scaleway.InstancePlacementGroup(\"availabilityGroup\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var availabilityGroup = new Scaleway.InstancePlacementGroup(\"availabilityGroup\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstancePlacementGroup(ctx, \"availabilityGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstancePlacementGroup;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var availabilityGroup = new InstancePlacementGroup(\"availabilityGroup\");\n\n    }\n}\n```\n```yaml\nresources:\n  availabilityGroup:\n    type: scaleway:InstancePlacementGroup\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPlacement groups can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instancePlacementGroup:InstancePlacementGroup availability_group fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the placement group is associated with.\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `optional` or `enforced`.\n"
                },
                "policyRespected": {
                    "type": "boolean",
                    "description": "Is true when the policy is respected.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the placement group is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the placement group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the placement group should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "policyRespected",
                "projectId",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group.\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `optional` or `enforced`.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the placement group is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the placement group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the placement group should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePlacementGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the placement group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the placement group is associated with.\n"
                    },
                    "policyMode": {
                        "type": "string",
                        "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `optional` or `enforced`.\n"
                    },
                    "policyRespected": {
                        "type": "boolean",
                        "description": "Is true when the policy is respected.\n"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the placement group is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the placement group.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the placement group should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instancePrivateNic:InstancePrivateNic": {
            "description": "Creates and manages Scaleway Instance Private NICs. For more information, see\n[the documentation](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    privateNetworkId: \"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n    serverId: \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    private_network_id=\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n    server_id=\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new()\n    {\n        PrivateNetworkId = \"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n        ServerId = \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tPrivateNetworkId: pulumi.String(\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"),\n\t\t\tServerId:         pulumi.String(\"fr-par-1/11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pnic01 = new InstancePrivateNic(\"pnic01\", InstancePrivateNicArgs.builder()        \n            .privateNetworkId(\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\")\n            .serverId(\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pnic01:\n    type: scaleway:InstancePrivateNic\n    properties:\n      privateNetworkId: fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\n      serverId: fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n### With zone\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {zone: \"fr-par-2\"});\nconst base = new scaleway.InstanceServer(\"base\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    zone: pn01.zone,\n});\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    serverId: base.id,\n    privateNetworkId: pn01.id,\n    zone: pn01.zone,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\", zone=\"fr-par-2\")\nbase = scaleway.InstanceServer(\"base\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    zone=pn01.zone)\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    server_id=base.id,\n    private_network_id=pn01.id,\n    zone=pn01.zone)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Zone = \"fr-par-2\",\n    });\n\n    var @base = new Scaleway.InstanceServer(\"base\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        Zone = pn01.Zone,\n    });\n\n    var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new()\n    {\n        ServerId = @base.Id,\n        PrivateNetworkId = pn01.Id,\n        Zone = pn01.Zone,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tZone: pulumi.String(\"fr-par-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewInstanceServer(ctx, \"base\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tZone:  pn01.Zone,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         base.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tZone:             pn01.Zone,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()        \n            .zone(\"fr-par-2\")\n            .build());\n\n        var base = new InstanceServer(\"base\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .zone(pn01.zone())\n            .build());\n\n        var pnic01 = new InstancePrivateNic(\"pnic01\", InstancePrivateNicArgs.builder()        \n            .serverId(base.id())\n            .privateNetworkId(pn01.id())\n            .zone(pn01.zone())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      zone: fr-par-2\n  base:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      zone: ${pn01.zone}\n  pnic01:\n    type: scaleway:InstancePrivateNic\n    properties:\n      serverId: ${base.id}\n      privateNetworkId: ${pn01.id}\n      zone: ${pn01.zone}\n```\n\n\n## Import\n\nPrivate NICs can be imported using the `{zone}/{server_id}/{private_nic_id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instancePrivateNic:InstancePrivateNic pnic01 fr-par-1/11111111-1111-1111-1111-111111111111/22222222-2222-2222-2222-222222222222\n```\n\n ",
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address of the private NIC.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network attached to.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server must be created.\n"
                }
            },
            "required": [
                "macAddress",
                "privateNetworkId",
                "serverId",
                "zone"
            ],
            "inputProperties": {
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network attached to.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server must be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privateNetworkId",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePrivateNic resources.\n",
                "properties": {
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address of the private NIC.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network attached to.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the server associated with.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server must be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup": {
            "description": "\n\n\n## Import\n\nInstance security group can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceSecurityGroup:InstanceSecurityGroup web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                },
                "externalRules": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the security group is associated with.\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the security group is associated with.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean to specify whether the security group should be stateful or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the security group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the security group should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                },
                "externalRules": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the security group is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean to specify whether the security group should be stateful or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the security group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the security group should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the security group.\n"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean",
                        "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                    },
                    "externalRules": {
                        "type": "boolean",
                        "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the security group is associated with.\n"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the security group is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "A boolean to specify whether the security group should be stateful or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags of the security group.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the security group should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules": {
            "description": "\n\n\n## Import\n\nInstance security group rules can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of the security group.\n"
                }
            },
            "required": [
                "securityGroupId"
            ],
            "inputProperties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of the security group.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "securityGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroupRules resources.\n",
                "properties": {
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The ID of the security group.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceServer:InstanceServer": {
            "description": "Creates and manages Scaleway Compute Instance servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#servers-8bf7d7).\n\nPlease check our [FAQ - Instances](https://www.scaleway.com/en/docs/faq/instances).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst publicIp = new scaleway.InstanceIp(\"publicIp\", {});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    ipId: publicIp.id,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\npublic_ip = scaleway.InstanceIp(\"publicIp\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    ip_id=public_ip.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var publicIp = new Scaleway.InstanceIp(\"publicIp\");\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        IpId = publicIp.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpublicIp, err := scaleway.NewInstanceIp(ctx, \"publicIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tIpId:  publicIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var publicIp = new InstanceIp(\"publicIp\");\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .ipId(publicIp.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  publicIp:\n    type: scaleway:InstanceIp\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      ipId: ${publicIp.id}\n```\n\n### With additional volumes and tags\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst data = new scaleway.InstanceVolume(\"data\", {\n    sizeInGb: 100,\n    type: \"b_ssd\",\n});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    tags: [\n        \"hello\",\n        \"public\",\n    ],\n    rootVolume: {\n        deleteOnTermination: false,\n    },\n    additionalVolumeIds: [data.id],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\ndata = scaleway.InstanceVolume(\"data\",\n    size_in_gb=100,\n    type=\"b_ssd\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    tags=[\n        \"hello\",\n        \"public\",\n    ],\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        delete_on_termination=False,\n    ),\n    additional_volume_ids=[data.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var data = new Scaleway.InstanceVolume(\"data\", new()\n    {\n        SizeInGb = 100,\n        Type = \"b_ssd\",\n    });\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        Tags = new[]\n        {\n            \"hello\",\n            \"public\",\n        },\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            DeleteOnTermination = false,\n        },\n        AdditionalVolumeIds = new[]\n        {\n            data.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdata, err := scaleway.NewInstanceVolume(ctx, \"data\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tSizeInGb: pulumi.Int(100),\n\t\t\tType:     pulumi.String(\"b_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hello\"),\n\t\t\t\tpulumi.String(\"public\"),\n\t\t\t},\n\t\t\tRootVolume: \u0026InstanceServerRootVolumeArgs{\n\t\t\t\tDeleteOnTermination: pulumi.Bool(false),\n\t\t\t},\n\t\t\tAdditionalVolumeIds: pulumi.StringArray{\n\t\t\t\tdata.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var data = new InstanceVolume(\"data\", InstanceVolumeArgs.builder()        \n            .sizeInGb(100)\n            .type(\"b_ssd\")\n            .build());\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .tags(            \n                \"hello\",\n                \"public\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .deleteOnTermination(false)\n                .build())\n            .additionalVolumeIds(data.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  data:\n    type: scaleway:InstanceVolume\n    properties:\n      sizeInGb: 100\n      type: b_ssd\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      tags:\n        - hello\n        - public\n      rootVolume:\n        deleteOnTermination: false\n      additionalVolumeIds:\n        - ${data.id}\n```\n\n### With a reserved IP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst ip = new scaleway.InstanceIp(\"ip\", {});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"f974feac-abae-4365-b988-8ec7d1cec10d\",\n    tags: [\n        \"hello\",\n        \"public\",\n    ],\n    ipId: ip.id,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nip = scaleway.InstanceIp(\"ip\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"f974feac-abae-4365-b988-8ec7d1cec10d\",\n    tags=[\n        \"hello\",\n        \"public\",\n    ],\n    ip_id=ip.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip = new Scaleway.InstanceIp(\"ip\");\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"f974feac-abae-4365-b988-8ec7d1cec10d\",\n        Tags = new[]\n        {\n            \"hello\",\n            \"public\",\n        },\n        IpId = ip.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip, err := scaleway.NewInstanceIp(ctx, \"ip\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"f974feac-abae-4365-b988-8ec7d1cec10d\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hello\"),\n\t\t\t\tpulumi.String(\"public\"),\n\t\t\t},\n\t\t\tIpId: ip.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip = new InstanceIp(\"ip\");\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"f974feac-abae-4365-b988-8ec7d1cec10d\")\n            .tags(            \n                \"hello\",\n                \"public\")\n            .ipId(ip.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip:\n    type: scaleway:InstanceIp\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: f974feac-abae-4365-b988-8ec7d1cec10d\n      tags:\n        - hello\n        - public\n      ipId: ${ip.id}\n```\n\n### With security group\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst www = new scaleway.InstanceSecurityGroup(\"www\", {\n    inboundDefaultPolicy: \"drop\",\n    outboundDefaultPolicy: \"accept\",\n    inboundRules: [\n        {\n            action: \"accept\",\n            port: 22,\n            ip: \"212.47.225.64\",\n        },\n        {\n            action: \"accept\",\n            port: 80,\n        },\n        {\n            action: \"accept\",\n            port: 443,\n        },\n    ],\n    outboundRules: [{\n        action: \"drop\",\n        ipRange: \"10.20.0.0/24\",\n    }],\n});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    securityGroupId: www.id,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nwww = scaleway.InstanceSecurityGroup(\"www\",\n    inbound_default_policy=\"drop\",\n    outbound_default_policy=\"accept\",\n    inbound_rules=[\n        scaleway.InstanceSecurityGroupInboundRuleArgs(\n            action=\"accept\",\n            port=22,\n            ip=\"212.47.225.64\",\n        ),\n        scaleway.InstanceSecurityGroupInboundRuleArgs(\n            action=\"accept\",\n            port=80,\n        ),\n        scaleway.InstanceSecurityGroupInboundRuleArgs(\n            action=\"accept\",\n            port=443,\n        ),\n    ],\n    outbound_rules=[scaleway.InstanceSecurityGroupOutboundRuleArgs(\n        action=\"drop\",\n        ip_range=\"10.20.0.0/24\",\n    )])\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    security_group_id=www.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var www = new Scaleway.InstanceSecurityGroup(\"www\", new()\n    {\n        InboundDefaultPolicy = \"drop\",\n        OutboundDefaultPolicy = \"accept\",\n        InboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 22,\n                Ip = \"212.47.225.64\",\n            },\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 80,\n            },\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 443,\n            },\n        },\n        OutboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupOutboundRuleArgs\n            {\n                Action = \"drop\",\n                IpRange = \"10.20.0.0/24\",\n            },\n        },\n    });\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        SecurityGroupId = www.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twww, err := scaleway.NewInstanceSecurityGroup(ctx, \"www\", \u0026scaleway.InstanceSecurityGroupArgs{\n\t\t\tInboundDefaultPolicy:  pulumi.String(\"drop\"),\n\t\t\tOutboundDefaultPolicy: pulumi.String(\"accept\"),\n\t\t\tInboundRules: InstanceSecurityGroupInboundRuleArray{\n\t\t\t\t\u0026InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(22),\n\t\t\t\t\tIp:     pulumi.String(\"212.47.225.64\"),\n\t\t\t\t},\n\t\t\t\t\u0026InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(80),\n\t\t\t\t},\n\t\t\t\t\u0026InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(443),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutboundRules: InstanceSecurityGroupOutboundRuleArray{\n\t\t\t\t\u0026InstanceSecurityGroupOutboundRuleArgs{\n\t\t\t\t\tAction:  pulumi.String(\"drop\"),\n\t\t\t\t\tIpRange: pulumi.String(\"10.20.0.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:            pulumi.String(\"DEV1-S\"),\n\t\t\tImage:           pulumi.String(\"ubuntu_jammy\"),\n\t\t\tSecurityGroupId: www.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupInboundRuleArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupOutboundRuleArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www = new InstanceSecurityGroup(\"www\", InstanceSecurityGroupArgs.builder()        \n            .inboundDefaultPolicy(\"drop\")\n            .outboundDefaultPolicy(\"accept\")\n            .inboundRules(            \n                InstanceSecurityGroupInboundRuleArgs.builder()\n                    .action(\"accept\")\n                    .port(\"22\")\n                    .ip(\"212.47.225.64\")\n                    .build(),\n                InstanceSecurityGroupInboundRuleArgs.builder()\n                    .action(\"accept\")\n                    .port(\"80\")\n                    .build(),\n                InstanceSecurityGroupInboundRuleArgs.builder()\n                    .action(\"accept\")\n                    .port(\"443\")\n                    .build())\n            .outboundRules(InstanceSecurityGroupOutboundRuleArgs.builder()\n                .action(\"drop\")\n                .ipRange(\"10.20.0.0/24\")\n                .build())\n            .build());\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .securityGroupId(www.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  www:\n    type: scaleway:InstanceSecurityGroup\n    properties:\n      inboundDefaultPolicy: drop\n      outboundDefaultPolicy: accept\n      inboundRules:\n        - action: accept\n          port: '22'\n          ip: 212.47.225.64\n        - action: accept\n          port: '80'\n        - action: accept\n          port: '443'\n      outboundRules:\n        - action: drop\n          ipRange: 10.20.0.0/24\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      securityGroupId: ${www.id}\n```\n\n### With user data and cloud-init\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    userData: {\n        foo: \"bar\",\n        \"cloud-init\": fs.readFileSync(`${path.module}/cloud-init.yml`),\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    user_data={\n        \"foo\": \"bar\",\n        \"cloud-init\": (lambda path: open(path).read())(f\"{path['module']}/cloud-init.yml\"),\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        UserData = \n        {\n            { \"foo\", \"bar\" },\n            { \"cloud-init\", File.ReadAllText($\"{path.Module}/cloud-init.yml\") },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tUserData: pulumi.StringMap{\n\t\t\t\t\"foo\":        pulumi.String(\"bar\"),\n\t\t\t\t\"cloud-init\": readFileOrPanic(fmt.Sprintf(\"%v/cloud-init.yml\", path.Module)),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()        \n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .userData(Map.ofEntries(\n                Map.entry(\"foo\", \"bar\"),\n                Map.entry(\"cloud-init\", Files.readString(Paths.get(String.format(\"%s/cloud-init.yml\", path.module()))))\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      userData:\n        foo: bar\n        cloud-init:\n          fn::readFile: ${path.module}/cloud-init.yml\n```\n\n### With private network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst base = new scaleway.InstanceServer(\"base\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    privateNetworks: [{\n        pnId: pn01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\nbase = scaleway.InstanceServer(\"base\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    private_networks=[scaleway.InstanceServerPrivateNetworkArgs(\n        pn_id=pn01.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\");\n\n    var @base = new Scaleway.InstanceServer(\"base\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.InstanceServerPrivateNetworkArgs\n            {\n                PnId = pn01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"base\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tPrivateNetworks: InstanceServerPrivateNetworkArray{\n\t\t\t\t\u0026InstanceServerPrivateNetworkArgs{\n\t\t\t\t\tPnId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\");\n\n        var base = new InstanceServer(\"base\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .privateNetworks(InstanceServerPrivateNetworkArgs.builder()\n                .pnId(pn01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n  base:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      privateNetworks:\n        - pnId: ${pn01.id}\n```\n\n### Root volume configuration\n\n#### Resized block volume with installed image\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst image = new scaleway.InstanceServer(\"image\", {\n    image: \"ubuntu_jammy\",\n    rootVolume: {\n        sizeInGb: 100,\n        volumeType: \"b_ssd\",\n    },\n    type: \"PRO2-XXS\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nimage = scaleway.InstanceServer(\"image\",\n    image=\"ubuntu_jammy\",\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        size_in_gb=100,\n        volume_type=\"b_ssd\",\n    ),\n    type=\"PRO2-XXS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var image = new Scaleway.InstanceServer(\"image\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            SizeInGb = 100,\n            VolumeType = \"b_ssd\",\n        },\n        Type = \"PRO2-XXS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"image\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tRootVolume: \u0026InstanceServerRootVolumeArgs{\n\t\t\t\tSizeInGb:   pulumi.Int(100),\n\t\t\t\tVolumeType: pulumi.String(\"b_ssd\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"PRO2-XXS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var image = new InstanceServer(\"image\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .sizeInGb(100)\n                .volumeType(\"b_ssd\")\n                .build())\n            .type(\"PRO2-XXS\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  image:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      rootVolume:\n        sizeInGb: 100\n        volumeType: b_ssd\n      type: PRO2-XXS\n```\n\n#### From snapshot\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst snapshot = scaleway.getInstanceSnapshot({\n    name: \"my_snapshot\",\n});\nconst fromSnapshotInstanceVolume = new scaleway.InstanceVolume(\"fromSnapshotInstanceVolume\", {\n    fromSnapshotId: snapshot.then(snapshot =\u003e snapshot.id),\n    type: \"b_ssd\",\n});\nconst fromSnapshotInstanceServer = new scaleway.InstanceServer(\"fromSnapshotInstanceServer\", {\n    type: \"PRO2-XXS\",\n    rootVolume: {\n        volumeId: fromSnapshotInstanceVolume.id,\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nsnapshot = scaleway.get_instance_snapshot(name=\"my_snapshot\")\nfrom_snapshot_instance_volume = scaleway.InstanceVolume(\"fromSnapshotInstanceVolume\",\n    from_snapshot_id=snapshot.id,\n    type=\"b_ssd\")\nfrom_snapshot_instance_server = scaleway.InstanceServer(\"fromSnapshotInstanceServer\",\n    type=\"PRO2-XXS\",\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        volume_id=from_snapshot_instance_volume.id,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snapshot = Scaleway.GetInstanceSnapshot.Invoke(new()\n    {\n        Name = \"my_snapshot\",\n    });\n\n    var fromSnapshotInstanceVolume = new Scaleway.InstanceVolume(\"fromSnapshotInstanceVolume\", new()\n    {\n        FromSnapshotId = snapshot.Apply(getInstanceSnapshotResult =\u003e getInstanceSnapshotResult.Id),\n        Type = \"b_ssd\",\n    });\n\n    var fromSnapshotInstanceServer = new Scaleway.InstanceServer(\"fromSnapshotInstanceServer\", new()\n    {\n        Type = \"PRO2-XXS\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            VolumeId = fromSnapshotInstanceVolume.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsnapshot, err := scaleway.LookupInstanceSnapshot(ctx, \u0026GetInstanceSnapshotArgs{\n\t\t\tName: pulumi.StringRef(\"my_snapshot\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfromSnapshotInstanceVolume, err := scaleway.NewInstanceVolume(ctx, \"fromSnapshotInstanceVolume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tFromSnapshotId: pulumi.String(snapshot.Id),\n\t\t\tType:           pulumi.String(\"b_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"fromSnapshotInstanceServer\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType: pulumi.String(\"PRO2-XXS\"),\n\t\t\tRootVolume: \u0026InstanceServerRootVolumeArgs{\n\t\t\t\tVolumeId: fromSnapshotInstanceVolume.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var snapshot = ScalewayFunctions.getInstanceSnapshot(GetInstanceSnapshotArgs.builder()\n            .name(\"my_snapshot\")\n            .build());\n\n        var fromSnapshotInstanceVolume = new InstanceVolume(\"fromSnapshotInstanceVolume\", InstanceVolumeArgs.builder()        \n            .fromSnapshotId(snapshot.applyValue(getInstanceSnapshotResult -\u003e getInstanceSnapshotResult.id()))\n            .type(\"b_ssd\")\n            .build());\n\n        var fromSnapshotInstanceServer = new InstanceServer(\"fromSnapshotInstanceServer\", InstanceServerArgs.builder()        \n            .type(\"PRO2-XXS\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .volumeId(fromSnapshotInstanceVolume.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fromSnapshotInstanceVolume:\n    type: scaleway:InstanceVolume\n    properties:\n      fromSnapshotId: ${snapshot.id}\n      type: b_ssd\n  fromSnapshotInstanceServer:\n    type: scaleway:InstanceServer\n    properties:\n      type: PRO2-XXS\n      rootVolume:\n        volumeId: ${fromSnapshotInstanceVolume.id}\nvariables:\n  snapshot:\n    fn::invoke:\n      Function: scaleway:getInstanceSnapshot\n      Arguments:\n        name: my_snapshot\n```\n\n## Private Network\n\n\u003e **Important:** Updates to `private_network` will recreate a new private network interface.\n\n- `pn_id` - (Required) The private network ID where to connect.\n- `mac_address` The private NIC MAC address.\n- `status` The private NIC state.\n- `zone` - (Defaults to provider `zone`) The zone in which the server must be created.\n\n\u003e **Important:**\n\n- You can only attach an instance in the same zone as a private network.\n- Instance supports maximum 8 different private networks.\n\n\n## Import\n\nInstance servers can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceServer:InstanceServer web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "= (Optional) The ID of the reserved IP that is attached to the server.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                },
                "placementGroupPolicyRespected": {
                    "type": "boolean",
                    "description": "True when the placement group policy is respected.\n- `root_volume`\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Scaleway internal IP address of the server.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                    },
                    "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4 address of the server.\n"
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will recreate a new resource.\n"
                },
                "userData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The user data associated with the server\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "required": [
                "bootscriptId",
                "cloudInit",
                "ipv6Address",
                "ipv6Gateway",
                "ipv6PrefixLength",
                "name",
                "organizationId",
                "placementGroupPolicyRespected",
                "privateIp",
                "projectId",
                "publicIp",
                "rootVolume",
                "securityGroupId",
                "type",
                "userData",
                "zone"
            ],
            "inputProperties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.\n",
                    "willReplaceOnChanges": true
                },
                "ipId": {
                    "type": "string",
                    "description": "= (Optional) The ID of the reserved IP that is attached to the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                    },
                    "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "userData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The user data associated with the server\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceServer resources.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n"
                    },
                    "bootType": {
                        "type": "string",
                        "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                    },
                    "bootscriptId": {
                        "type": "string",
                        "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n"
                    },
                    "cloudInit": {
                        "type": "string",
                        "description": "The cloud init script associated with this server\n"
                    },
                    "enableDynamicIp": {
                        "type": "boolean",
                        "description": "If true a dynamic IP will be attached to the server.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Determines if IPv6 is enabled for the server.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipId": {
                        "type": "string",
                        "description": "= (Optional) The ID of the reserved IP that is attached to the server.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                    },
                    "placementGroupPolicyRespected": {
                        "type": "boolean",
                        "description": "True when the placement group policy is respected.\n- `root_volume`\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Scaleway internal IP address of the server.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                        },
                        "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IPv4 address of the server.\n"
                    },
                    "rootVolume": {
                        "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                        "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "userData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The user data associated with the server\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSnapshot:InstanceSnapshot": {
            "description": "Creates and manages Scaleway Compute Snapshots.\nFor more information,\nsee [the documentation](https://developers.scaleway.com/en/products/instance/api/#snapshots-756fae).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.InstanceSnapshot(\"main\", {\n    volumeId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.InstanceSnapshot(\"main\", volume_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.InstanceSnapshot(\"main\", new()\n    {\n        VolumeId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceSnapshot(ctx, \"main\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new InstanceSnapshot(\"main\", InstanceSnapshotArgs.builder()        \n            .volumeId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: 11111111-1111-1111-1111-111111111111\n```\n\n## Example with Unified type\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainInstanceVolume = new scaleway.InstanceVolume(\"mainInstanceVolume\", {\n    type: \"l_ssd\",\n    sizeInGb: 10,\n});\nconst mainInstanceServer = new scaleway.InstanceServer(\"mainInstanceServer\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    rootVolume: {\n        sizeInGb: 10,\n        volumeType: \"l_ssd\",\n    },\n    additionalVolumeIds: [mainInstanceVolume.id],\n});\nconst mainInstanceSnapshot = new scaleway.InstanceSnapshot(\"mainInstanceSnapshot\", {\n    volumeId: mainInstanceVolume.id,\n    type: \"unified\",\n}, {\n    dependsOn: [mainInstanceServer],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_instance_volume = scaleway.InstanceVolume(\"mainInstanceVolume\",\n    type=\"l_ssd\",\n    size_in_gb=10)\nmain_instance_server = scaleway.InstanceServer(\"mainInstanceServer\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        size_in_gb=10,\n        volume_type=\"l_ssd\",\n    ),\n    additional_volume_ids=[main_instance_volume.id])\nmain_instance_snapshot = scaleway.InstanceSnapshot(\"mainInstanceSnapshot\",\n    volume_id=main_instance_volume.id,\n    type=\"unified\",\n    opts=pulumi.ResourceOptions(depends_on=[main_instance_server]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainInstanceVolume = new Scaleway.InstanceVolume(\"mainInstanceVolume\", new()\n    {\n        Type = \"l_ssd\",\n        SizeInGb = 10,\n    });\n\n    var mainInstanceServer = new Scaleway.InstanceServer(\"mainInstanceServer\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            SizeInGb = 10,\n            VolumeType = \"l_ssd\",\n        },\n        AdditionalVolumeIds = new[]\n        {\n            mainInstanceVolume.Id,\n        },\n    });\n\n    var mainInstanceSnapshot = new Scaleway.InstanceSnapshot(\"mainInstanceSnapshot\", new()\n    {\n        VolumeId = mainInstanceVolume.Id,\n        Type = \"unified\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainInstanceServer,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainInstanceVolume, err := scaleway.NewInstanceVolume(ctx, \"mainInstanceVolume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tType:     pulumi.String(\"l_ssd\"),\n\t\t\tSizeInGb: pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"mainInstanceServer\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tRootVolume: \u0026InstanceServerRootVolumeArgs{\n\t\t\t\tSizeInGb:   pulumi.Int(10),\n\t\t\t\tVolumeType: pulumi.String(\"l_ssd\"),\n\t\t\t},\n\t\t\tAdditionalVolumeIds: pulumi.StringArray{\n\t\t\t\tmainInstanceVolume.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceSnapshot(ctx, \"mainInstanceSnapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: mainInstanceVolume.ID(),\n\t\t\tType:     pulumi.String(\"unified\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainInstanceServer,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainInstanceVolume = new InstanceVolume(\"mainInstanceVolume\", InstanceVolumeArgs.builder()        \n            .type(\"l_ssd\")\n            .sizeInGb(10)\n            .build());\n\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .sizeInGb(10)\n                .volumeType(\"l_ssd\")\n                .build())\n            .additionalVolumeIds(mainInstanceVolume.id())\n            .build());\n\n        var mainInstanceSnapshot = new InstanceSnapshot(\"mainInstanceSnapshot\", InstanceSnapshotArgs.builder()        \n            .volumeId(mainInstanceVolume.id())\n            .type(\"unified\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(mainInstanceServer)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainInstanceVolume:\n    type: scaleway:InstanceVolume\n    properties:\n      type: l_ssd\n      sizeInGb: 10\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      rootVolume:\n        sizeInGb: 10\n        volumeType: l_ssd\n      additionalVolumeIds:\n        - ${mainInstanceVolume.id}\n  mainInstanceSnapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      volumeId: ${mainInstanceVolume.id}\n      type: unified\n    options:\n      dependson:\n        - ${mainInstanceServer}\n```\n\n## Import a local qcow2 file\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst bucket = new scaleway.ObjectBucket(\"bucket\", {});\nconst qcow = new scaleway.ObjectItem(\"qcow\", {\n    bucket: bucket.name,\n    key: \"server.qcow2\",\n    file: \"myqcow.qcow2\",\n});\nconst snapshot = new scaleway.InstanceSnapshot(\"snapshot\", {\n    type: \"unified\",\n    \"import\": {\n        bucket: qcow.bucket,\n        key: qcow.key,\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nbucket = scaleway.ObjectBucket(\"bucket\")\nqcow = scaleway.ObjectItem(\"qcow\",\n    bucket=bucket.name,\n    key=\"server.qcow2\",\n    file=\"myqcow.qcow2\")\nsnapshot = scaleway.InstanceSnapshot(\"snapshot\",\n    type=\"unified\",\n    import_=scaleway.InstanceSnapshotImportArgs(\n        bucket=qcow.bucket,\n        key=qcow.key,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bucket = new Scaleway.ObjectBucket(\"bucket\");\n\n    var qcow = new Scaleway.ObjectItem(\"qcow\", new()\n    {\n        Bucket = bucket.Name,\n        Key = \"server.qcow2\",\n        File = \"myqcow.qcow2\",\n    });\n\n    var snapshot = new Scaleway.InstanceSnapshot(\"snapshot\", new()\n    {\n        Type = \"unified\",\n        Import = new Scaleway.Inputs.InstanceSnapshotImportArgs\n        {\n            Bucket = qcow.Bucket,\n            Key = qcow.Key,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbucket, err := scaleway.NewObjectBucket(ctx, \"bucket\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqcow, err := scaleway.NewObjectItem(ctx, \"qcow\", \u0026scaleway.ObjectItemArgs{\n\t\t\tBucket: bucket.Name,\n\t\t\tKey:    pulumi.String(\"server.qcow2\"),\n\t\t\tFile:   pulumi.String(\"myqcow.qcow2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceSnapshot(ctx, \"snapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tType: pulumi.String(\"unified\"),\n\t\t\tImport: \u0026InstanceSnapshotImportArgs{\n\t\t\t\tBucket: qcow.Bucket,\n\t\t\t\tKey:    qcow.Key,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectItem;\nimport com.pulumi.scaleway.ObjectItemArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.inputs.InstanceSnapshotImportArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bucket = new ObjectBucket(\"bucket\");\n\n        var qcow = new ObjectItem(\"qcow\", ObjectItemArgs.builder()        \n            .bucket(bucket.name())\n            .key(\"server.qcow2\")\n            .file(\"myqcow.qcow2\")\n            .build());\n\n        var snapshot = new InstanceSnapshot(\"snapshot\", InstanceSnapshotArgs.builder()        \n            .type(\"unified\")\n            .import_(InstanceSnapshotImportArgs.builder()\n                .bucket(qcow.bucket())\n                .key(qcow.key())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: scaleway:ObjectBucket\n  qcow:\n    type: scaleway:ObjectItem\n    properties:\n      bucket: ${bucket.name}\n      key: server.qcow2\n      file: myqcow.qcow2\n  snapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      type: unified\n      import:\n        bucket: ${qcow.bucket}\n        key: ${qcow.key}\n```\n\n\n## Import\n\nSnapshots can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceSnapshot:InstanceSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The snapshot creation time.\n"
                },
                "import": {
                    "$ref": "#/types/scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport",
                    "description": "Import a snapshot from a qcow2 file located in a bucket\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the snapshot is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the snapshot is\nassociated with.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "(Optional) The size of the snapshot.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the snapshot.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The snapshot's volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.\nUpdates to this field will recreate a new resource.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe snapshot should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "projectId",
                "sizeInGb",
                "type",
                "zone"
            ],
            "inputProperties": {
                "import": {
                    "$ref": "#/types/scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport",
                    "description": "Import a snapshot from a qcow2 file located in a bucket\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the snapshot is\nassociated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the snapshot.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The snapshot's volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.\nUpdates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe snapshot should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSnapshot resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The snapshot creation time.\n"
                    },
                    "import": {
                        "$ref": "#/types/scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport",
                        "description": "Import a snapshot from a qcow2 file located in a bucket\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the snapshot is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the snapshot is\nassociated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "(Optional) The size of the snapshot.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the snapshot.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The snapshot's volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.\nUpdates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The ID of the volume to take a snapshot from.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe snapshot should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceUserData:InstanceUserData": {
            "description": "Creates and manages Scaleway Compute Instance User Data values.\n\nUser data is a key value store API you can use to provide data from and to your server without authentication. It is the mechanism by which a user can pass information contained in a local file to an Instance at launch time.\n\nThe typical use case is to pass something like a shell script or a configuration file as user data.\n\nFor more information about [user_data](https://developers.scaleway.com/en/products/instance/api/#patch-9ef3ec)  check our documentation guide [here](https://www.scaleway.com/en/docs/compute/instances/how-to/use-boot-modes/#how-to-use-cloud-init).\n\nAbout cloud-init documentation please check this [link](https://cloudinit.readthedocs.io/en/latest/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst config = new pulumi.Config();\nconst userData = config.getObject(\"userData\") || {\n    \"cloud-init\": `#cloud-config\napt-update: true\napt-upgrade: true\n`,\n    foo: \"bar\",\n};\nconst mainInstanceServer = new scaleway.InstanceServer(\"mainInstanceServer\", {\n    image: \"ubuntu_focal\",\n    type: \"DEV1-S\",\n});\n// User data with a single value\nconst mainInstanceUserData = new scaleway.InstanceUserData(\"mainInstanceUserData\", {\n    serverId: mainInstanceServer.id,\n    key: \"foo\",\n    value: \"bar\",\n});\n// User Data with many keys.\nconst data: scaleway.InstanceUserData[] = [];\nfor (const range = {value: 0}; range.value \u003c userData; range.value++) {\n    data.push(new scaleway.InstanceUserData(`data-${range.value}`, {\n        serverId: mainInstanceServer.id,\n        key: range.key,\n        value: range.value,\n    }));\n}\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nconfig = pulumi.Config()\nuser_data = config.get_object(\"userData\")\nif user_data is None:\n    user_data = {\n        \"cloud-init\": \"\"\"#cloud-config\napt-update: true\napt-upgrade: true\n\"\"\",\n        \"foo\": \"bar\",\n    }\nmain_instance_server = scaleway.InstanceServer(\"mainInstanceServer\",\n    image=\"ubuntu_focal\",\n    type=\"DEV1-S\")\n# User data with a single value\nmain_instance_user_data = scaleway.InstanceUserData(\"mainInstanceUserData\",\n    server_id=main_instance_server.id,\n    key=\"foo\",\n    value=\"bar\")\n# User Data with many keys.\ndata = []\nfor range in [{\"value\": i} for i in range(0, user_data)]:\n    data.append(scaleway.InstanceUserData(f\"data-{range['value']}\",\n        server_id=main_instance_server.id,\n        key=range[\"key\"],\n        value=range[\"value\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var userData = config.GetObject\u003cdynamic\u003e(\"userData\") ?? \n    {\n        { \"cloud-init\", @\"#cloud-config\napt-update: true\napt-upgrade: true\n\" },\n        { \"foo\", \"bar\" },\n    };\n    var mainInstanceServer = new Scaleway.InstanceServer(\"mainInstanceServer\", new()\n    {\n        Image = \"ubuntu_focal\",\n        Type = \"DEV1-S\",\n    });\n\n    // User data with a single value\n    var mainInstanceUserData = new Scaleway.InstanceUserData(\"mainInstanceUserData\", new()\n    {\n        ServerId = mainInstanceServer.Id,\n        Key = \"foo\",\n        Value = \"bar\",\n    });\n\n    // User Data with many keys.\n    var data = new List\u003cScaleway.InstanceUserData\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c userData; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        data.Add(new Scaleway.InstanceUserData($\"data-{range.Value}\", new()\n        {\n            ServerId = mainInstanceServer.Id,\n            Key = range.Key,\n            Value = range.Value,\n        }));\n    }\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tuserData := map[string]interface{}{\n\t\t\t\"cloud-init\": fmt.Sprintf(\"#cloud-config\\napt-update: true\\napt-upgrade: true\\n\"),\n\t\t\t\"foo\":        \"bar\",\n\t\t}\n\t\tif param := cfg.GetBool(\"userData\"); param != nil {\n\t\t\tuserData = param\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"mainInstanceServer\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_focal\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceUserData(ctx, \"mainInstanceUserData\", \u0026scaleway.InstanceUserDataArgs{\n\t\t\tServerId: mainInstanceServer.ID(),\n\t\t\tKey:      pulumi.String(\"foo\"),\n\t\t\tValue:    pulumi.String(\"bar\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar data []*scaleway.InstanceUserData\n\t\tfor index := 0; index \u003c userData; index++ {\n\t\t\tkey0 := index\n\t\t\tval0 := index\n\t\t\t__res, err := scaleway.NewInstanceUserData(ctx, fmt.Sprintf(\"data-%v\", key0), \u0026scaleway.InstanceUserDataArgs{\n\t\t\t\tServerId: mainInstanceServer.ID(),\n\t\t\t\tKey:      pulumi.Any(key0),\n\t\t\t\tValue:    pulumi.Any(val0),\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdata = append(data, __res)\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstanceUserData;\nimport com.pulumi.scaleway.InstanceUserDataArgs;\nimport com.pulumi.codegen.internal.KeyedValue;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var userData = config.get(\"userData\").orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_focal\")\n            .type(\"DEV1-S\")\n            .build());\n\n        var mainInstanceUserData = new InstanceUserData(\"mainInstanceUserData\", InstanceUserDataArgs.builder()        \n            .serverId(mainInstanceServer.id())\n            .key(\"foo\")\n            .value(\"bar\")\n            .build());\n\n        for (var i = 0; i \u003c userData; i++) {\n            new InstanceUserData(\"data-\" + i, InstanceUserDataArgs.builder()            \n                .serverId(mainInstanceServer.id())\n                .key(range.key())\n                .value(range.value())\n                .build());\n\n        \n}\n    }\n}\n```\n```yaml\nconfiguration:\n  userData:\n    type: dynamic\n    default:\n      cloud-init: |\n        #cloud-config\n        apt-update: true\n        apt-upgrade: true\n      foo: bar\nresources:\n  # User data with a single value\n  mainInstanceUserData:\n    type: scaleway:InstanceUserData\n    properties:\n      serverId: ${mainInstanceServer.id}\n      key: foo\n      value: bar\n  # User Data with many keys.\n  data:\n    type: scaleway:InstanceUserData\n    properties:\n      serverId: ${mainInstanceServer.id}\n      key: ${range.key}\n      value: ${range.value}\n    options: {}\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_focal\n      type: DEV1-S\n```\n\n\n## Import\n\nUser data can be imported using the `{zone}/{key}/{server_id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceUserData:InstanceUserData main fr-par-1/cloud-init/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key of the user data.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value associated with your key\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "required": [
                "key",
                "serverId",
                "value",
                "zone"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key of the user data.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value associated with your key\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "key",
                "serverId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceUserData resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key of the user data.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the server associated with.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value associated with your key\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceVolume:InstanceVolume": {
            "description": "Creates and manages Scaleway Compute Instance Volumes.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst serverVolume = new scaleway.InstanceVolume(\"server_volume\", {\n    sizeInGb: 20,\n    type: \"l_ssd\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nserver_volume = scaleway.InstanceVolume(\"serverVolume\",\n    size_in_gb=20,\n    type=\"l_ssd\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serverVolume = new Scaleway.InstanceVolume(\"serverVolume\", new()\n    {\n        SizeInGb = 20,\n        Type = \"l_ssd\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceVolume(ctx, \"serverVolume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t\tType:     pulumi.String(\"l_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serverVolume = new InstanceVolume(\"serverVolume\", InstanceVolumeArgs.builder()        \n            .sizeInGb(20)\n            .type(\"l_ssd\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  serverVolume:\n    type: scaleway:InstanceVolume\n    properties:\n      sizeInGb: 20\n      type: l_ssd\n```\n\n\n## Import\n\nvolumes can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceVolume:InstanceVolume server_volume fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "Create a volume based on a image\n"
                },
                "fromVolumeId": {
                    "type": "string",
                    "description": "If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the volume is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the volume is associated with.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The id of the associated server.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the volume.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the volume should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "serverId",
                "type",
                "zone"
            ],
            "inputProperties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "Create a volume based on a image\n",
                    "willReplaceOnChanges": true
                },
                "fromVolumeId": {
                    "type": "string",
                    "description": "If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the volume is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the volume.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the volume should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceVolume resources.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string",
                        "description": "Create a volume based on a image\n",
                        "willReplaceOnChanges": true
                    },
                    "fromVolumeId": {
                        "type": "string",
                        "description": "If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the volume is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the volume is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The id of the associated server.\n"
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the volume.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the volume should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotDevice:IotDevice": {
            "description": "\n\n\n## Import\n\nIoT devices can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iotDevice:IotDevice device01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "allowInsecure": {
                    "type": "boolean",
                    "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n"
                },
                "allowMultipleConnections": {
                    "type": "boolean",
                    "description": "Allow more than one simultaneous connection using the same device credentials.\n"
                },
                "certificate": {
                    "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                    "description": "The certificate bundle of the device.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the device was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IoT device (e.g. `living room`).\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the hub on which this device will be created.\n"
                },
                "isConnected": {
                    "type": "boolean",
                    "description": "The current connection status of the device.\n"
                },
                "lastActivityAt": {
                    "type": "string",
                    "description": "The last MQTT activity of the device.\n"
                },
                "messageFilters": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                    "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT device you want to create (e.g. `my-device`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the device.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the device resource was updated.\n"
                }
            },
            "required": [
                "certificate",
                "createdAt",
                "hubId",
                "isConnected",
                "lastActivityAt",
                "name",
                "region",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "allowInsecure": {
                    "type": "boolean",
                    "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n"
                },
                "allowMultipleConnections": {
                    "type": "boolean",
                    "description": "Allow more than one simultaneous connection using the same device credentials.\n"
                },
                "certificate": {
                    "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                    "description": "The certificate bundle of the device.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IoT device (e.g. `living room`).\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the hub on which this device will be created.\n"
                },
                "messageFilters": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                    "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT device you want to create (e.g. `my-device`).\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hubId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotDevice resources.\n",
                "properties": {
                    "allowInsecure": {
                        "type": "boolean",
                        "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n"
                    },
                    "allowMultipleConnections": {
                        "type": "boolean",
                        "description": "Allow more than one simultaneous connection using the same device credentials.\n"
                    },
                    "certificate": {
                        "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                        "description": "The certificate bundle of the device.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the device was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the IoT device (e.g. `living room`).\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The ID of the hub on which this device will be created.\n"
                    },
                    "isConnected": {
                        "type": "boolean",
                        "description": "The current connection status of the device.\n"
                    },
                    "lastActivityAt": {
                        "type": "string",
                        "description": "The last MQTT activity of the device.\n"
                    },
                    "messageFilters": {
                        "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                        "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT device you want to create (e.g. `my-device`).\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the device.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the device resource was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotHub:IotHub": {
            "description": "\n\n\n## Import\n\nIoT Hubs can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iotHub:IotHub hub01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "connectedDeviceCount": {
                    "type": "integer",
                    "description": "The current number of connected devices in the Hub.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Hub was created.\n"
                },
                "deviceAutoProvisioning": {
                    "type": "boolean",
                    "description": "Wether to enable the device auto provisioning or not\n"
                },
                "deviceCount": {
                    "type": "integer",
                    "description": "The number of registered devices in the Hub.\n"
                },
                "disableEvents": {
                    "type": "boolean",
                    "description": "Whether to enable the hub events or not\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Wether the IoT Hub instance should be enabled or not.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The MQTT network endpoint to connect MQTT devices to.\n"
                },
                "eventsTopicPrefix": {
                    "type": "string",
                    "description": "Topic prefix for the hub events\n"
                },
                "hubCa": {
                    "type": "string",
                    "description": "Custom user provided certificate authority\n"
                },
                "hubCaChallenge": {
                    "type": "string",
                    "description": "Challenge certificate for the user provided hub CA\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "productPlan": {
                    "type": "string",
                    "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the Hub.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the Hub resource was updated.\n"
                }
            },
            "required": [
                "connectedDeviceCount",
                "createdAt",
                "deviceCount",
                "endpoint",
                "name",
                "organizationId",
                "productPlan",
                "projectId",
                "region",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "deviceAutoProvisioning": {
                    "type": "boolean",
                    "description": "Wether to enable the device auto provisioning or not\n"
                },
                "disableEvents": {
                    "type": "boolean",
                    "description": "Whether to enable the hub events or not\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Wether the IoT Hub instance should be enabled or not.\n"
                },
                "eventsTopicPrefix": {
                    "type": "string",
                    "description": "Topic prefix for the hub events\n"
                },
                "hubCa": {
                    "type": "string",
                    "description": "Custom user provided certificate authority\n"
                },
                "hubCaChallenge": {
                    "type": "string",
                    "description": "Challenge certificate for the user provided hub CA\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                },
                "productPlan": {
                    "type": "string",
                    "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "productPlan"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotHub resources.\n",
                "properties": {
                    "connectedDeviceCount": {
                        "type": "integer",
                        "description": "The current number of connected devices in the Hub.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Hub was created.\n"
                    },
                    "deviceAutoProvisioning": {
                        "type": "boolean",
                        "description": "Wether to enable the device auto provisioning or not\n"
                    },
                    "deviceCount": {
                        "type": "integer",
                        "description": "The number of registered devices in the Hub.\n"
                    },
                    "disableEvents": {
                        "type": "boolean",
                        "description": "Whether to enable the hub events or not\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Wether the IoT Hub instance should be enabled or not.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The MQTT network endpoint to connect MQTT devices to.\n"
                    },
                    "eventsTopicPrefix": {
                        "type": "string",
                        "description": "Topic prefix for the hub events\n"
                    },
                    "hubCa": {
                        "type": "string",
                        "description": "Custom user provided certificate authority\n"
                    },
                    "hubCaChallenge": {
                        "type": "string",
                        "description": "Challenge certificate for the user provided hub CA\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "productPlan": {
                        "type": "string",
                        "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the Hub.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the Hub resource was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotNetwork:IotNetwork": {
            "description": "\n\n\n## Import\n\nIoT Networks can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iotNetwork:IotNetwork net01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Network was created.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint to use when interacting with the network.\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Network will be attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The endpoint key to keep secret.\n",
                    "secret": true
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "The prefix that will be prepended to all topics for this Network.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The network type to create (e.g. `sigfox`).\n"
                }
            },
            "required": [
                "createdAt",
                "endpoint",
                "hubId",
                "name",
                "secret",
                "type"
            ],
            "inputProperties": {
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Network will be attached to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n",
                    "willReplaceOnChanges": true
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "The prefix that will be prepended to all topics for this Network.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The network type to create (e.g. `sigfox`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hubId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotNetwork resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Network was created.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint to use when interacting with the network.\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The hub ID to which the Network will be attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "The endpoint key to keep secret.\n",
                        "secret": true
                    },
                    "topicPrefix": {
                        "type": "string",
                        "description": "The prefix that will be prepended to all topics for this Network.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The network type to create (e.g. `sigfox`).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotRoute:IotRoute": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the IoT Route\n"
                },
                "database": {
                    "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                    "description": "Database Route parameters\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the route's hub\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the route\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "rest": {
                    "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                    "description": "Rest Route parameters\n"
                },
                "s3": {
                    "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                    "description": "S3 Route parameters\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Topic the route subscribes to (wildcards allowed)\n"
                }
            },
            "required": [
                "createdAt",
                "hubId",
                "name",
                "region",
                "topic"
            ],
            "inputProperties": {
                "database": {
                    "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                    "description": "Database Route parameters\n",
                    "willReplaceOnChanges": true
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the route's hub\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the route\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "rest": {
                    "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                    "description": "Rest Route parameters\n",
                    "willReplaceOnChanges": true
                },
                "s3": {
                    "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                    "description": "S3 Route parameters\n",
                    "willReplaceOnChanges": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Topic the route subscribes to (wildcards allowed)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hubId",
                "topic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotRoute resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the IoT Route\n"
                    },
                    "database": {
                        "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                        "description": "Database Route parameters\n",
                        "willReplaceOnChanges": true
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The ID of the route's hub\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the route\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "rest": {
                        "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                        "description": "Rest Route parameters\n",
                        "willReplaceOnChanges": true
                    },
                    "s3": {
                        "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                        "description": "S3 Route parameters\n",
                        "willReplaceOnChanges": true
                    },
                    "topic": {
                        "type": "string",
                        "description": "The Topic the route subscribes to (wildcards allowed)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/kubernetesCluster:KubernetesCluster": {
            "description": "\n\n\n## Import\n\nKubernetes clusters can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/kubernetesCluster:KubernetesCluster mycluster fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                },
                "apiserverCertSans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                },
                "apiserverUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade",
                    "description": "The auto upgrade configuration.\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig",
                    "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the cluster.\n"
                },
                "deleteAdditionalResources": {
                    "type": "boolean",
                    "description": "Delete additional resources like block volumes and loadbalancers that were created in Kubernetes on cluster deletion.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Kubernetes cluster.\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterKubeconfig:KubernetesClusterKubeconfig"
                    },
                    "description": "The kubeconfig configuration file of the Kubernetes cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Kubernetes cluster.\n"
                },
                "openIdConnectConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig",
                    "description": "The OpenID Connect configuration of the cluster\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the cluster is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cluster is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the cluster should be created.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Kubernetes cluster.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Kubernetes cluster.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Kubernetes cluster. Possible values are: `kapsule` or `multicloud`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the cluster.\n"
                },
                "upgradeAvailable": {
                    "type": "boolean",
                    "description": "Set to `true` if a newer Kubernetes version is available.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes cluster.\n"
                },
                "wildcardDns": {
                    "type": "string",
                    "description": "The DNS wildcard that points to all ready nodes.\n- `kubeconfig`\n"
                }
            },
            "required": [
                "apiserverUrl",
                "autoUpgrade",
                "autoscalerConfig",
                "cni",
                "createdAt",
                "kubeconfigs",
                "name",
                "openIdConnectConfig",
                "organizationId",
                "projectId",
                "region",
                "status",
                "type",
                "updatedAt",
                "upgradeAvailable",
                "version",
                "wildcardDns"
            ],
            "inputProperties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                },
                "apiserverCertSans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade",
                    "description": "The auto upgrade configuration.\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig",
                    "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "deleteAdditionalResources": {
                    "type": "boolean",
                    "description": "Delete additional resources like block volumes and loadbalancers that were created in Kubernetes on cluster deletion.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Kubernetes cluster.\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Kubernetes cluster.\n"
                },
                "openIdConnectConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig",
                    "description": "The OpenID Connect configuration of the cluster\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cluster is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the cluster should be created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Kubernetes cluster.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Kubernetes cluster. Possible values are: `kapsule` or `multicloud`.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes cluster.\n"
                }
            },
            "requiredInputs": [
                "cni",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesCluster resources.\n",
                "properties": {
                    "admissionPlugins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                    },
                    "apiserverCertSans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                    },
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The URL of the Kubernetes API server.\n"
                    },
                    "autoUpgrade": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade",
                        "description": "The auto upgrade configuration.\n"
                    },
                    "autoscalerConfig": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig",
                        "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the cluster.\n"
                    },
                    "deleteAdditionalResources": {
                        "type": "boolean",
                        "description": "Delete additional resources like block volumes and loadbalancers that were created in Kubernetes on cluster deletion.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Kubernetes cluster.\n"
                    },
                    "featureGates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/KubernetesClusterKubeconfig:KubernetesClusterKubeconfig"
                        },
                        "description": "The kubeconfig configuration file of the Kubernetes cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the Kubernetes cluster.\n"
                    },
                    "openIdConnectConfig": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig",
                        "description": "The OpenID Connect configuration of the cluster\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the cluster is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the cluster is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the cluster should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Kubernetes cluster.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Kubernetes cluster.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Kubernetes cluster. Possible values are: `kapsule` or `multicloud`.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the cluster.\n"
                    },
                    "upgradeAvailable": {
                        "type": "boolean",
                        "description": "Set to `true` if a newer Kubernetes version is available.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the Kubernetes cluster.\n"
                    },
                    "wildcardDns": {
                        "type": "string",
                        "description": "The DNS wildcard that points to all ready nodes.\n- `kubeconfig`\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/kubernetesNodePool:KubernetesNodePool": {
            "description": "\n\n\n## Import\n\nKubernetes pools can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/kubernetesNodePool:KubernetesNodePool mypool fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enables the autohealing feature for this pool.\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster on which this pool will be created.\n"
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the pool.\n"
                },
                "currentSize": {
                    "type": "integer",
                    "description": "The actual size of the pool\n"
                },
                "kubeletArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Kubelet arguments to be used by this pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/KubernetesNodePoolNode:KubernetesNodePoolNode"
                    },
                    "description": "(List of) The nodes in the default pool.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the pool should be created.\n"
                },
                "rootVolumeSizeInGb": {
                    "type": "integer",
                    "description": "The size of the system volume of the nodes in gigabyte\n"
                },
                "rootVolumeType": {
                    "type": "string",
                    "description": "System volume type of the nodes composing the pool\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the pool.\n"
                },
                "upgradePolicy": {
                    "$ref": "#/types/scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy",
                    "description": "The Pool upgrade policy\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the pool.\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                }
            },
            "required": [
                "clusterId",
                "createdAt",
                "currentSize",
                "maxSize",
                "name",
                "nodeType",
                "nodes",
                "region",
                "size",
                "status",
                "updatedAt",
                "upgradePolicy",
                "version",
                "zone"
            ],
            "inputProperties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enables the autohealing feature for this pool.\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster on which this pool will be created.\n",
                    "willReplaceOnChanges": true
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "kubeletArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Kubelet arguments to be used by this pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "nodeType": {
                    "type": "string",
                    "description": "The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.\n",
                    "willReplaceOnChanges": true
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the pool should be created.\n",
                    "willReplaceOnChanges": true
                },
                "rootVolumeSizeInGb": {
                    "type": "integer",
                    "description": "The size of the system volume of the nodes in gigabyte\n",
                    "willReplaceOnChanges": true
                },
                "rootVolumeType": {
                    "type": "string",
                    "description": "System volume type of the nodes composing the pool\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                },
                "upgradePolicy": {
                    "$ref": "#/types/scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy",
                    "description": "The Pool upgrade policy\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "nodeType",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesNodePool resources.\n",
                "properties": {
                    "autohealing": {
                        "type": "boolean",
                        "description": "Enables the autohealing feature for this pool.\n"
                    },
                    "autoscaling": {
                        "type": "boolean",
                        "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Kubernetes cluster on which this pool will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the pool.\n"
                    },
                    "currentSize": {
                        "type": "integer",
                        "description": "The actual size of the pool\n"
                    },
                    "kubeletArgs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The Kubelet arguments to be used by this pool\n"
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/KubernetesNodePoolNode:KubernetesNodePoolNode"
                        },
                        "description": "(List of) The nodes in the default pool.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the pool should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "rootVolumeSizeInGb": {
                        "type": "integer",
                        "description": "The size of the system volume of the nodes in gigabyte\n",
                        "willReplaceOnChanges": true
                    },
                    "rootVolumeType": {
                        "type": "string",
                        "description": "System volume type of the nodes composing the pool\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the pool.\n"
                    },
                    "upgradePolicy": {
                        "$ref": "#/types/scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy",
                        "description": "The Pool upgrade policy\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the pool.\n"
                    },
                    "waitForPoolReady": {
                        "type": "boolean",
                        "description": "Whether to wait for the pool to be ready.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancer:Loadbalancer": {
            "description": "Creates and manages Scaleway Load-Balancers.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst main = new scaleway.LoadbalancerIp(\"main\", {zone: \"fr-par-1\"});\nconst base = new scaleway.Loadbalancer(\"base\", {\n    ipId: main.id,\n    zone: main.zone,\n    type: \"LB-S\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.LoadbalancerIp(\"main\", zone=\"fr-par-1\")\nbase = scaleway.Loadbalancer(\"base\",\n    ip_id=main.id,\n    zone=main.zone,\n    type=\"LB-S\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.LoadbalancerIp(\"main\", new()\n    {\n        Zone = \"fr-par-1\",\n    });\n\n    var @base = new Scaleway.Loadbalancer(\"base\", new()\n    {\n        IpId = main.Id,\n        Zone = main.Zone,\n        Type = \"LB-S\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewLoadbalancerIp(ctx, \"main\", \u0026scaleway.LoadbalancerIpArgs{\n\t\t\tZone: pulumi.String(\"fr-par-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"base\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId: main.ID(),\n\t\t\tZone: main.Zone,\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.LoadbalancerIpArgs;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new LoadbalancerIp(\"main\", LoadbalancerIpArgs.builder()        \n            .zone(\"fr-par-1\")\n            .build());\n\n        var base = new Loadbalancer(\"base\", LoadbalancerArgs.builder()        \n            .ipId(main.id())\n            .zone(main.zone())\n            .type(\"LB-S\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:LoadbalancerIp\n    properties:\n      zone: fr-par-1\n  base:\n    type: scaleway:Loadbalancer\n    properties:\n      ipId: ${main.id}\n      zone: ${main.zone}\n      type: LB-S\n```\n\n### IP for Public Gateway\nresource \"scaleway_vpc_public_gateway_ip\" \"main\" {\n}\n\n### Scaleway Private Network\nresource scaleway_vpc_private_network main {\n}\n\n### VPC Public Gateway Network\nresource \"scaleway_vpc_public_gateway\" \"main\" {\n    name  = \"tf-test-public-gw\"\n    type  = \"VPC-GW-S\"\n    ip_id = scaleway_vpc_public_gateway_ip.main.id\n}\n\n### VPC Public Gateway Network DHCP config\nresource \"scaleway_vpc_public_gateway_dhcp\" \"main\" {\n    subnet = \"10.0.0.0/24\"\n}\n\n### VPC Gateway Network\nresource \"scaleway_vpc_gateway_network\" \"main\" {\n    gateway_id         = scaleway_vpc_public_gateway.main.id\n    private_network_id = scaleway_vpc_private_network.main.id\n    dhcp_id            = scaleway_vpc_public_gateway_dhcp.main.id\n    cleanup_dhcp       = true\n    enable_masquerade  = true\n}\n\n### Scaleway Instance\nresource \"scaleway_instance_server\" \"main\" {\n    name        = \"Scaleway Terraform Provider\"\n    type        = \"DEV1-S\"\n    image       = \"debian_bullseye\"\n    enable_ipv6 = false\n\n    private_network {\n        pn_id = scaleway_vpc_private_network.main.id\n    }\n}\n\n### IP for LB IP\nresource scaleway_lb_ip main {\n}\n\n### Scaleway Private Network\nresource scaleway_vpc_private_network \"main\" {\n    name = \"private network with static config\"\n}\n\n## Migration\n\nIn order to migrate to other types you can check the migration up or down via our CLI `scw lb lb-types list`.\nthis change will not recreate your Load Balancer.\n\nPlease check our [documentation](https://developers.scaleway.com/en/products/lb/zoned_api/#post-355592) for further details\n\n## IP ID\n\nSince v1.15.0, `ip_id` is a required field. This means that now a separate `scaleway.LoadbalancerIp` is required.\nWhen importing, the IP needs to be imported as well as the LB.\nWhen upgrading to v1.15.0, you will need to create a new `scaleway.LoadbalancerIp` resource and import it.\n\nFor instance, if you had the following:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.Loadbalancer(\"main\", {\n    type: \"LB-S\",\n    zone: \"fr-par-1\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.Loadbalancer(\"main\",\n    type=\"LB-S\",\n    zone=\"fr-par-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.Loadbalancer(\"main\", new()\n    {\n        Type = \"LB-S\",\n        Zone = \"fr-par-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancer(ctx, \"main\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t\tZone: pulumi.String(\"fr-par-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Loadbalancer(\"main\", LoadbalancerArgs.builder()        \n            .type(\"LB-S\")\n            .zone(\"fr-par-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Loadbalancer\n    properties:\n      type: LB-S\n      zone: fr-par-1\n```\n\nYou will need to update it to:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainLoadbalancerIp = new scaleway.LoadbalancerIp(\"mainLoadbalancerIp\", {});\nconst mainLoadbalancer = new scaleway.Loadbalancer(\"mainLoadbalancer\", {\n    ipId: mainLoadbalancerIp.id,\n    zone: \"fr-par-1\",\n    type: \"LB-S\",\n    releaseIp: false,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_loadbalancer_ip = scaleway.LoadbalancerIp(\"mainLoadbalancerIp\")\nmain_loadbalancer = scaleway.Loadbalancer(\"mainLoadbalancer\",\n    ip_id=main_loadbalancer_ip.id,\n    zone=\"fr-par-1\",\n    type=\"LB-S\",\n    release_ip=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainLoadbalancerIp = new Scaleway.LoadbalancerIp(\"mainLoadbalancerIp\");\n\n    var mainLoadbalancer = new Scaleway.Loadbalancer(\"mainLoadbalancer\", new()\n    {\n        IpId = mainLoadbalancerIp.Id,\n        Zone = \"fr-par-1\",\n        Type = \"LB-S\",\n        ReleaseIp = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainLoadbalancerIp, err := scaleway.NewLoadbalancerIp(ctx, \"mainLoadbalancerIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"mainLoadbalancer\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId:      mainLoadbalancerIp.ID(),\n\t\t\tZone:      pulumi.String(\"fr-par-1\"),\n\t\t\tType:      pulumi.String(\"LB-S\"),\n\t\t\tReleaseIp: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainLoadbalancerIp = new LoadbalancerIp(\"mainLoadbalancerIp\");\n\n        var mainLoadbalancer = new Loadbalancer(\"mainLoadbalancer\", LoadbalancerArgs.builder()        \n            .ipId(mainLoadbalancerIp.id())\n            .zone(\"fr-par-1\")\n            .type(\"LB-S\")\n            .releaseIp(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainLoadbalancerIp:\n    type: scaleway:LoadbalancerIp\n  mainLoadbalancer:\n    type: scaleway:Loadbalancer\n    properties:\n      ipId: ${mainLoadbalancerIp.id}\n      zone: fr-par-1\n      type: LB-S\n      releaseIp: false\n```\n\n## Private Network with static config\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainLoadbalancerIp = new scaleway.LoadbalancerIp(\"mainLoadbalancerIp\", {});\nconst mainVpcPrivateNetwork = new scaleway.VpcPrivateNetwork(\"mainVpcPrivateNetwork\", {});\nconst mainLoadbalancer = new scaleway.Loadbalancer(\"mainLoadbalancer\", {\n    ipId: mainLoadbalancerIp.id,\n    type: \"LB-S\",\n    releaseIp: false,\n    privateNetworks: [{\n        privateNetworkId: mainVpcPrivateNetwork.id,\n        staticConfigs: [\n            \"172.16.0.100\",\n            \"172.16.0.101\",\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_loadbalancer_ip = scaleway.LoadbalancerIp(\"mainLoadbalancerIp\")\nmain_vpc_private_network = scaleway.VpcPrivateNetwork(\"mainVpcPrivateNetwork\")\nmain_loadbalancer = scaleway.Loadbalancer(\"mainLoadbalancer\",\n    ip_id=main_loadbalancer_ip.id,\n    type=\"LB-S\",\n    release_ip=False,\n    private_networks=[scaleway.LoadbalancerPrivateNetworkArgs(\n        private_network_id=main_vpc_private_network.id,\n        static_configs=[\n            \"172.16.0.100\",\n            \"172.16.0.101\",\n        ],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainLoadbalancerIp = new Scaleway.LoadbalancerIp(\"mainLoadbalancerIp\");\n\n    var mainVpcPrivateNetwork = new Scaleway.VpcPrivateNetwork(\"mainVpcPrivateNetwork\");\n\n    var mainLoadbalancer = new Scaleway.Loadbalancer(\"mainLoadbalancer\", new()\n    {\n        IpId = mainLoadbalancerIp.Id,\n        Type = \"LB-S\",\n        ReleaseIp = false,\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.LoadbalancerPrivateNetworkArgs\n            {\n                PrivateNetworkId = mainVpcPrivateNetwork.Id,\n                StaticConfigs = new[]\n                {\n                    \"172.16.0.100\",\n                    \"172.16.0.101\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainLoadbalancerIp, err := scaleway.NewLoadbalancerIp(ctx, \"mainLoadbalancerIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPrivateNetwork, err := scaleway.NewVpcPrivateNetwork(ctx, \"mainVpcPrivateNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"mainLoadbalancer\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId:      mainLoadbalancerIp.ID(),\n\t\t\tType:      pulumi.String(\"LB-S\"),\n\t\t\tReleaseIp: pulumi.Bool(false),\n\t\t\tPrivateNetworks: LoadbalancerPrivateNetworkArray{\n\t\t\t\t\u0026LoadbalancerPrivateNetworkArgs{\n\t\t\t\t\tPrivateNetworkId: mainVpcPrivateNetwork.ID(),\n\t\t\t\t\tStaticConfigs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"172.16.0.100\"),\n\t\t\t\t\t\tpulumi.String(\"172.16.0.101\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainLoadbalancerIp = new LoadbalancerIp(\"mainLoadbalancerIp\");\n\n        var mainVpcPrivateNetwork = new VpcPrivateNetwork(\"mainVpcPrivateNetwork\");\n\n        var mainLoadbalancer = new Loadbalancer(\"mainLoadbalancer\", LoadbalancerArgs.builder()        \n            .ipId(mainLoadbalancerIp.id())\n            .type(\"LB-S\")\n            .releaseIp(false)\n            .privateNetworks(LoadbalancerPrivateNetworkArgs.builder()\n                .privateNetworkId(mainVpcPrivateNetwork.id())\n                .staticConfigs(                \n                    \"172.16.0.100\",\n                    \"172.16.0.101\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainLoadbalancerIp:\n    type: scaleway:LoadbalancerIp\n  mainVpcPrivateNetwork:\n    type: scaleway:VpcPrivateNetwork\n  mainLoadbalancer:\n    type: scaleway:Loadbalancer\n    properties:\n      ipId: ${mainLoadbalancerIp.id}\n      type: LB-S\n      releaseIp: false\n      privateNetworks:\n        - privateNetworkId: ${mainVpcPrivateNetwork.id}\n          staticConfigs:\n            - 172.16.0.100\n            - 172.16.0.101\n```\n\n\n## Import\n\nLoad-Balancer can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/loadbalancer:Loadbalancer main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n Be aware that you will also need to import the `scaleway_lb_ip` resource. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the load-balancer.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The load-balance public IP Address\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the associated LB IP. See below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the load-balancer is associated with.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork"
                    },
                    "description": "List of private network to connect with your load balancer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the load-balancer is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the resource\n"
                },
                "releaseIp": {
                    "type": "boolean",
                    "description": "The release_ip allow release the ip address associated with the load-balancers.\n",
                    "deprecationMessage": "The resource ip will be destroyed by it's own resource. Please set this to `false`"
                },
                "sslCompatibilityLevel": {
                    "type": "string",
                    "description": "Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://developers.scaleway.com/en/products/lb/zoned_api/#ssl-compatibility-level-442f99).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the load-balancers.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the load-balancer. Please check the migration section to upgrade the type\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "ipAddress",
                "ipId",
                "name",
                "organizationId",
                "projectId",
                "region",
                "type",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the load-balancer.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the associated LB IP. See below.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork"
                    },
                    "description": "List of private network to connect with your load balancer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the load-balancer is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "releaseIp": {
                    "type": "boolean",
                    "description": "The release_ip allow release the ip address associated with the load-balancers.\n",
                    "deprecationMessage": "The resource ip will be destroyed by it's own resource. Please set this to `false`"
                },
                "sslCompatibilityLevel": {
                    "type": "string",
                    "description": "Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://developers.scaleway.com/en/products/lb/zoned_api/#ssl-compatibility-level-442f99).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the load-balancers.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the load-balancer. Please check the migration section to upgrade the type\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Loadbalancer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the load-balancer.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The load-balance public IP Address\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The ID of the associated LB IP. See below.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load-balancer.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the load-balancer is associated with.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork"
                        },
                        "description": "List of private network to connect with your load balancer\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the load-balancer is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the resource\n"
                    },
                    "releaseIp": {
                        "type": "boolean",
                        "description": "The release_ip allow release the ip address associated with the load-balancers.\n",
                        "deprecationMessage": "The resource ip will be destroyed by it's own resource. Please set this to `false`"
                    },
                    "sslCompatibilityLevel": {
                        "type": "string",
                        "description": "Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://developers.scaleway.com/en/products/lb/zoned_api/#ssl-compatibility-level-442f99).\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the load-balancers.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the load-balancer. Please check the migration section to upgrade the type\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerBackend:LoadbalancerBackend": {
            "description": "Creates and manages Scaleway Load-Balancer Backends.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst backend01 = new scaleway.LoadbalancerBackend(\"backend01\", {\n    lbId: scaleway_lb.lb01.id,\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nbackend01 = scaleway.LoadbalancerBackend(\"backend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    forward_protocol=\"http\",\n    forward_port=80)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backend01 = new Scaleway.LoadbalancerBackend(\"backend01\", new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerBackend(ctx, \"backend01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backend01 = new LoadbalancerBackend(\"backend01\", LoadbalancerBackendArgs.builder()        \n            .lbId(scaleway_lb.lb01().id())\n            .forwardProtocol(\"http\")\n            .forwardPort(\"80\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backend01:\n    type: scaleway:LoadbalancerBackend\n    properties:\n      lbId: ${scaleway_lb.lb01.id}\n      forwardProtocol: http\n      forwardPort: '80'\n```\n\n### With HTTP Health Check\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst backend01 = new scaleway.LoadbalancerBackend(\"backend01\", {\n    lbId: scaleway_lb.lb01.id,\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n    healthCheckHttp: {\n        uri: \"www.test.com/health\",\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nbackend01 = scaleway.LoadbalancerBackend(\"backend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    forward_protocol=\"http\",\n    forward_port=80,\n    health_check_http=scaleway.LoadbalancerBackendHealthCheckHttpArgs(\n        uri=\"www.test.com/health\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backend01 = new Scaleway.LoadbalancerBackend(\"backend01\", new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n        HealthCheckHttp = new Scaleway.Inputs.LoadbalancerBackendHealthCheckHttpArgs\n        {\n            Uri = \"www.test.com/health\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerBackend(ctx, \"backend01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tHealthCheckHttp: \u0026LoadbalancerBackendHealthCheckHttpArgs{\n\t\t\t\tUri: pulumi.String(\"www.test.com/health\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerBackendHealthCheckHttpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backend01 = new LoadbalancerBackend(\"backend01\", LoadbalancerBackendArgs.builder()        \n            .lbId(scaleway_lb.lb01().id())\n            .forwardProtocol(\"http\")\n            .forwardPort(\"80\")\n            .healthCheckHttp(LoadbalancerBackendHealthCheckHttpArgs.builder()\n                .uri(\"www.test.com/health\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backend01:\n    type: scaleway:LoadbalancerBackend\n    properties:\n      lbId: ${scaleway_lb.lb01.id}\n      forwardProtocol: http\n      forwardPort: '80'\n      healthCheckHttp:\n        uri: www.test.com/health\n```\n\n\n## Import\n\nLoad-Balancer backend can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/loadbalancerBackend:LoadbalancerBackend backend01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "failoverHost": {
                    "type": "string",
                    "description": "Scaleway S3 bucket website to be served in case all backend servers are down.\n\u003e **Note:** Only the host part of the Scaleway S3 bucket website is expected:\ne.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.\n"
                },
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers.\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol. Possible values are: `tcp` or `http`.\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests.\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp",
                    "description": "This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps",
                    "description": "This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to.\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp",
                    "description": "This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this backend is attached to.\n\u003e **Important:** Updates to `lb_id` will recreate the backend.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer backend.\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.\n",
                    "deprecationMessage": "Please use proxy_protocol instead"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of backend server IP addresses. Addresses can be either IPv4 or IPv6.\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time. (e.g.: `1s`)\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time. (e.g.: `1s`)\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time. (e.g.: `1s`)\n"
                }
            },
            "required": [
                "forwardPort",
                "forwardProtocol",
                "healthCheckPort",
                "healthCheckTcp",
                "lbId",
                "name"
            ],
            "inputProperties": {
                "failoverHost": {
                    "type": "string",
                    "description": "Scaleway S3 bucket website to be served in case all backend servers are down.\n\u003e **Note:** Only the host part of the Scaleway S3 bucket website is expected:\ne.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.\n"
                },
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers.\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol. Possible values are: `tcp` or `http`.\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests.\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp",
                    "description": "This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps",
                    "description": "This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to.\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp",
                    "description": "This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this backend is attached to.\n\u003e **Important:** Updates to `lb_id` will recreate the backend.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer backend.\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.\n",
                    "deprecationMessage": "Please use proxy_protocol instead"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of backend server IP addresses. Addresses can be either IPv4 or IPv6.\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time. (e.g.: `1s`)\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time. (e.g.: `1s`)\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time. (e.g.: `1s`)\n"
                }
            },
            "requiredInputs": [
                "forwardPort",
                "forwardProtocol",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerBackend resources.\n",
                "properties": {
                    "failoverHost": {
                        "type": "string",
                        "description": "Scaleway S3 bucket website to be served in case all backend servers are down.\n\u003e **Note:** Only the host part of the Scaleway S3 bucket website is expected:\ne.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.\n"
                    },
                    "forwardPort": {
                        "type": "integer",
                        "description": "User sessions will be forwarded to this port of backend servers.\n"
                    },
                    "forwardPortAlgorithm": {
                        "type": "string",
                        "description": "Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.\n"
                    },
                    "forwardProtocol": {
                        "type": "string",
                        "description": "Backend protocol. Possible values are: `tcp` or `http`.\n"
                    },
                    "healthCheckDelay": {
                        "type": "string",
                        "description": "Interval between two HC requests.\n"
                    },
                    "healthCheckHttp": {
                        "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp",
                        "description": "This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                    },
                    "healthCheckHttps": {
                        "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps",
                        "description": "This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                    },
                    "healthCheckMaxRetries": {
                        "type": "integer",
                        "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                    },
                    "healthCheckPort": {
                        "type": "integer",
                        "description": "Port the HC requests will be send to.\n"
                    },
                    "healthCheckTcp": {
                        "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp",
                        "description": "This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                    },
                    "healthCheckTimeout": {
                        "type": "string",
                        "description": "Timeout before we consider a HC request failed.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this backend is attached to.\n\u003e **Important:** Updates to `lb_id` will recreate the backend.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load-balancer backend.\n"
                    },
                    "onMarkedDownAction": {
                        "type": "string",
                        "description": "Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.\n"
                    },
                    "proxyProtocol": {
                        "type": "string",
                        "description": "Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)\n"
                    },
                    "sendProxyV2": {
                        "type": "boolean",
                        "description": "DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.\n",
                        "deprecationMessage": "Please use proxy_protocol instead"
                    },
                    "serverIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of backend server IP addresses. Addresses can be either IPv4 or IPv6.\n"
                    },
                    "stickySessions": {
                        "type": "string",
                        "description": "Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.\n"
                    },
                    "stickySessionsCookieName": {
                        "type": "string",
                        "description": "Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.\n"
                    },
                    "timeoutConnect": {
                        "type": "string",
                        "description": "Maximum initial server connection establishment time. (e.g.: `1s`)\n"
                    },
                    "timeoutServer": {
                        "type": "string",
                        "description": "Maximum server connection inactivity time. (e.g.: `1s`)\n"
                    },
                    "timeoutTunnel": {
                        "type": "string",
                        "description": "Maximum tunnel inactivity time. (e.g.: `1s`)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerCertificate:LoadbalancerCertificate": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "Main domain of the certificate. A new certificate will be created if this field is changed.\n"
                },
                "customCertificate": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate",
                    "description": "Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The identifier (SHA-1) of the certificate\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this certificate is attached to.\n"
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt",
                    "description": "Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate backend.\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "The not valid after validity bound timestamp\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "The not valid before validity bound timestamp\n"
                },
                "status": {
                    "type": "string",
                    "description": "Certificate status\n"
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of alternative domain names.  A new certificate will be created if this field is changed.\n"
                }
            },
            "required": [
                "commonName",
                "fingerprint",
                "lbId",
                "name",
                "notValidAfter",
                "notValidBefore",
                "status",
                "subjectAlternativeNames"
            ],
            "inputProperties": {
                "customCertificate": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate",
                    "description": "Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this certificate is attached to.\n",
                    "willReplaceOnChanges": true
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt",
                    "description": "Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate backend.\n"
                }
            },
            "requiredInputs": [
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerCertificate resources.\n",
                "properties": {
                    "commonName": {
                        "type": "string",
                        "description": "Main domain of the certificate. A new certificate will be created if this field is changed.\n"
                    },
                    "customCertificate": {
                        "$ref": "#/types/scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate",
                        "description": "Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The identifier (SHA-1) of the certificate\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this certificate is attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "letsencrypt": {
                        "$ref": "#/types/scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt",
                        "description": "Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate backend.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "The not valid after validity bound timestamp\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "The not valid before validity bound timestamp\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Certificate status\n"
                    },
                    "subjectAlternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of alternative domain names.  A new certificate will be created if this field is changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerFrontend:LoadbalancerFrontend": {
            "description": "Creates and manages Scaleway Load-Balancer Frontends. For more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).\n\n## Examples Usage\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst frontend01 = new scaleway.LoadbalancerFrontend(\"frontend01\", {\n    lbId: scaleway_lb.lb01.id,\n    backendId: scaleway_lb_backend.backend01.id,\n    inboundPort: 80,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nfrontend01 = scaleway.LoadbalancerFrontend(\"frontend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    backend_id=scaleway_lb_backend[\"backend01\"][\"id\"],\n    inbound_port=80)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var frontend01 = new Scaleway.LoadbalancerFrontend(\"frontend01\", new()\n    {\n        LbId = scaleway_lb.Lb01.Id,\n        BackendId = scaleway_lb_backend.Backend01.Id,\n        InboundPort = 80,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerFrontend(ctx, \"frontend01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tBackendId:   pulumi.Any(scaleway_lb_backend.Backend01.Id),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerFrontend;\nimport com.pulumi.scaleway.LoadbalancerFrontendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var frontend01 = new LoadbalancerFrontend(\"frontend01\", LoadbalancerFrontendArgs.builder()        \n            .lbId(scaleway_lb.lb01().id())\n            .backendId(scaleway_lb_backend.backend01().id())\n            .inboundPort(\"80\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  frontend01:\n    type: scaleway:LoadbalancerFrontend\n    properties:\n      lbId: ${scaleway_lb.lb01.id}\n      backendId: ${scaleway_lb_backend.backend01.id}\n      inboundPort: '80'\n```\n\n## With ACLs\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerFrontend;\nimport com.pulumi.scaleway.LoadbalancerFrontendArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerFrontendAclArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerFrontendAclActionArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerFrontendAclMatchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var frontend01 = new LoadbalancerFrontend(\"frontend01\", LoadbalancerFrontendArgs.builder()        \n            .lbId(scaleway_lb.lb01().id())\n            .backendId(scaleway_lb_backend.backend01().id())\n            .inboundPort(\"80\")\n            .acls(            \n                LoadbalancerFrontendAclArgs.builder()\n                    .name(\"blacklist wellknwon IPs\")\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .ipSubnets(                        \n                            \"192.168.0.1\",\n                            \"192.168.0.2\",\n                            \"192.168.10.0/24\")\n                        .build())\n                    .build(),\n                LoadbalancerFrontendAclArgs.builder()\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"deny\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .ipSubnets(\"51.51.51.51\")\n                        .httpFilter(\"regex\")\n                        .httpFilterValues(\"^foo*bar$\")\n                        .build())\n                    .build(),\n                LoadbalancerFrontendAclArgs.builder()\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .httpFilter(\"path_begin\")\n                        .httpFilterValues(                        \n                            \"foo\",\n                            \"bar\")\n                        .build())\n                    .build(),\n                LoadbalancerFrontendAclArgs.builder()\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .httpFilter(\"path_begin\")\n                        .httpFilterValues(\"hi\")\n                        .invert(\"true\")\n                        .build())\n                    .build(),\n                LoadbalancerFrontendAclArgs.builder()\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .httpFilter(\"http_header_match\")\n                        .httpFilterValues(\"foo\")\n                        .httpValueOption(\"bar\")\n                        .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  frontend01:\n    type: scaleway:LoadbalancerFrontend\n    properties:\n      lbId: ${scaleway_lb.lb01.id}\n      backendId: ${scaleway_lb_backend.backend01.id}\n      inboundPort: '80'\n      # Allow downstream requests from: 192.168.0.1, 192.168.0.2 or 192.168.10.0/24\n      acls:\n        - name: blacklist wellknwon IPs\n          action:\n            type: allow\n          match:\n            ipSubnets:\n              - 192.168.0.1\n              - 192.168.0.2\n              - 192.168.10.0/24\n        - action:\n            type: deny\n          match:\n            ipSubnets:\n              - 51.51.51.51\n            httpFilter: regex\n            httpFilterValues:\n              - ^foo*bar$\n        - action:\n            type: allow\n          match:\n            httpFilter: path_begin\n            httpFilterValues:\n              - foo\n              - bar\n        - action:\n            type: allow\n          match:\n            httpFilter: path_begin\n            httpFilterValues:\n              - hi\n            invert: 'true'\n        - action:\n            type: allow\n          match:\n            httpFilter: http_header_match\n            httpFilterValues: foo\n            httpValueOption: bar\n```\n\n\n## Import\n\nLoad-Balancer frontend can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/loadbalancerFrontend:LoadbalancerFrontend frontend01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl"
                    },
                    "description": "A list of ACL rules to apply to the load-balancer frontend.  Defined below.\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The load-balancer backend ID this frontend is attached to.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "(Deprecated) first certificate ID used by the frontend.\n",
                    "deprecationMessage": "Please use certificate_ids"
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Certificate IDs that should be used by the frontend.\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen on the front side.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this frontend is attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side. (e.g.: `1s`)\n"
                }
            },
            "required": [
                "backendId",
                "certificateId",
                "inboundPort",
                "lbId",
                "name"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl"
                    },
                    "description": "A list of ACL rules to apply to the load-balancer frontend.  Defined below.\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The load-balancer backend ID this frontend is attached to.\n",
                    "willReplaceOnChanges": true
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Certificate IDs that should be used by the frontend.\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen on the front side.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this frontend is attached to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side. (e.g.: `1s`)\n"
                }
            },
            "requiredInputs": [
                "backendId",
                "inboundPort",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerFrontend resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl"
                        },
                        "description": "A list of ACL rules to apply to the load-balancer frontend.  Defined below.\n"
                    },
                    "backendId": {
                        "type": "string",
                        "description": "The load-balancer backend ID this frontend is attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "certificateId": {
                        "type": "string",
                        "description": "(Deprecated) first certificate ID used by the frontend.\n",
                        "deprecationMessage": "Please use certificate_ids"
                    },
                    "certificateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Certificate IDs that should be used by the frontend.\n"
                    },
                    "inboundPort": {
                        "type": "integer",
                        "description": "TCP port to listen on the front side.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this frontend is attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The ACL name. If not provided it will be randomly generated.\n"
                    },
                    "timeoutClient": {
                        "type": "string",
                        "description": "Maximum inactivity time on the client side. (e.g.: `1s`)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerIp:LoadbalancerIp": {
            "description": "Creates and manages Scaleway Load-Balancers IPs.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst ip = new scaleway.LoadbalancerIp(\"ip\", {\n    reverse: \"my-reverse.com\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nip = scaleway.LoadbalancerIp(\"ip\", reverse=\"my-reverse.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip = new Scaleway.LoadbalancerIp(\"ip\", new()\n    {\n        Reverse = \"my-reverse.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerIp(ctx, \"ip\", \u0026scaleway.LoadbalancerIpArgs{\n\t\t\tReverse: pulumi.String(\"my-reverse.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.LoadbalancerIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip = new LoadbalancerIp(\"ip\", LoadbalancerIpArgs.builder()        \n            .reverse(\"my-reverse.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip:\n    type: scaleway:LoadbalancerIp\n    properties:\n      reverse: my-reverse.com\n```\n\n\n## Import\n\nIPs can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/loadbalancerIp:LoadbalancerIp ip01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP Address\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The associated load-balance ID if any\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the resource\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "ipAddress",
                "lbId",
                "organizationId",
                "projectId",
                "region",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerIp resources.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP Address\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The associated load-balance ID if any\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the resource\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerRoute:LoadbalancerRoute": {
            "description": "Creates and manages Scaleway Load-Balancer Routes. For more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api/#route-ff94b7).\nIt is useful to manage the Service Name Indicator (SNI) for a route between a frontend and a backend.\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst ip01 = new scaleway.LoadbalancerIp(\"ip01\", {});\nconst lb01 = new scaleway.Loadbalancer(\"lb01\", {\n    ipId: ip01.id,\n    type: \"lb-s\",\n});\nconst bkd01 = new scaleway.LoadbalancerBackend(\"bkd01\", {\n    lbId: lb01.id,\n    forwardProtocol: \"tcp\",\n    forwardPort: 80,\n    proxyProtocol: \"none\",\n});\nconst frt01 = new scaleway.LoadbalancerFrontend(\"frt01\", {\n    lbId: lb01.id,\n    backendId: bkd01.id,\n    inboundPort: 80,\n});\nconst rt01 = new scaleway.LoadbalancerRoute(\"rt01\", {\n    frontendId: frt01.id,\n    backendId: bkd01.id,\n    matchSni: \"scaleway.com\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nip01 = scaleway.LoadbalancerIp(\"ip01\")\nlb01 = scaleway.Loadbalancer(\"lb01\",\n    ip_id=ip01.id,\n    type=\"lb-s\")\nbkd01 = scaleway.LoadbalancerBackend(\"bkd01\",\n    lb_id=lb01.id,\n    forward_protocol=\"tcp\",\n    forward_port=80,\n    proxy_protocol=\"none\")\nfrt01 = scaleway.LoadbalancerFrontend(\"frt01\",\n    lb_id=lb01.id,\n    backend_id=bkd01.id,\n    inbound_port=80)\nrt01 = scaleway.LoadbalancerRoute(\"rt01\",\n    frontend_id=frt01.id,\n    backend_id=bkd01.id,\n    match_sni=\"scaleway.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip01 = new Scaleway.LoadbalancerIp(\"ip01\");\n\n    var lb01 = new Scaleway.Loadbalancer(\"lb01\", new()\n    {\n        IpId = ip01.Id,\n        Type = \"lb-s\",\n    });\n\n    var bkd01 = new Scaleway.LoadbalancerBackend(\"bkd01\", new()\n    {\n        LbId = lb01.Id,\n        ForwardProtocol = \"tcp\",\n        ForwardPort = 80,\n        ProxyProtocol = \"none\",\n    });\n\n    var frt01 = new Scaleway.LoadbalancerFrontend(\"frt01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = bkd01.Id,\n        InboundPort = 80,\n    });\n\n    var rt01 = new Scaleway.LoadbalancerRoute(\"rt01\", new()\n    {\n        FrontendId = frt01.Id,\n        BackendId = bkd01.Id,\n        MatchSni = \"scaleway.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLoadbalancerIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlb01, err := scaleway.NewLoadbalancer(ctx, \"lb01\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId: ip01.ID(),\n\t\t\tType: pulumi.String(\"lb-s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbkd01, err := scaleway.NewLoadbalancerBackend(ctx, \"bkd01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            lb01.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"tcp\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tProxyProtocol:   pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfrt01, err := scaleway.NewLoadbalancerFrontend(ctx, \"frt01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        lb01.ID(),\n\t\t\tBackendId:   bkd01.ID(),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancerRoute(ctx, \"rt01\", \u0026scaleway.LoadbalancerRouteArgs{\n\t\t\tFrontendId: frt01.ID(),\n\t\t\tBackendId:  bkd01.ID(),\n\t\t\tMatchSni:   pulumi.String(\"scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport com.pulumi.scaleway.LoadbalancerFrontend;\nimport com.pulumi.scaleway.LoadbalancerFrontendArgs;\nimport com.pulumi.scaleway.LoadbalancerRoute;\nimport com.pulumi.scaleway.LoadbalancerRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip01 = new LoadbalancerIp(\"ip01\");\n\n        var lb01 = new Loadbalancer(\"lb01\", LoadbalancerArgs.builder()        \n            .ipId(ip01.id())\n            .type(\"lb-s\")\n            .build());\n\n        var bkd01 = new LoadbalancerBackend(\"bkd01\", LoadbalancerBackendArgs.builder()        \n            .lbId(lb01.id())\n            .forwardProtocol(\"tcp\")\n            .forwardPort(80)\n            .proxyProtocol(\"none\")\n            .build());\n\n        var frt01 = new LoadbalancerFrontend(\"frt01\", LoadbalancerFrontendArgs.builder()        \n            .lbId(lb01.id())\n            .backendId(bkd01.id())\n            .inboundPort(80)\n            .build());\n\n        var rt01 = new LoadbalancerRoute(\"rt01\", LoadbalancerRouteArgs.builder()        \n            .frontendId(frt01.id())\n            .backendId(bkd01.id())\n            .matchSni(\"scaleway.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip01:\n    type: scaleway:LoadbalancerIp\n  lb01:\n    type: scaleway:Loadbalancer\n    properties:\n      ipId: ${ip01.id}\n      type: lb-s\n  bkd01:\n    type: scaleway:LoadbalancerBackend\n    properties:\n      lbId: ${lb01.id}\n      forwardProtocol: tcp\n      forwardPort: 80\n      proxyProtocol: none\n  frt01:\n    type: scaleway:LoadbalancerFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${bkd01.id}\n      inboundPort: 80\n  rt01:\n    type: scaleway:LoadbalancerRoute\n    properties:\n      frontendId: ${frt01.id}\n      backendId: ${bkd01.id}\n      matchSni: scaleway.com\n```\n\n\n## Import\n\nLoad-Balancer frontend can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/loadbalancerRoute:LoadbalancerRoute main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "backendId": {
                    "type": "string",
                    "description": "The ID of the backend to which the route is associated.\n- `frontend_id`: (Required) The ID of the frontend to which the route is associated.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The frontend ID origin of redirection\n"
                },
                "matchSni": {
                    "type": "string",
                    "description": "The SNI to match.\n"
                }
            },
            "required": [
                "backendId",
                "frontendId"
            ],
            "inputProperties": {
                "backendId": {
                    "type": "string",
                    "description": "The ID of the backend to which the route is associated.\n- `frontend_id`: (Required) The ID of the frontend to which the route is associated.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The frontend ID origin of redirection\n",
                    "willReplaceOnChanges": true
                },
                "matchSni": {
                    "type": "string",
                    "description": "The SNI to match.\n"
                }
            },
            "requiredInputs": [
                "backendId",
                "frontendId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerRoute resources.\n",
                "properties": {
                    "backendId": {
                        "type": "string",
                        "description": "The ID of the backend to which the route is associated.\n- `frontend_id`: (Required) The ID of the frontend to which the route is associated.\n"
                    },
                    "frontendId": {
                        "type": "string",
                        "description": "The frontend ID origin of redirection\n",
                        "willReplaceOnChanges": true
                    },
                    "matchSni": {
                        "type": "string",
                        "description": "The SNI to match.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucket:ObjectBucket": {
            "description": "Creates and manages Scaleway object storage buckets.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/object-storage-feature/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst someBucket = new scaleway.ObjectBucket(\"some_bucket\", {\n    acl: \"private\",\n    tags: {\n        key: \"value\",\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nsome_bucket = scaleway.ObjectBucket(\"someBucket\",\n    acl=\"private\",\n    tags={\n        \"key\": \"value\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var someBucket = new Scaleway.ObjectBucket(\"someBucket\", new()\n    {\n        Acl = \"private\",\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"someBucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tAcl: pulumi.String(\"private\"),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someBucket = new ObjectBucket(\"someBucket\", ObjectBucketArgs.builder()        \n            .acl(\"private\")\n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  someBucket:\n    type: scaleway:ObjectBucket\n    properties:\n      acl: private\n      tags:\n        key: value\n```\n{{% /example %}}\n{{% example %}}\n### Using object lifecycle\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {\n    acl: \"private\",\n    lifecycleRules: [\n        // This lifecycle configuration rule will make that all objects that got a filter key that start with (path1/) be transferred\n        // from their default storage class (STANDARD, ONEZONE_IA) to GLACIER after 120 days counting \n        // from their creation and then 365 days after that they will be expired and deleted.\n        {\n            enabled: true,\n            expiration: {\n                days: 365,\n            },\n            id: \"id1\",\n            prefix: \"path1/\",\n            transitions: [{\n                days: 120,\n                storageClass: \"GLACIER\",\n            }],\n        },\n        // This lifecycle configuration rule specifies that all objects (identified by the key name prefix (path2/) in the rule)\n        // from their creation and then 50 days after that they will be expired and deleted.\n        {\n            enabled: true,\n            expiration: {\n                days: 50,\n            },\n            id: \"id2\",\n            prefix: \"path2/\",\n        },\n        // This lifecycle configuration rule remove any object with (path3/) prefix that match\n        // with the tags one day after creation.\n        {\n            enabled: false,\n            expiration: {\n                days: 1,\n            },\n            id: \"id3\",\n            prefix: \"path3/\",\n            tags: {\n                tagKey: \"tagValue\",\n                terraform: \"hashicorp\",\n            },\n        },\n        // This lifecycle configuration rule specifies a tag-based filter (tag1/value1).\n        // This rule directs Scaleway S3 to transition objects S3 Glacier class soon after creation.\n        // It is also disable temporaly.\n        {\n            enabled: true,\n            id: \"id4\",\n            tags: {\n                tag1: \"value1\",\n            },\n            transitions: [{\n                days: 0,\n                storageClass: \"GLACIER\",\n            }],\n        },\n        // This lifecycle configuration rule specifies with the AbortIncompleteMultipartUpload action to \n        // stop incomplete multipart uploads (identified by the key name prefix (path5/) in the rule)\n        // if they aren't completed within a specified number of days after initiation.\n        // Note: It's not recommended using prefix/ for AbortIncompleteMultipartUpload as any incomplete multipart upload will be billed\n        {\n            abortIncompleteMultipartUploadDays: 30,\n            //  prefix  = \"path5/\"\n            enabled: true,\n        },\n    ],\n    region: \"fr-par\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\",\n    acl=\"private\",\n    lifecycle_rules=[\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            enabled=True,\n            expiration=scaleway.ObjectBucketLifecycleRuleExpirationArgs(\n                days=365,\n            ),\n            id=\"id1\",\n            prefix=\"path1/\",\n            transitions=[scaleway.ObjectBucketLifecycleRuleTransitionArgs(\n                days=120,\n                storage_class=\"GLACIER\",\n            )],\n        ),\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            enabled=True,\n            expiration=scaleway.ObjectBucketLifecycleRuleExpirationArgs(\n                days=50,\n            ),\n            id=\"id2\",\n            prefix=\"path2/\",\n        ),\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            enabled=False,\n            expiration=scaleway.ObjectBucketLifecycleRuleExpirationArgs(\n                days=1,\n            ),\n            id=\"id3\",\n            prefix=\"path3/\",\n            tags={\n                \"tagKey\": \"tagValue\",\n                \"terraform\": \"hashicorp\",\n            },\n        ),\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            enabled=True,\n            id=\"id4\",\n            tags={\n                \"tag1\": \"value1\",\n            },\n            transitions=[scaleway.ObjectBucketLifecycleRuleTransitionArgs(\n                days=0,\n                storage_class=\"GLACIER\",\n            )],\n        ),\n        scaleway.ObjectBucketLifecycleRuleArgs(\n            abort_incomplete_multipart_upload_days=30,\n            enabled=True,\n        ),\n    ],\n    region=\"fr-par\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Acl = \"private\",\n        LifecycleRules = new[]\n        {\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                Expiration = new Scaleway.Inputs.ObjectBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 365,\n                },\n                Id = \"id1\",\n                Prefix = \"path1/\",\n                Transitions = new[]\n                {\n                    new Scaleway.Inputs.ObjectBucketLifecycleRuleTransitionArgs\n                    {\n                        Days = 120,\n                        StorageClass = \"GLACIER\",\n                    },\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                Expiration = new Scaleway.Inputs.ObjectBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 50,\n                },\n                Id = \"id2\",\n                Prefix = \"path2/\",\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Enabled = false,\n                Expiration = new Scaleway.Inputs.ObjectBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 1,\n                },\n                Id = \"id3\",\n                Prefix = \"path3/\",\n                Tags = \n                {\n                    { \"tagKey\", \"tagValue\" },\n                    { \"terraform\", \"hashicorp\" },\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                Id = \"id4\",\n                Tags = \n                {\n                    { \"tag1\", \"value1\" },\n                },\n                Transitions = new[]\n                {\n                    new Scaleway.Inputs.ObjectBucketLifecycleRuleTransitionArgs\n                    {\n                        Days = 0,\n                        StorageClass = \"GLACIER\",\n                    },\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                AbortIncompleteMultipartUploadDays = 30,\n                Enabled = true,\n            },\n        },\n        Region = \"fr-par\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tAcl: pulumi.String(\"private\"),\n\t\t\tLifecycleRules: ObjectBucketLifecycleRuleArray{\n\t\t\t\t\u0026ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026ObjectBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Int(365),\n\t\t\t\t\t},\n\t\t\t\t\tId:     pulumi.String(\"id1\"),\n\t\t\t\t\tPrefix: pulumi.String(\"path1/\"),\n\t\t\t\t\tTransitions: ObjectBucketLifecycleRuleTransitionArray{\n\t\t\t\t\t\t\u0026ObjectBucketLifecycleRuleTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Int(120),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"GLACIER\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026ObjectBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Int(50),\n\t\t\t\t\t},\n\t\t\t\t\tId:     pulumi.String(\"id2\"),\n\t\t\t\t\tPrefix: pulumi.String(\"path2/\"),\n\t\t\t\t},\n\t\t\t\t\u0026ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(false),\n\t\t\t\t\tExpiration: \u0026ObjectBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t\tId:     pulumi.String(\"id3\"),\n\t\t\t\t\tPrefix: pulumi.String(\"path3/\"),\n\t\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\t\"tagKey\":    pulumi.String(\"tagValue\"),\n\t\t\t\t\t\t\"terraform\": pulumi.String(\"hashicorp\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tId:      pulumi.String(\"id4\"),\n\t\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\t\"tag1\": pulumi.String(\"value1\"),\n\t\t\t\t\t},\n\t\t\t\t\tTransitions: ObjectBucketLifecycleRuleTransitionArray{\n\t\t\t\t\t\t\u0026ObjectBucketLifecycleRuleTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Int(0),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"GLACIER\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tAbortIncompleteMultipartUploadDays: pulumi.Int(30),\n\t\t\t\t\tEnabled:                            pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRegion: pulumi.String(\"fr-par\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketLifecycleRuleArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketLifecycleRuleExpirationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()        \n            .acl(\"private\")\n            .lifecycleRules(            \n                ObjectBucketLifecycleRuleArgs.builder()\n                    .enabled(true)\n                    .expiration(ObjectBucketLifecycleRuleExpirationArgs.builder()\n                        .days(365)\n                        .build())\n                    .id(\"id1\")\n                    .prefix(\"path1/\")\n                    .transitions(ObjectBucketLifecycleRuleTransitionArgs.builder()\n                        .days(120)\n                        .storageClass(\"GLACIER\")\n                        .build())\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .enabled(true)\n                    .expiration(ObjectBucketLifecycleRuleExpirationArgs.builder()\n                        .days(\"50\")\n                        .build())\n                    .id(\"id2\")\n                    .prefix(\"path2/\")\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .enabled(false)\n                    .expiration(ObjectBucketLifecycleRuleExpirationArgs.builder()\n                        .days(\"1\")\n                        .build())\n                    .id(\"id3\")\n                    .prefix(\"path3/\")\n                    .tags(Map.ofEntries(\n                        Map.entry(\"tagKey\", \"tagValue\"),\n                        Map.entry(\"terraform\", \"hashicorp\")\n                    ))\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .enabled(true)\n                    .id(\"id4\")\n                    .tags(Map.of(\"tag1\", \"value1\"))\n                    .transitions(ObjectBucketLifecycleRuleTransitionArgs.builder()\n                        .days(0)\n                        .storageClass(\"GLACIER\")\n                        .build())\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .abortIncompleteMultipartUploadDays(30)\n                    .enabled(true)\n                    .build())\n            .region(\"fr-par\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      acl: private\n      lifecycleRules:\n        - enabled: true\n          expiration:\n            days: 365\n          id: id1\n          prefix: path1/\n          transitions:\n            - days: 120\n              storageClass: GLACIER\n        - enabled: true\n          expiration:\n            days: '50'\n          id: id2\n          prefix: path2/\n        - enabled: false\n          expiration:\n            days: '1'\n          id: id3\n          prefix: path3/\n          tags:\n            tagKey: tagValue\n            terraform: hashicorp\n        - enabled: true\n          id: id4\n          tags:\n            tag1: value1\n          transitions:\n            - days: 0\n              storageClass: GLACIER\n        - abortIncompleteMultipartUploadDays: 30\n          enabled: true\n      region: fr-par\n```\n{{% /example %}}\n{{% /examples %}}\n## The ACL\n\nPlease check the [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl)\n\nThe `CORS` object supports the following:\n\n* `allowed_headers` (Optional) Specifies which headers are allowed.\n* `allowed_methods` (Required) Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.\n* `allowed_origins` (Required) Specifies which origins are allowed.\n* `expose_headers` (Optional) Specifies expose header in the response.\n* `max_age_seconds` (Optional) Specifies time in seconds that browser can cache the response for a preflight request.\n\nThe `lifecycle_rule` (Optional) object supports the following:\n\n* `id` - (Optional) Unique identifier for the rule. Must be less than or equal to 255 characters in length.\n* `prefix` - (Optional) Object key prefix identifying one or more objects to which the rule applies.\n* `tags` - (Optional) Specifies object tags key and value.\n* `enabled` - (Required) The element value can be either Enabled or Disabled. If a rule is disabled, Scaleway S3 doesn't perform any of the actions defined in the rule.\n\n* `abort_incomplete_multipart_upload_days` (Optional) Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.\n\n    * \u003e **Important:** It's not recommended using `prefix` for `AbortIncompleteMultipartUpload` as any incomplete multipart upload will be billed\n\n* `expiration` - (Optional) Specifies a period in the object's expire (documented below).\n* `transition` - (Optional) Specifies a period in the object's transitions (documented below).\n\nAt least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition` must be specified.\n\nThe `expiration` object supports the following\n\n* `days` (Optional) Specifies the number of days after object creation when the specific rule action takes effect.\n\n\u003e **Important:**  If versioning is enabled, this rule only deletes the current version of an object.\n\nThe `transition` object supports the following\n\n* `days` (Optional) Specifies the number of days after object creation when the specific rule action takes effect.\n* `storage_class` (Required) Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA`  to which you want the object to transition.\n\n\u003e **Important:**  `ONEZONE_IA` is only available in `fr-par` region. The storage class `GLACIER` is not available in `pl-waw` region.\n\nThe `versioning` object supports the following:\n\n* `enabled` - (Optional) Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.\n\n\n## Import\n\nBuckets can be imported using the `{region}/{bucketName}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectBucket:ObjectBucket some_bucket fr-par/some-bucket\n```\n\n ",
            "properties": {
                "acl": {
                    "type": "string",
                    "description": "The canned ACL you want to apply to the bucket.\n",
                    "deprecationMessage": "ACL is deprecated. Please use resource_bucket_acl instead."
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                    },
                    "description": "A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint URL of the bucket\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Enable deletion of objects in bucket before destroying, locked objects or under legal hold are also deleted and **not** recoverable\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule"
                    },
                    "description": "Lifecycle configuration is a set of rules that define actions that Scaleway Object Storage applies to a group of objects\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "objectLockEnabled": {
                    "type": "boolean",
                    "description": "Enable object lock\n"
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of tags (key / value) for the bucket.\n"
                },
                "versioning": {
                    "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                    "description": "A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "region",
                "versioning"
            ],
            "inputProperties": {
                "acl": {
                    "type": "string",
                    "description": "The canned ACL you want to apply to the bucket.\n",
                    "deprecationMessage": "ACL is deprecated. Please use resource_bucket_acl instead."
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                    },
                    "description": "A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Enable deletion of objects in bucket before destroying, locked objects or under legal hold are also deleted and **not** recoverable\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule"
                    },
                    "description": "Lifecycle configuration is a set of rules that define actions that Scaleway Object Storage applies to a group of objects\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "objectLockEnabled": {
                    "type": "boolean",
                    "description": "Enable object lock\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of tags (key / value) for the bucket.\n"
                },
                "versioning": {
                    "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                    "description": "A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucket resources.\n",
                "properties": {
                    "acl": {
                        "type": "string",
                        "description": "The canned ACL you want to apply to the bucket.\n",
                        "deprecationMessage": "ACL is deprecated. Please use resource_bucket_acl instead."
                    },
                    "corsRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                        },
                        "description": "A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint URL of the bucket\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Enable deletion of objects in bucket before destroying, locked objects or under legal hold are also deleted and **not** recoverable\n"
                    },
                    "lifecycleRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule"
                        },
                        "description": "Lifecycle configuration is a set of rules that define actions that Scaleway Object Storage applies to a group of objects\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectLockEnabled": {
                        "type": "boolean",
                        "description": "Enable object lock\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of tags (key / value) for the bucket.\n"
                    },
                    "versioning": {
                        "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                        "description": "A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketAcl:ObjectBucketAcl": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst someBucket = new scaleway.ObjectBucket(\"someBucket\", {});\nconst main = new scaleway.ObjectBucketAcl(\"main\", {\n    bucket: scaleway_object_bucket.main.name,\n    acl: \"private\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nsome_bucket = scaleway.ObjectBucket(\"someBucket\")\nmain = scaleway.ObjectBucketAcl(\"main\",\n    bucket=scaleway_object_bucket[\"main\"][\"name\"],\n    acl=\"private\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var someBucket = new Scaleway.ObjectBucket(\"someBucket\");\n\n    var main = new Scaleway.ObjectBucketAcl(\"main\", new()\n    {\n        Bucket = scaleway_object_bucket.Main.Name,\n        Acl = \"private\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"someBucket\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketAcl(ctx, \"main\", \u0026scaleway.ObjectBucketAclArgs{\n\t\t\tBucket: pulumi.Any(scaleway_object_bucket.Main.Name),\n\t\t\tAcl:    pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketAcl;\nimport com.pulumi.scaleway.ObjectBucketAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someBucket = new ObjectBucket(\"someBucket\");\n\n        var main = new ObjectBucketAcl(\"main\", ObjectBucketAclArgs.builder()        \n            .bucket(scaleway_object_bucket.main().name())\n            .acl(\"private\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  someBucket:\n    type: scaleway:ObjectBucket\n  main:\n    type: scaleway:ObjectBucketAcl\n    properties:\n      bucket: ${scaleway_object_bucket.main.name}\n      acl: private\n```\n{{% /example %}}\n{{% /examples %}}\n## Example with Grants\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainObjectBucket = new scaleway.ObjectBucket(\"mainObjectBucket\", {});\nconst mainObjectBucketAcl = new scaleway.ObjectBucketAcl(\"mainObjectBucketAcl\", {\n    bucket: mainObjectBucket.name,\n    accessControlPolicy: {\n        grants: [\n            {\n                grantee: {\n                    id: \"\u003cproject-id\u003e:\u003cproject-id\u003e\",\n                    type: \"CanonicalUser\",\n                },\n                permission: \"FULL_CONTROL\",\n            },\n            {\n                grantee: {\n                    id: \"\u003cproject-id\u003e\",\n                    type: \"CanonicalUser\",\n                },\n                permission: \"WRITE\",\n            },\n        ],\n        owner: {\n            id: \"\u003cproject-id\u003e\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_object_bucket = scaleway.ObjectBucket(\"mainObjectBucket\")\nmain_object_bucket_acl = scaleway.ObjectBucketAcl(\"mainObjectBucketAcl\",\n    bucket=main_object_bucket.name,\n    access_control_policy=scaleway.ObjectBucketAclAccessControlPolicyArgs(\n        grants=[\n            scaleway.ObjectBucketAclAccessControlPolicyGrantArgs(\n                grantee=scaleway.ObjectBucketAclAccessControlPolicyGrantGranteeArgs(\n                    id=\"\u003cproject-id\u003e:\u003cproject-id\u003e\",\n                    type=\"CanonicalUser\",\n                ),\n                permission=\"FULL_CONTROL\",\n            ),\n            scaleway.ObjectBucketAclAccessControlPolicyGrantArgs(\n                grantee=scaleway.ObjectBucketAclAccessControlPolicyGrantGranteeArgs(\n                    id=\"\u003cproject-id\u003e\",\n                    type=\"CanonicalUser\",\n                ),\n                permission=\"WRITE\",\n            ),\n        ],\n        owner=scaleway.ObjectBucketAclAccessControlPolicyOwnerArgs(\n            id=\"\u003cproject-id\u003e\",\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainObjectBucket = new Scaleway.ObjectBucket(\"mainObjectBucket\");\n\n    var mainObjectBucketAcl = new Scaleway.ObjectBucketAcl(\"mainObjectBucketAcl\", new()\n    {\n        Bucket = mainObjectBucket.Name,\n        AccessControlPolicy = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyArgs\n        {\n            Grants = new[]\n            {\n                new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantArgs\n                {\n                    Grantee = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantGranteeArgs\n                    {\n                        Id = \"\u003cproject-id\u003e:\u003cproject-id\u003e\",\n                        Type = \"CanonicalUser\",\n                    },\n                    Permission = \"FULL_CONTROL\",\n                },\n                new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantArgs\n                {\n                    Grantee = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantGranteeArgs\n                    {\n                        Id = \"\u003cproject-id\u003e\",\n                        Type = \"CanonicalUser\",\n                    },\n                    Permission = \"WRITE\",\n                },\n            },\n            Owner = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyOwnerArgs\n            {\n                Id = \"\u003cproject-id\u003e\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainObjectBucket, err := scaleway.NewObjectBucket(ctx, \"mainObjectBucket\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketAcl(ctx, \"mainObjectBucketAcl\", \u0026scaleway.ObjectBucketAclArgs{\n\t\t\tBucket: mainObjectBucket.Name,\n\t\t\tAccessControlPolicy: \u0026ObjectBucketAclAccessControlPolicyArgs{\n\t\t\t\tGrants: ObjectBucketAclAccessControlPolicyGrantArray{\n\t\t\t\t\t\u0026ObjectBucketAclAccessControlPolicyGrantArgs{\n\t\t\t\t\t\tGrantee: \u0026ObjectBucketAclAccessControlPolicyGrantGranteeArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"\u003cproject-id\u003e:\u003cproject-id\u003e\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"CanonicalUser\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPermission: pulumi.String(\"FULL_CONTROL\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ObjectBucketAclAccessControlPolicyGrantArgs{\n\t\t\t\t\t\tGrantee: \u0026ObjectBucketAclAccessControlPolicyGrantGranteeArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"\u003cproject-id\u003e\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"CanonicalUser\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPermission: pulumi.String(\"WRITE\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tOwner: \u0026ObjectBucketAclAccessControlPolicyOwnerArgs{\n\t\t\t\t\tId: pulumi.String(\"\u003cproject-id\u003e\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketAcl;\nimport com.pulumi.scaleway.ObjectBucketAclArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketAclAccessControlPolicyArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketAclAccessControlPolicyOwnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainObjectBucket = new ObjectBucket(\"mainObjectBucket\");\n\n        var mainObjectBucketAcl = new ObjectBucketAcl(\"mainObjectBucketAcl\", ObjectBucketAclArgs.builder()        \n            .bucket(mainObjectBucket.name())\n            .accessControlPolicy(ObjectBucketAclAccessControlPolicyArgs.builder()\n                .grants(                \n                    ObjectBucketAclAccessControlPolicyGrantArgs.builder()\n                        .grantee(ObjectBucketAclAccessControlPolicyGrantGranteeArgs.builder()\n                            .id(\"\u003cproject-id\u003e:\u003cproject-id\u003e\")\n                            .type(\"CanonicalUser\")\n                            .build())\n                        .permission(\"FULL_CONTROL\")\n                        .build(),\n                    ObjectBucketAclAccessControlPolicyGrantArgs.builder()\n                        .grantee(ObjectBucketAclAccessControlPolicyGrantGranteeArgs.builder()\n                            .id(\"\u003cproject-id\u003e\")\n                            .type(\"CanonicalUser\")\n                            .build())\n                        .permission(\"WRITE\")\n                        .build())\n                .owner(ObjectBucketAclAccessControlPolicyOwnerArgs.builder()\n                    .id(\"\u003cproject-id\u003e\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainObjectBucket:\n    type: scaleway:ObjectBucket\n  mainObjectBucketAcl:\n    type: scaleway:ObjectBucketAcl\n    properties:\n      bucket: ${mainObjectBucket.name}\n      accessControlPolicy:\n        grants:\n          - grantee:\n              id: \u003cproject-id\u003e:\u003cproject-id\u003e\n              type: CanonicalUser\n            permission: FULL_CONTROL\n          - grantee:\n              id: \u003cproject-id\u003e\n              type: CanonicalUser\n            permission: WRITE\n        owner:\n          id: \u003cproject-id\u003e\n```\n\n## The ACL\n\nPlease check the [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl)\n\n## The Access Control policy\n\nThe `access_control_policy` configuration block supports the following arguments:\n\n* `grant` - (Required) Set of grant configuration blocks documented below.\n* `owner` - (Required) Configuration block of the bucket owner's display name and ID documented below.\n\n## The Grant\n\nThe `grant` configuration block supports the following arguments:\n\n* `grantee` - (Required) Configuration block for the project being granted permissions documented below.\n* `permission` - (Required) Logging permissions assigned to the grantee for the bucket.\n\n## The permission\n\nThe following list shows each access policy permissions supported.\n\n`READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`\n\nFor more information about ACL permissions in the S3 bucket, see [ACL permissions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html).\n\n## The owner\n\nThe `owner` configuration block supports the following arguments:\n\n* `id` - (Required) The ID of the project owner.\n* `display_name` - (Optional) The display name of the owner.\n\n## the grantee\n\nThe `grantee` configuration block supports the following arguments:\n\n* `id` - (Required) The canonical user ID of the grantee.\n* `type` - (Required) Type of grantee. Valid values: CanonicalUser.\n\n\n## Import\n\nBuckets can be imported using the `{region}/{bucketName}/{acl}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectBucketAcl:ObjectBucketAcl some_bucket fr-par/some-bucket\n```\n\n /private ",
            "properties": {
                "accessControlPolicy": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy",
                    "description": "A configuration block that sets the ACL permissions for an object per grantee documented below.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL you want to apply to the bucket.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "expectedBucketOwner": {
                    "type": "string",
                    "description": "The project ID of the expected bucket owner.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n"
                }
            },
            "required": [
                "accessControlPolicy",
                "bucket",
                "region"
            ],
            "inputProperties": {
                "accessControlPolicy": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy",
                    "description": "A configuration block that sets the ACL permissions for an object per grantee documented below.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL you want to apply to the bucket.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "expectedBucketOwner": {
                    "type": "string",
                    "description": "The project ID of the expected bucket owner.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucket"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketAcl resources.\n",
                "properties": {
                    "accessControlPolicy": {
                        "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy",
                        "description": "A configuration block that sets the ACL permissions for an object per grantee documented below.\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "The canned ACL you want to apply to the bucket.\n"
                    },
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "expectedBucketOwner": {
                        "type": "string",
                        "description": "The project ID of the expected bucket owner.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketLockConfiguration:ObjectBucketLockConfiguration": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket name.\n"
                },
                "rule": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule",
                    "description": "Specifies the Object Lock rule for the specified object.\n"
                }
            },
            "required": [
                "bucket",
                "rule"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket name.\n",
                    "willReplaceOnChanges": true
                },
                "rule": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule",
                    "description": "Specifies the Object Lock rule for the specified object.\n"
                }
            },
            "requiredInputs": [
                "bucket",
                "rule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketLockConfiguration resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The bucket name.\n",
                        "willReplaceOnChanges": true
                    },
                    "rule": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule",
                        "description": "Specifies the Object Lock rule for the specified object.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketPolicy:ObjectBucketPolicy": {
            "description": "Creates and manages Scaleway object storage bucket policy.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/using-bucket-policies/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bucket = new ObjectBucketPolicy(\"bucket\", ObjectBucketPolicyArgs.builder()        \n            .name(\"some-unique-name\")\n            .build());\n\n        var policy = new ObjectBucketPolicy(\"policy\", ObjectBucketPolicyArgs.builder()        \n            .bucket(scaleway_object_bucket.bucket().name())\n            .policy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Id\", \"MyPolicy\"),\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Action\", jsonArray(\n                            \"s3:ListBucket\", \n                            \"s3:GetObject\"\n                        )),\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Principal\", jsonObject(\n                            jsonProperty(\"SCW\", \"*\")\n                        )),\n                        jsonProperty(\"Resource\", jsonArray(\n                            \"some-unique-name\", \n                            \"some-unique-name/*\"\n                        )),\n                        jsonProperty(\"Sid\", \"GrantToEveryone\")\n                    ))),\n                    jsonProperty(\"Version\", \"2012-10-17\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      name: some-unique-name\n  policy:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      bucket: ${scaleway_object_bucket.bucket.name}\n      policy:\n        fn::toJSON:\n          Id: MyPolicy\n          Statement:\n            - Action:\n                - s3:ListBucket\n                - s3:GetObject\n              Effect: Allow\n              Principal:\n                SCW: '*'\n              Resource:\n                - some-unique-name\n                - some-unique-name/*\n              Sid: GrantToEveryone\n          Version: 2012-10-17\n```\n{{% /example %}}\n{{% /examples %}}\n## Example with aws provider\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport com.pulumi.aws.iam.IamFunctions;\nimport com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bucket = new ObjectBucketPolicy(\"bucket\", ObjectBucketPolicyArgs.builder()        \n            .name(\"some-unique-name\")\n            .build());\n\n        final var policy = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()\n            .version(\"2012-10-17\")\n            .statements(GetPolicyDocumentStatementArgs.builder()\n                .sid(\"MyPolicy\")\n                .principals(GetPolicyDocumentStatementPrincipalArgs.builder()\n                    .type(\"SCW\")\n                    .identifiers(\"project_id:\u003cproject_id\u003e\")\n                    .build())\n                .actions(                \n                    \"s3:GetObject\",\n                    \"s3:ListBucket\")\n                .resources(                \n                    \"some-unique-name\",\n                    \"some-unique-name/*\")\n                .build())\n            .build());\n\n        var main = new ObjectBucketPolicy(\"main\", ObjectBucketPolicyArgs.builder()        \n            .bucket(scaleway_object_bucket.bucket().name())\n            .policy(policy.applyValue(getPolicyDocumentResult -\u003e getPolicyDocumentResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      name: some-unique-name\n  main:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      bucket: ${scaleway_object_bucket.bucket.name}\n      policy: ${policy.json}\nvariables:\n  policy:\n    fn::invoke:\n      Function: aws:iam:getPolicyDocument\n      Arguments:\n        version: 2012-10-17\n        statements:\n          - sid: MyPolicy\n            principals:\n              - type: SCW\n                identifiers:\n                  - project_id:\u003cproject_id\u003e\n            actions:\n              - s3:GetObject\n              - s3:ListBucket\n            resources:\n              - some-unique-name\n              - some-unique-name/*\n```\n\n\n## Import\n\nBuckets can be imported using the `{region}/{bucketName}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectBucketPolicy:ObjectBucketPolicy some_bucket fr-par/some-bucket\n```\n\n ",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The text of the policy.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n"
                }
            },
            "required": [
                "bucket",
                "policy",
                "region"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The text of the policy.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucket",
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketPolicy resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The text of the policy.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region this bucket resides in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration": {
            "description": "Provides an Object bucket website configuration resource.\nFor more information, see [Hosting Websites on Object bucket](https://www.scaleway.com/en/docs/storage/object/how-to/use-bucket-website/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainObjectBucket = new scaleway.ObjectBucket(\"mainObjectBucket\", {acl: \"public-read\"});\nconst mainObjectBucketWebsiteConfiguration = new scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", {\n    bucket: mainObjectBucket.name,\n    indexDocument: {\n        suffix: \"index.html\",\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_object_bucket = scaleway.ObjectBucket(\"mainObjectBucket\", acl=\"public-read\")\nmain_object_bucket_website_configuration = scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\",\n    bucket=main_object_bucket.name,\n    index_document=scaleway.ObjectBucketWebsiteConfigurationIndexDocumentArgs(\n        suffix=\"index.html\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainObjectBucket = new Scaleway.ObjectBucket(\"mainObjectBucket\", new()\n    {\n        Acl = \"public-read\",\n    });\n\n    var mainObjectBucketWebsiteConfiguration = new Scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", new()\n    {\n        Bucket = mainObjectBucket.Name,\n        IndexDocument = new Scaleway.Inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs\n        {\n            Suffix = \"index.html\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainObjectBucket, err := scaleway.NewObjectBucket(ctx, \"mainObjectBucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tAcl: pulumi.String(\"public-read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketWebsiteConfiguration(ctx, \"mainObjectBucketWebsiteConfiguration\", \u0026scaleway.ObjectBucketWebsiteConfigurationArgs{\n\t\t\tBucket: mainObjectBucket.Name,\n\t\t\tIndexDocument: \u0026ObjectBucketWebsiteConfigurationIndexDocumentArgs{\n\t\t\t\tSuffix: pulumi.String(\"index.html\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfiguration;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfigurationArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainObjectBucket = new ObjectBucket(\"mainObjectBucket\", ObjectBucketArgs.builder()        \n            .acl(\"public-read\")\n            .build());\n\n        var mainObjectBucketWebsiteConfiguration = new ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", ObjectBucketWebsiteConfigurationArgs.builder()        \n            .bucket(mainObjectBucket.name())\n            .indexDocument(ObjectBucketWebsiteConfigurationIndexDocumentArgs.builder()\n                .suffix(\"index.html\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainObjectBucket:\n    type: scaleway:ObjectBucket\n    properties:\n      acl: public-read\n  mainObjectBucketWebsiteConfiguration:\n    type: scaleway:ObjectBucketWebsiteConfiguration\n    properties:\n      bucket: ${mainObjectBucket.name}\n      indexDocument:\n        suffix: index.html\n```\n{{% /example %}}\n{{% /examples %}}\n## Example with `policy`\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainObjectBucket = new scaleway.ObjectBucket(\"mainObjectBucket\", {acl: \"public-read\"});\nconst mainObjectBucketPolicy = new scaleway.ObjectBucketPolicy(\"mainObjectBucketPolicy\", {\n    bucket: mainObjectBucket.name,\n    policy: JSON.stringify({\n        Version: \"2012-10-17\",\n        Id: \"MyPolicy\",\n        Statement: [{\n            Sid: \"GrantToEveryone\",\n            Effect: \"Allow\",\n            Principal: \"*\",\n            Action: [\"s3:GetObject\"],\n            Resource: [\"\u003cbucket-name\u003e/*\"],\n        }],\n    }),\n});\nconst mainObjectBucketWebsiteConfiguration = new scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", {\n    bucket: mainObjectBucket.name,\n    indexDocument: {\n        suffix: \"index.html\",\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_object_bucket = scaleway.ObjectBucket(\"mainObjectBucket\", acl=\"public-read\")\nmain_object_bucket_policy = scaleway.ObjectBucketPolicy(\"mainObjectBucketPolicy\",\n    bucket=main_object_bucket.name,\n    policy=json.dumps({\n        \"Version\": \"2012-10-17\",\n        \"Id\": \"MyPolicy\",\n        \"Statement\": [{\n            \"Sid\": \"GrantToEveryone\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\"s3:GetObject\"],\n            \"Resource\": [\"\u003cbucket-name\u003e/*\"],\n        }],\n    }))\nmain_object_bucket_website_configuration = scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\",\n    bucket=main_object_bucket.name,\n    index_document=scaleway.ObjectBucketWebsiteConfigurationIndexDocumentArgs(\n        suffix=\"index.html\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainObjectBucket = new Scaleway.ObjectBucket(\"mainObjectBucket\", new()\n    {\n        Acl = \"public-read\",\n    });\n\n    var mainObjectBucketPolicy = new Scaleway.ObjectBucketPolicy(\"mainObjectBucketPolicy\", new()\n    {\n        Bucket = mainObjectBucket.Name,\n        Policy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2012-10-17\",\n            [\"Id\"] = \"MyPolicy\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Sid\"] = \"GrantToEveryone\",\n                    [\"Effect\"] = \"Allow\",\n                    [\"Principal\"] = \"*\",\n                    [\"Action\"] = new[]\n                    {\n                        \"s3:GetObject\",\n                    },\n                    [\"Resource\"] = new[]\n                    {\n                        \"\u003cbucket-name\u003e/*\",\n                    },\n                },\n            },\n        }),\n    });\n\n    var mainObjectBucketWebsiteConfiguration = new Scaleway.ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", new()\n    {\n        Bucket = mainObjectBucket.Name,\n        IndexDocument = new Scaleway.Inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs\n        {\n            Suffix = \"index.html\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainObjectBucket, err := scaleway.NewObjectBucket(ctx, \"mainObjectBucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tAcl: pulumi.String(\"public-read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Id\":      \"MyPolicy\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Sid\":       \"GrantToEveryone\",\n\t\t\t\t\t\"Effect\":    \"Allow\",\n\t\t\t\t\t\"Principal\": \"*\",\n\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\"s3:GetObject\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Resource\": []string{\n\t\t\t\t\t\t\"\u003cbucket-name\u003e/*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = scaleway.NewObjectBucketPolicy(ctx, \"mainObjectBucketPolicy\", \u0026scaleway.ObjectBucketPolicyArgs{\n\t\t\tBucket: mainObjectBucket.Name,\n\t\t\tPolicy: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketWebsiteConfiguration(ctx, \"mainObjectBucketWebsiteConfiguration\", \u0026scaleway.ObjectBucketWebsiteConfigurationArgs{\n\t\t\tBucket: mainObjectBucket.Name,\n\t\t\tIndexDocument: \u0026ObjectBucketWebsiteConfigurationIndexDocumentArgs{\n\t\t\t\tSuffix: pulumi.String(\"index.html\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfiguration;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfigurationArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainObjectBucket = new ObjectBucket(\"mainObjectBucket\", ObjectBucketArgs.builder()        \n            .acl(\"public-read\")\n            .build());\n\n        var mainObjectBucketPolicy = new ObjectBucketPolicy(\"mainObjectBucketPolicy\", ObjectBucketPolicyArgs.builder()        \n            .bucket(mainObjectBucket.name())\n            .policy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Version\", \"2012-10-17\"),\n                    jsonProperty(\"Id\", \"MyPolicy\"),\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Sid\", \"GrantToEveryone\"),\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Principal\", \"*\"),\n                        jsonProperty(\"Action\", jsonArray(\"s3:GetObject\")),\n                        jsonProperty(\"Resource\", jsonArray(\"\u003cbucket-name\u003e/*\"))\n                    )))\n                )))\n            .build());\n\n        var mainObjectBucketWebsiteConfiguration = new ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", ObjectBucketWebsiteConfigurationArgs.builder()        \n            .bucket(mainObjectBucket.name())\n            .indexDocument(ObjectBucketWebsiteConfigurationIndexDocumentArgs.builder()\n                .suffix(\"index.html\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainObjectBucket:\n    type: scaleway:ObjectBucket\n    properties:\n      acl: public-read\n  mainObjectBucketPolicy:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      bucket: ${mainObjectBucket.name}\n      policy:\n        fn::toJSON:\n          Version: 2012-10-17\n          Id: MyPolicy\n          Statement:\n            - Sid: GrantToEveryone\n              Effect: Allow\n              Principal: '*'\n              Action:\n                - s3:GetObject\n              Resource:\n                - \u003cbucket-name\u003e/*\n  mainObjectBucketWebsiteConfiguration:\n    type: scaleway:ObjectBucketWebsiteConfiguration\n    properties:\n      bucket: ${mainObjectBucket.name}\n      indexDocument:\n        suffix: index.html\n```\n\n## index_document\n\nThe `index_document` configuration block supports the following arguments:\n\n* `suffix` - (Required) A suffix that is appended to a request that is for a directory on the website endpoint.\n\n\u003e **Important:** The suffix must not be empty and must not include a slash character. The routing is not supported.\n\nIn addition to all above arguments, the following attribute is exported:\n\n* `id` - The bucket and region separated by a slash (/)\n* `website_domain` - The domain of the website endpoint. This is used to create DNS alias [records](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/).\n* `website_endpoint` - The website endpoint.\n\n\u003e **Important:** Please check our concepts section to know more about the [endpoint](https://www.scaleway.com/en/docs/storage/object/concepts/#endpoint).\n\n## error_document\n\nThe error_document configuration block supports the following arguments:\n\n* `key` - (Required) The object key name to use when a 4XX class error occurs.\n\n\n## Import\n\nWebsite configuration Bucket can be imported using the `{region}/{bucketName}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration some_bucket fr-par/some-bucket\n```\n\n ",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "(Required, Forces new resource) The name of the bucket.\n"
                },
                "errorDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument",
                    "description": "(Optional) The name of the error document for the website detailed below.\n"
                },
                "indexDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument",
                    "description": "(Required) The name of the index document for the website detailed below.\n"
                },
                "websiteDomain": {
                    "type": "string",
                    "description": "The website endpoint.\n"
                },
                "websiteEndpoint": {
                    "type": "string",
                    "description": "The domain of the website endpoint.\n"
                }
            },
            "required": [
                "bucket",
                "indexDocument",
                "websiteDomain",
                "websiteEndpoint"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "(Required, Forces new resource) The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "errorDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument",
                    "description": "(Optional) The name of the error document for the website detailed below.\n"
                },
                "indexDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument",
                    "description": "(Required) The name of the index document for the website detailed below.\n"
                }
            },
            "requiredInputs": [
                "bucket",
                "indexDocument"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketWebsiteConfiguration resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "(Required, Forces new resource) The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "errorDocument": {
                        "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument",
                        "description": "(Optional) The name of the error document for the website detailed below.\n"
                    },
                    "indexDocument": {
                        "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument",
                        "description": "(Required) The name of the index document for the website detailed below.\n"
                    },
                    "websiteDomain": {
                        "type": "string",
                        "description": "The website endpoint.\n"
                    },
                    "websiteEndpoint": {
                        "type": "string",
                        "description": "The domain of the website endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectItem:ObjectItem": {
            "description": "Creates and manages Scaleway object storage objects.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/object-storage-feature/).\n\n\n## Import\n\nObjects can be imported using the `{region}/{bucketName}/{objectKey}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectItem:ObjectItem some_object fr-par/some-bucket/some-file\n```\n\n ",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The name of the file to upload, defaults to an empty file\n"
                },
                "hash": {
                    "type": "string",
                    "description": "Hash of the file, used to trigger upload on file change\n"
                },
                "key": {
                    "type": "string",
                    "description": "The path of the object.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of metadata used for the object, keys must be lowercase\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA` used to store the object.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of tags\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of the object, `public-read` or `private`\n"
                }
            },
            "required": [
                "bucket",
                "key",
                "region",
                "visibility"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The name of the file to upload, defaults to an empty file\n"
                },
                "hash": {
                    "type": "string",
                    "description": "Hash of the file, used to trigger upload on file change\n"
                },
                "key": {
                    "type": "string",
                    "description": "The path of the object.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of metadata used for the object, keys must be lowercase\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n",
                    "willReplaceOnChanges": true
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA` used to store the object.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of tags\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of the object, `public-read` or `private`\n"
                }
            },
            "requiredInputs": [
                "bucket",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectItem resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket.\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "The name of the file to upload, defaults to an empty file\n"
                    },
                    "hash": {
                        "type": "string",
                        "description": "Hash of the file, used to trigger upload on file change\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The path of the object.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of metadata used for the object, keys must be lowercase\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region this bucket resides in.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageClass": {
                        "type": "string",
                        "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA` used to store the object.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map of tags\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Visibility of the object, `public-read` or `private`\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/redisCluster:RedisCluster": {
            "description": "Creates and manages Scaleway Redis Clusters.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/redis/api/v1alpha1/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.RedisCluster(\"main\", {\n    acls: [{\n        description: \"Allow all\",\n        ip: \"0.0.0.0/0\",\n    }],\n    clusterSize: 1,\n    nodeType: \"RED1-MICRO\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    tags: [\n        \"test\",\n        \"redis\",\n    ],\n    tlsEnabled: true,\n    userName: \"my_initial_user\",\n    version: \"6.2.6\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.RedisCluster(\"main\",\n    acls=[scaleway.RedisClusterAclArgs(\n        description=\"Allow all\",\n        ip=\"0.0.0.0/0\",\n    )],\n    cluster_size=1,\n    node_type=\"RED1-MICRO\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    tags=[\n        \"test\",\n        \"redis\",\n    ],\n    tls_enabled=True,\n    user_name=\"my_initial_user\",\n    version=\"6.2.6\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RedisCluster(\"main\", new()\n    {\n        Acls = new[]\n        {\n            new Scaleway.Inputs.RedisClusterAclArgs\n            {\n                Description = \"Allow all\",\n                Ip = \"0.0.0.0/0\",\n            },\n        },\n        ClusterSize = 1,\n        NodeType = \"RED1-MICRO\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Tags = new[]\n        {\n            \"test\",\n            \"redis\",\n        },\n        TlsEnabled = true,\n        UserName = \"my_initial_user\",\n        Version = \"6.2.6\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRedisCluster(ctx, \"main\", \u0026scaleway.RedisClusterArgs{\n\t\t\tAcls: RedisClusterAclArray{\n\t\t\t\t\u0026RedisClusterAclArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Allow all\"),\n\t\t\t\t\tIp:          pulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tClusterSize: pulumi.Int(1),\n\t\t\tNodeType:    pulumi.String(\"RED1-MICRO\"),\n\t\t\tPassword:    pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\tpulumi.String(\"redis\"),\n\t\t\t},\n\t\t\tTlsEnabled: pulumi.Bool(true),\n\t\t\tUserName:   pulumi.String(\"my_initial_user\"),\n\t\t\tVersion:    pulumi.String(\"6.2.6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport com.pulumi.scaleway.inputs.RedisClusterAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RedisCluster(\"main\", RedisClusterArgs.builder()        \n            .acls(RedisClusterAclArgs.builder()\n                .description(\"Allow all\")\n                .ip(\"0.0.0.0/0\")\n                .build())\n            .clusterSize(1)\n            .nodeType(\"RED1-MICRO\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .tags(            \n                \"test\",\n                \"redis\")\n            .tlsEnabled(\"true\")\n            .userName(\"my_initial_user\")\n            .version(\"6.2.6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RedisCluster\n    properties:\n      acls:\n        - description: Allow all\n          ip: 0.0.0.0/0\n      clusterSize: 1\n      nodeType: RED1-MICRO\n      password: thiZ_is_v\u0026ry_s3cret\n      tags:\n        - test\n        - redis\n      tlsEnabled: 'true'\n      userName: my_initial_user\n      version: 6.2.6\n```\n\n### With settings\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.RedisCluster(\"main\", {\n    nodeType: \"RED1-MICRO\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    settings: {\n        maxclients: \"1000\",\n        \"tcp-keepalive\": \"120\",\n    },\n    userName: \"my_initial_user\",\n    version: \"6.2.6\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.RedisCluster(\"main\",\n    node_type=\"RED1-MICRO\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    settings={\n        \"maxclients\": \"1000\",\n        \"tcp-keepalive\": \"120\",\n    },\n    user_name=\"my_initial_user\",\n    version=\"6.2.6\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RedisCluster(\"main\", new()\n    {\n        NodeType = \"RED1-MICRO\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Settings = \n        {\n            { \"maxclients\", \"1000\" },\n            { \"tcp-keepalive\", \"120\" },\n        },\n        UserName = \"my_initial_user\",\n        Version = \"6.2.6\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRedisCluster(ctx, \"main\", \u0026scaleway.RedisClusterArgs{\n\t\t\tNodeType: pulumi.String(\"RED1-MICRO\"),\n\t\t\tPassword: pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tSettings: pulumi.StringMap{\n\t\t\t\t\"maxclients\":    pulumi.String(\"1000\"),\n\t\t\t\t\"tcp-keepalive\": pulumi.String(\"120\"),\n\t\t\t},\n\t\t\tUserName: pulumi.String(\"my_initial_user\"),\n\t\t\tVersion:  pulumi.String(\"6.2.6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RedisCluster(\"main\", RedisClusterArgs.builder()        \n            .nodeType(\"RED1-MICRO\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .settings(Map.ofEntries(\n                Map.entry(\"maxclients\", \"1000\"),\n                Map.entry(\"tcp-keepalive\", \"120\")\n            ))\n            .userName(\"my_initial_user\")\n            .version(\"6.2.6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RedisCluster\n    properties:\n      nodeType: RED1-MICRO\n      password: thiZ_is_v\u0026ry_s3cret\n      settings:\n        maxclients: '1000'\n        tcp-keepalive: '120'\n      userName: my_initial_user\n      version: 6.2.6\n```\n\n### With a private network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst main = new scaleway.RedisCluster(\"main\", {\n    version: \"6.2.6\",\n    nodeType: \"RED1-MICRO\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    clusterSize: 1,\n    privateNetworks: [{\n        id: pn.id,\n        serviceIps: [\"10.12.1.1/20\"],\n    }],\n}, {\n    dependsOn: [pn],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\")\nmain = scaleway.RedisCluster(\"main\",\n    version=\"6.2.6\",\n    node_type=\"RED1-MICRO\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    cluster_size=1,\n    private_networks=[scaleway.RedisClusterPrivateNetworkArgs(\n        id=pn.id,\n        service_ips=[\"10.12.1.1/20\"],\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[pn]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var main = new Scaleway.RedisCluster(\"main\", new()\n    {\n        Version = \"6.2.6\",\n        NodeType = \"RED1-MICRO\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        ClusterSize = 1,\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.RedisClusterPrivateNetworkArgs\n            {\n                Id = pn.Id,\n                ServiceIps = new[]\n                {\n                    \"10.12.1.1/20\",\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            pn,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewRedisCluster(ctx, \"main\", \u0026scaleway.RedisClusterArgs{\n\t\t\tVersion:     pulumi.String(\"6.2.6\"),\n\t\t\tNodeType:    pulumi.String(\"RED1-MICRO\"),\n\t\t\tUserName:    pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:    pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tClusterSize: pulumi.Int(1),\n\t\t\tPrivateNetworks: RedisClusterPrivateNetworkArray{\n\t\t\t\t\u0026RedisClusterPrivateNetworkArgs{\n\t\t\t\t\tId: pn.ID(),\n\t\t\t\t\tServiceIps: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.12.1.1/20\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpn,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport com.pulumi.scaleway.inputs.RedisClusterPrivateNetworkArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var main = new RedisCluster(\"main\", RedisClusterArgs.builder()        \n            .version(\"6.2.6\")\n            .nodeType(\"RED1-MICRO\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .clusterSize(1)\n            .privateNetworks(RedisClusterPrivateNetworkArgs.builder()\n                .id(pn.id())\n                .serviceIps(\"10.12.1.1/20\")\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(pn)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  main:\n    type: scaleway:RedisCluster\n    properties:\n      version: 6.2.6\n      nodeType: RED1-MICRO\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      clusterSize: 1\n      privateNetworks:\n        - id: ${pn.id}\n          serviceIps:\n            - 10.12.1.1/20\n    options:\n      dependson:\n        - ${pn}\n```\n\n\n## Import\n\nRedis Cluster can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/redisCluster:RedisCluster redis01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterAcl:RedisClusterAcl"
                    },
                    "description": "List of acl rules, this is cluster's authorized IPs.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The PEM of the certificate used by redis, only when `tls_enabled` is true\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of nodes in the Redis Cluster.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of creation of the Redis Cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis Cluster.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of Redis Cluster you want to create (e.g. `RED1-M`).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the Redis Cluster.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork"
                    },
                    "description": "Describes the private network you want to connect to your cluster. If not set, a public network will be provided.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Redis Cluster is associated with.\n"
                },
                "publicNetwork": {
                    "$ref": "#/types/scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork",
                    "description": "Public network specs details\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of settings for redis cluster. Available settings can be found by listing redis versions with scaleway API or CLI\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Redis Cluster.\n"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "Whether TLS is enabled or not.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Redis Cluster.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the Redis Cluster.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Redis's Cluster version (e.g. `6.2.6`).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Redis Cluster should be created.\n"
                }
            },
            "required": [
                "certificate",
                "clusterSize",
                "createdAt",
                "name",
                "nodeType",
                "password",
                "projectId",
                "publicNetwork",
                "updatedAt",
                "userName",
                "version",
                "zone"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterAcl:RedisClusterAcl"
                    },
                    "description": "List of acl rules, this is cluster's authorized IPs.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of nodes in the Redis Cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis Cluster.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of Redis Cluster you want to create (e.g. `RED1-M`).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the Redis Cluster.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork"
                    },
                    "description": "Describes the private network you want to connect to your cluster. If not set, a public network will be provided.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Redis Cluster is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicNetwork": {
                    "$ref": "#/types/scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork",
                    "description": "Public network specs details\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of settings for redis cluster. Available settings can be found by listing redis versions with scaleway API or CLI\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Redis Cluster.\n"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "Whether TLS is enabled or not.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the Redis Cluster.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Redis's Cluster version (e.g. `6.2.6`).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Redis Cluster should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "nodeType",
                "password",
                "userName",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RedisCluster resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/RedisClusterAcl:RedisClusterAcl"
                        },
                        "description": "List of acl rules, this is cluster's authorized IPs.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The PEM of the certificate used by redis, only when `tls_enabled` is true\n"
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of nodes in the Redis Cluster.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of creation of the Redis Cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Redis Cluster.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of Redis Cluster you want to create (e.g. `RED1-M`).\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the Redis Cluster.\n",
                        "secret": true
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork"
                        },
                        "description": "Describes the private network you want to connect to your cluster. If not set, a public network will be provided.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Redis Cluster is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicNetwork": {
                        "$ref": "#/types/scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork",
                        "description": "Public network specs details\n"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of settings for redis cluster. Available settings can be found by listing redis versions with scaleway API or CLI\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Redis Cluster.\n"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "Whether TLS is enabled or not.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Redis Cluster.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the Redis Cluster.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Redis's Cluster version (e.g. `6.2.6`).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the Redis Cluster should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/registryNamespace:RegistryNamespace": {
            "description": "Creates and manages Scaleway Container Registry.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/registry/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.RegistryNamespace(\"main\", {\n    description: \"Main container registry\",\n    isPublic: false,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.RegistryNamespace(\"main\",\n    description=\"Main container registry\",\n    is_public=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RegistryNamespace(\"main\", new()\n    {\n        Description = \"Main container registry\",\n        IsPublic = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRegistryNamespace(ctx, \"main\", \u0026scaleway.RegistryNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Main container registry\"),\n\t\t\tIsPublic:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RegistryNamespace;\nimport com.pulumi.scaleway.RegistryNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RegistryNamespace(\"main\", RegistryNamespaceArgs.builder()        \n            .description(\"Main container registry\")\n            .isPublic(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RegistryNamespace\n    properties:\n      description: Main container registry\n      isPublic: false\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/registryNamespace:RegistryNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint reachable by Docker.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the namespace is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "organizationId",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RegistryNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Endpoint reachable by Docker.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/temDomain:TemDomain": {
            "description": "Creates and manages Scaleway Transactional Email Domains.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/registry/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.TemDomain(\"main\", {});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.TemDomain(\"main\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.TemDomain(\"main\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewTemDomain(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.TemDomain;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new TemDomain(\"main\");\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:TemDomain\n```\n\n\n## Import\n\nDomains can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/temDomain:TemDomain main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the Transaction Email Domain's creation (RFC 3339 format).\n"
                },
                "dkimConfig": {
                    "type": "string",
                    "description": "The DKIM public key, as should be recorded in the DNS zone.\n"
                },
                "lastError": {
                    "type": "string",
                    "description": "The error message if the last check failed.\n"
                },
                "lastValidAt": {
                    "type": "string",
                    "description": "The date and time the domain was last found to be valid (RFC 3339 format).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The domain name, must not be used in another Transactional Email Domain.\n\u003e **Important** Updates to `name` will recreate the domain.\n"
                },
                "nextCheckAt": {
                    "type": "string",
                    "description": "The date and time of the next scheduled check (RFC 3339 format).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the domain should be created.\n"
                },
                "revokedAt": {
                    "type": "string",
                    "description": "The date and time of the revocation of the domain (RFC 3339 format).\n"
                },
                "spfConfig": {
                    "type": "string",
                    "description": "The snippet of the SPF record that should be registered in the DNS zone.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Transaction Email Domain.\n"
                }
            },
            "required": [
                "createdAt",
                "dkimConfig",
                "lastError",
                "lastValidAt",
                "name",
                "nextCheckAt",
                "projectId",
                "region",
                "revokedAt",
                "spfConfig",
                "status"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The domain name, must not be used in another Transactional Email Domain.\n\u003e **Important** Updates to `name` will recreate the domain.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the domain should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TemDomain resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the Transaction Email Domain's creation (RFC 3339 format).\n"
                    },
                    "dkimConfig": {
                        "type": "string",
                        "description": "The DKIM public key, as should be recorded in the DNS zone.\n"
                    },
                    "lastError": {
                        "type": "string",
                        "description": "The error message if the last check failed.\n"
                    },
                    "lastValidAt": {
                        "type": "string",
                        "description": "The date and time the domain was last found to be valid (RFC 3339 format).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The domain name, must not be used in another Transactional Email Domain.\n\u003e **Important** Updates to `name` will recreate the domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextCheckAt": {
                        "type": "string",
                        "description": "The date and time of the next scheduled check (RFC 3339 format).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the domain is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the domain should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "revokedAt": {
                        "type": "string",
                        "description": "The date and time of the revocation of the domain (RFC 3339 format).\n"
                    },
                    "spfConfig": {
                        "type": "string",
                        "description": "The snippet of the SPF record that should be registered in the DNS zone.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Transaction Email Domain.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork": {
            "description": "Creates and manages Scaleway VPC Public Gateway Network.\nIt allows attaching Private Networks to the VPC Public Gateway and your DHCP config\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#step-3-attach-private-networks-to-the-vpc-public-gateway).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst gw01 = new scaleway.VpcPublicGatewayIp(\"gw01\", {});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {\n    subnet: \"192.168.1.0/24\",\n    pushDefaultRoute: true,\n});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {\n    type: \"VPC-GW-S\",\n    ipId: gw01.id,\n});\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\ngw01 = scaleway.VpcPublicGatewayIp(\"gw01\")\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\",\n    subnet=\"192.168.1.0/24\",\n    push_default_route=True)\npg01 = scaleway.VpcPublicGateway(\"pg01\",\n    type=\"VPC-GW-S\",\n    ip_id=gw01.id)\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\");\n\n    var gw01 = new Scaleway.VpcPublicGatewayIp(\"gw01\");\n\n    var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n        PushDefaultRoute = true,\n    });\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Type = \"VPC-GW-S\",\n        IpId = gw01.Id,\n    });\n\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        DhcpId = dhcp01.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgw01, err := scaleway.NewVpcPublicGatewayIp(ctx, \"gw01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet:           pulumi.String(\"192.168.1.0/24\"),\n\t\t\tPushDefaultRoute: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: gw01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\");\n\n        var gw01 = new VpcPublicGatewayIp(\"gw01\");\n\n        var dhcp01 = new VpcPublicGatewayDhcp(\"dhcp01\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .pushDefaultRoute(true)\n            .build());\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .ipId(gw01.id())\n            .build());\n\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .dhcpId(dhcp01.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n  gw01:\n    type: scaleway:VpcPublicGatewayIp\n  dhcp01:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n      pushDefaultRoute: true\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n      ipId: ${gw01.id}\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      dhcpId: ${dhcp01.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n```\n\n\n## Import\n\nGateway network can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "cleanupDhcp": {
                    "type": "boolean",
                    "description": "Remove DHCP config on this network on destroy. It requires DHCP id.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the gateway network.\n"
                },
                "dhcpId": {
                    "type": "string",
                    "description": "The ID of the public gateway DHCP config.\n"
                },
                "enableDhcp": {
                    "type": "boolean",
                    "description": "Enable DHCP config on this network. It requires DHCP id.\n"
                },
                "enableMasquerade": {
                    "type": "boolean",
                    "description": "Enable masquerade on this network\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The mac address of the creation of the gateway network.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network.\n"
                },
                "staticAddress": {
                    "type": "string",
                    "description": "Enable DHCP config on this network\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the gateway network.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the gateway network should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayId",
                "macAddress",
                "privateNetworkId",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "cleanupDhcp": {
                    "type": "boolean",
                    "description": "Remove DHCP config on this network on destroy. It requires DHCP id.\n"
                },
                "dhcpId": {
                    "type": "string",
                    "description": "The ID of the public gateway DHCP config.\n"
                },
                "enableDhcp": {
                    "type": "boolean",
                    "description": "Enable DHCP config on this network. It requires DHCP id.\n"
                },
                "enableMasquerade": {
                    "type": "boolean",
                    "description": "Enable masquerade on this network\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network.\n"
                },
                "staticAddress": {
                    "type": "string",
                    "description": "Enable DHCP config on this network\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the gateway network should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayId",
                "privateNetworkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcGatewayNetwork resources.\n",
                "properties": {
                    "cleanupDhcp": {
                        "type": "boolean",
                        "description": "Remove DHCP config on this network on destroy. It requires DHCP id.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the gateway network.\n"
                    },
                    "dhcpId": {
                        "type": "string",
                        "description": "The ID of the public gateway DHCP config.\n"
                    },
                    "enableDhcp": {
                        "type": "boolean",
                        "description": "Enable DHCP config on this network. It requires DHCP id.\n"
                    },
                    "enableMasquerade": {
                        "type": "boolean",
                        "description": "Enable masquerade on this network\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the public gateway.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The mac address of the creation of the gateway network.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network.\n"
                    },
                    "staticAddress": {
                        "type": "string",
                        "description": "Enable DHCP config on this network\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the gateway network.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the gateway network should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork": {
            "description": "Creates and manages Scaleway VPC Private Networks.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc/api/#private-networks-ac2df4).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst pnPriv = new scaleway.VpcPrivateNetwork(\"pn_priv\", {\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\npn_priv = scaleway.VpcPrivateNetwork(\"pnPriv\", tags=[\n    \"demo\",\n    \"terraform\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pnPriv = new Scaleway.VpcPrivateNetwork(\"pnPriv\", new()\n    {\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPrivateNetwork(ctx, \"pnPriv\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pnPriv = new VpcPrivateNetwork(\"pnPriv\", VpcPrivateNetworkArgs.builder()        \n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pnPriv:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      tags:\n        - demo\n        - terraform\n```\n\n\n## Import\n\nPrivate networks can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork vpc_demo fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the private network\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the private network. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the private network is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the private network is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private network.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the private network\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the private network should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "projectId",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the private network. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the private network is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private network.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the private network should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPrivateNetwork resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the private network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the private network. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the private network is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the private network is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the private network.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the private network\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the private network should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGateway:VpcPublicGateway": {
            "description": "Creates and manages Scaleway VPC Public Gateway.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGateway(\"main\", {\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n    type: \"VPC-GW-S\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGateway(\"main\",\n    tags=[\n        \"demo\",\n        \"terraform\",\n    ],\n    type=\"VPC-GW-S\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGateway(\"main\", new()\n    {\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n        Type = \"VPC-GW-S\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGateway(\"main\", VpcPublicGatewayArgs.builder()        \n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .type(\"VPC-GW-S\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGateway\n    properties:\n      tags:\n        - demo\n        - terraform\n      type: VPC-GW-S\n```\n\n\n## Import\n\nPublic gateway can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGateway:VpcPublicGateway main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "bastionEnabled": {
                    "type": "boolean",
                    "description": "Enable SSH bastion on the gateway\n"
                },
                "bastionPort": {
                    "type": "integer",
                    "description": "The port on which the SSH bastion will listen.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway.\n"
                },
                "enableSmtp": {
                    "type": "boolean",
                    "description": "Enable SMTP on the gateway\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "attach an existing flexible IP to the gateway\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the public gateway. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the public gateway is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The gateway type.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway.\n"
                },
                "upstreamDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway should be created.\n"
                }
            },
            "required": [
                "bastionPort",
                "createdAt",
                "enableSmtp",
                "ipId",
                "name",
                "organizationId",
                "projectId",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "bastionEnabled": {
                    "type": "boolean",
                    "description": "Enable SSH bastion on the gateway\n"
                },
                "bastionPort": {
                    "type": "integer",
                    "description": "The port on which the SSH bastion will listen.\n"
                },
                "enableSmtp": {
                    "type": "boolean",
                    "description": "Enable SMTP on the gateway\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "attach an existing flexible IP to the gateway\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the public gateway. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The gateway type.\n"
                },
                "upstreamDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGateway resources.\n",
                "properties": {
                    "bastionEnabled": {
                        "type": "boolean",
                        "description": "Enable SSH bastion on the gateway\n"
                    },
                    "bastionPort": {
                        "type": "integer",
                        "description": "The port on which the SSH bastion will listen.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway.\n"
                    },
                    "enableSmtp": {
                        "type": "boolean",
                        "description": "Enable SMTP on the gateway\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "attach an existing flexible IP to the gateway\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the public gateway. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the public gateway is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the public gateway.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The gateway type.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway.\n"
                    },
                    "upstreamDnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp": {
            "description": "Creates and manages Scaleway VPC Public Gateway DHCP.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-c05544).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayDhcp(\"main\", {\n    subnet: \"192.168.1.0/24\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.1.0/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayDhcp(\"main\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayDhcp(\"main\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n```\n\n\n## Import\n\nPublic gateway DHCP config can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address of the public gateway DHCP config.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway DHCP config.\n"
                },
                "dnsLocalName": {
                    "type": "string",
                    "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to `priv`.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional DNS search paths\n"
                },
                "dnsServersOverrides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself\n"
                },
                "enableDynamic": {
                    "type": "boolean",
                    "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to `true`.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the public gateway DHCP config is associated with.\n"
                },
                "poolHigh": {
                    "type": "string",
                    "description": "High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                },
                "poolLow": {
                    "type": "string",
                    "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway DHCP config is associated with.\n"
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to `true`.\n"
                },
                "pushDnsServer": {
                    "type": "boolean",
                    "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname \u003e IP resolution. Defaults to `true`.\n"
                },
                "rebindTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than `valid_lifetime`. Defaults to 51m (3060s).\n"
                },
                "renewTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a renewal will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to associate with the public gateway DHCP config.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway DHCP config.\n"
                },
                "validLifetime": {
                    "type": "integer",
                    "description": "For how long, in seconds, will DHCP entries will be valid. Defaults to 1h (3600s).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "dnsLocalName",
                "dnsSearches",
                "dnsServersOverrides",
                "enableDynamic",
                "organizationId",
                "poolHigh",
                "poolLow",
                "projectId",
                "pushDefaultRoute",
                "pushDnsServer",
                "rebindTimer",
                "renewTimer",
                "subnet",
                "updatedAt",
                "validLifetime",
                "zone"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IP address of the public gateway DHCP config.\n"
                },
                "dnsLocalName": {
                    "type": "string",
                    "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to `priv`.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional DNS search paths\n"
                },
                "dnsServersOverrides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself\n"
                },
                "enableDynamic": {
                    "type": "boolean",
                    "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to `true`.\n"
                },
                "poolHigh": {
                    "type": "string",
                    "description": "High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                },
                "poolLow": {
                    "type": "string",
                    "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway DHCP config is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to `true`.\n"
                },
                "pushDnsServer": {
                    "type": "boolean",
                    "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname \u003e IP resolution. Defaults to `true`.\n"
                },
                "rebindTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than `valid_lifetime`. Defaults to 51m (3060s).\n"
                },
                "renewTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a renewal will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to associate with the public gateway DHCP config.\n"
                },
                "validLifetime": {
                    "type": "integer",
                    "description": "For how long, in seconds, will DHCP entries will be valid. Defaults to 1h (3600s).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayDhcp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address of the public gateway DHCP config.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway DHCP config.\n"
                    },
                    "dnsLocalName": {
                        "type": "string",
                        "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to `priv`.\n"
                    },
                    "dnsSearches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional DNS search paths\n"
                    },
                    "dnsServersOverrides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself\n"
                    },
                    "enableDynamic": {
                        "type": "boolean",
                        "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to `true`.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the public gateway DHCP config is associated with.\n"
                    },
                    "poolHigh": {
                        "type": "string",
                        "description": "High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                    },
                    "poolLow": {
                        "type": "string",
                        "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway DHCP config is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "pushDefaultRoute": {
                        "type": "boolean",
                        "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to `true`.\n"
                    },
                    "pushDnsServer": {
                        "type": "boolean",
                        "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname \u003e IP resolution. Defaults to `true`.\n"
                    },
                    "rebindTimer": {
                        "type": "integer",
                        "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than `valid_lifetime`. Defaults to 51m (3060s).\n"
                    },
                    "renewTimer": {
                        "type": "integer",
                        "description": "After how long, in seconds, a renewal will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The subnet to associate with the public gateway DHCP config.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway DHCP config.\n"
                    },
                    "validLifetime": {
                        "type": "integer",
                        "description": "For how long, in seconds, will DHCP entries will be valid. Defaults to 1h (3600s).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayDhcpReservation:VpcPublicGatewayDhcpReservation": {
            "description": "Creates and manages the [Scaleway DHCP Reservations](https://www.scaleway.com/en/docs/network/vpc/concepts/#dhcp).\n\nThe static associations are used to assign IP addresses based on the MAC addresses of the Instance.\n\nStatically assigned IP addresses should fall within the configured subnet, but be outside of the dynamic range.\n\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-c05544) and [configuration guide](https://www.scaleway.com/en/docs/network/vpc/how-to/configure-a-public-gateway/#how-to-review-and-configure-dhcp).\n\n[DHCP reservations](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-entries-e40fb6) hold both dynamic DHCP leases (IP addresses dynamically assigned by the gateway to instances) and static user-created DHCP reservations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst mainVpcPrivateNetwork = new scaleway.VpcPrivateNetwork(\"mainVpcPrivateNetwork\", {});\nconst mainInstanceServer = new scaleway.InstanceServer(\"mainInstanceServer\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    zone: \"fr-par-1\",\n    privateNetworks: [{\n        pnId: mainVpcPrivateNetwork.id,\n    }],\n});\nconst mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\", {});\nconst mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", {subnet: \"192.168.1.0/24\"});\nconst mainVpcPublicGateway = new scaleway.VpcPublicGateway(\"mainVpcPublicGateway\", {\n    type: \"VPC-GW-S\",\n    ipId: mainVpcPublicGatewayIp.id,\n});\nconst mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateNetworkId: mainVpcPrivateNetwork.id,\n    dhcpId: mainVpcPublicGatewayDhcp.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n}, {\n    dependsOn: [\n        mainVpcPublicGatewayIp,\n        mainVpcPrivateNetwork,\n    ],\n});\nconst mainVpcPublicGatewayDhcpReservation = new scaleway.VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\", {\n    gatewayNetworkId: mainVpcGatewayNetwork.id,\n    macAddress: mainInstanceServer.privateNetworks.apply(privateNetworks =\u003e privateNetworks?[0]?.macAddress),\n    ipAddress: \"192.168.1.1\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain_vpc_private_network = scaleway.VpcPrivateNetwork(\"mainVpcPrivateNetwork\")\nmain_instance_server = scaleway.InstanceServer(\"mainInstanceServer\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    zone=\"fr-par-1\",\n    private_networks=[scaleway.InstanceServerPrivateNetworkArgs(\n        pn_id=main_vpc_private_network.id,\n    )])\nmain_vpc_public_gateway_ip = scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\")\nmain_vpc_public_gateway_dhcp = scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", subnet=\"192.168.1.0/24\")\nmain_vpc_public_gateway = scaleway.VpcPublicGateway(\"mainVpcPublicGateway\",\n    type=\"VPC-GW-S\",\n    ip_id=main_vpc_public_gateway_ip.id)\nmain_vpc_gateway_network = scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_network_id=main_vpc_private_network.id,\n    dhcp_id=main_vpc_public_gateway_dhcp.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True,\n    opts=pulumi.ResourceOptions(depends_on=[\n            main_vpc_public_gateway_ip,\n            main_vpc_private_network,\n        ]))\nmain_vpc_public_gateway_dhcp_reservation = scaleway.VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\",\n    gateway_network_id=main_vpc_gateway_network.id,\n    mac_address=main_instance_server.private_networks[0].mac_address,\n    ip_address=\"192.168.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainVpcPrivateNetwork = new Scaleway.VpcPrivateNetwork(\"mainVpcPrivateNetwork\");\n\n    var mainInstanceServer = new Scaleway.InstanceServer(\"mainInstanceServer\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        Zone = \"fr-par-1\",\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.InstanceServerPrivateNetworkArgs\n            {\n                PnId = mainVpcPrivateNetwork.Id,\n            },\n        },\n    });\n\n    var mainVpcPublicGatewayIp = new Scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n    var mainVpcPublicGatewayDhcp = new Scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n    var mainVpcPublicGateway = new Scaleway.VpcPublicGateway(\"mainVpcPublicGateway\", new()\n    {\n        Type = \"VPC-GW-S\",\n        IpId = mainVpcPublicGatewayIp.Id,\n    });\n\n    var mainVpcGatewayNetwork = new Scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\", new()\n    {\n        GatewayId = mainVpcPublicGateway.Id,\n        PrivateNetworkId = mainVpcPrivateNetwork.Id,\n        DhcpId = mainVpcPublicGatewayDhcp.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            mainVpcPublicGatewayIp,\n            mainVpcPrivateNetwork,\n        },\n    });\n\n    var mainVpcPublicGatewayDhcpReservation = new Scaleway.VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\", new()\n    {\n        GatewayNetworkId = mainVpcGatewayNetwork.Id,\n        MacAddress = mainInstanceServer.PrivateNetworks.Apply(privateNetworks =\u003e privateNetworks[0]?.MacAddress),\n        IpAddress = \"192.168.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainVpcPrivateNetwork, err := scaleway.NewVpcPrivateNetwork(ctx, \"mainVpcPrivateNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"mainInstanceServer\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tZone:  pulumi.String(\"fr-par-1\"),\n\t\t\tPrivateNetworks: InstanceServerPrivateNetworkArray{\n\t\t\t\t\u0026InstanceServerPrivateNetworkArgs{\n\t\t\t\t\tPnId: mainVpcPrivateNetwork.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, \"mainVpcPublicGatewayIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayDhcp, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"mainVpcPublicGatewayDhcp\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGateway, err := scaleway.NewVpcPublicGateway(ctx, \"mainVpcPublicGateway\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: mainVpcPublicGatewayIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcGatewayNetwork, err := scaleway.NewVpcGatewayNetwork(ctx, \"mainVpcGatewayNetwork\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        mainVpcPublicGateway.ID(),\n\t\t\tPrivateNetworkId: mainVpcPrivateNetwork.ID(),\n\t\t\tDhcpId:           mainVpcPublicGatewayDhcp.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainVpcPublicGatewayIp,\n\t\t\tmainVpcPrivateNetwork,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayDhcpReservation(ctx, \"mainVpcPublicGatewayDhcpReservation\", \u0026scaleway.VpcPublicGatewayDhcpReservationArgs{\n\t\t\tGatewayNetworkId: mainVpcGatewayNetwork.ID(),\n\t\t\tMacAddress: mainInstanceServer.PrivateNetworks.ApplyT(func(privateNetworks []InstanceServerPrivateNetwork) (string, error) {\n\t\t\t\treturn privateNetworks[0].MacAddress, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tIpAddress: pulumi.String(\"192.168.1.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerPrivateNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservation;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservationArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainVpcPrivateNetwork = new VpcPrivateNetwork(\"mainVpcPrivateNetwork\");\n\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()        \n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .zone(\"fr-par-1\")\n            .privateNetworks(InstanceServerPrivateNetworkArgs.builder()\n                .pnId(mainVpcPrivateNetwork.id())\n                .build())\n            .build());\n\n        var mainVpcPublicGatewayIp = new VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n        var mainVpcPublicGatewayDhcp = new VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n        var mainVpcPublicGateway = new VpcPublicGateway(\"mainVpcPublicGateway\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .ipId(mainVpcPublicGatewayIp.id())\n            .build());\n\n        var mainVpcGatewayNetwork = new VpcGatewayNetwork(\"mainVpcGatewayNetwork\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(mainVpcPublicGateway.id())\n            .privateNetworkId(mainVpcPrivateNetwork.id())\n            .dhcpId(mainVpcPublicGatewayDhcp.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    mainVpcPublicGatewayIp,\n                    mainVpcPrivateNetwork)\n                .build());\n\n        var mainVpcPublicGatewayDhcpReservation = new VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\", VpcPublicGatewayDhcpReservationArgs.builder()        \n            .gatewayNetworkId(mainVpcGatewayNetwork.id())\n            .macAddress(mainInstanceServer.privateNetworks().applyValue(privateNetworks -\u003e privateNetworks[0].macAddress()))\n            .ipAddress(\"192.168.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainVpcPrivateNetwork:\n    type: scaleway:VpcPrivateNetwork\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      zone: fr-par-1\n      privateNetworks:\n        - pnId: ${mainVpcPrivateNetwork.id}\n  mainVpcPublicGatewayIp:\n    type: scaleway:VpcPublicGatewayIp\n  mainVpcPublicGatewayDhcp:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n  mainVpcPublicGateway:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n      ipId: ${mainVpcPublicGatewayIp.id}\n  mainVpcGatewayNetwork:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${mainVpcPublicGateway.id}\n      privateNetworkId: ${mainVpcPrivateNetwork.id}\n      dhcpId: ${mainVpcPublicGatewayDhcp.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n    options:\n      dependson:\n        - ${mainVpcPublicGatewayIp}\n        - ${mainVpcPrivateNetwork}\n  mainVpcPublicGatewayDhcpReservation:\n    type: scaleway:VpcPublicGatewayDhcpReservation\n    properties:\n      gatewayNetworkId: ${mainVpcGatewayNetwork.id}\n      macAddress: ${mainInstanceServer.privateNetworks[0].macAddress}\n      ipAddress: 192.168.1.1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPublic gateway DHCP Reservation config can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayDhcpReservation:VpcPublicGatewayDhcpReservation main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway DHCP config.\n"
                },
                "gatewayNetworkId": {
                    "type": "string",
                    "description": "The ID of the owning GatewayNetwork.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The Hostname of the client machine.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to give to the machine (IP address).\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address to give a static entry to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway DHCP config.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayNetworkId",
                "hostname",
                "ipAddress",
                "macAddress",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "gatewayNetworkId": {
                    "type": "string",
                    "description": "The ID of the owning GatewayNetwork.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to give to the machine (IP address).\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address to give a static entry to.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayNetworkId",
                "ipAddress",
                "macAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayDhcpReservation resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway DHCP config.\n"
                    },
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "The ID of the owning GatewayNetwork.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The Hostname of the client machine.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address to give to the machine (IP address).\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address to give a static entry to.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway DHCP config.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp": {
            "description": "Creates and manages Scaleway VPC Public Gateway IP.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#ips-268151).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayIp(\"main\", {\n    reverse: \"tf.example.com\",\n});\nconst tfA = new scaleway.DomainRecord(\"tf_A\", {\n    data: main.address,\n    dnsZone: \"example.com\",\n    priority: 1,\n    ttl: 3600,\n    type: \"A\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayIp(\"main\", reverse=\"tf.example.com\")\ntf_a = scaleway.DomainRecord(\"tfA\",\n    data=main.address,\n    dns_zone=\"example.com\",\n    priority=1,\n    ttl=3600,\n    type=\"A\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayIp(\"main\", new()\n    {\n        Reverse = \"tf.example.com\",\n    });\n\n    var tfA = new Scaleway.DomainRecord(\"tfA\", new()\n    {\n        Data = main.Address,\n        DnsZone = \"example.com\",\n        Priority = 1,\n        Ttl = 3600,\n        Type = \"A\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayIpArgs{\n\t\t\tReverse: pulumi.String(\"tf.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"tfA\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:     main.Address,\n\t\t\tDnsZone:  pulumi.String(\"example.com\"),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tType:     pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayIpArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayIp(\"main\", VpcPublicGatewayIpArgs.builder()        \n            .reverse(\"tf.example.com\")\n            .build());\n\n        var tfA = new DomainRecord(\"tfA\", DomainRecordArgs.builder()        \n            .data(main.address())\n            .dnsZone(\"example.com\")\n            .priority(1)\n            .ttl(3600)\n            .type(\"A\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfA:\n    type: scaleway:DomainRecord\n    properties:\n      data: ${main.address}\n      dnsZone: example.com\n      priority: 1\n      ttl: 3600\n      type: A\n  main:\n    type: scaleway:VpcPublicGatewayIp\n    properties:\n      reverse: tf.example.com\n```\n\n\n## Import\n\nPublic gateway can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address itself.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway ip.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the public gateway ip is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway ip is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for the IP address\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway IP.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway ip.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway ip should be created.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "organizationId",
                "projectId",
                "reverse",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway ip is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for the IP address\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway ip should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address itself.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway ip.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the public gateway ip is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway ip is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain name for the IP address\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the public gateway IP.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway ip.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway ip should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule": {
            "description": "Creates and manages Scaleway VPC Public Gateway PAT (Port Address Translation).\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1#pat-rules-e75d10).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\n\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {type: \"VPC-GW-S\"});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {subnet: \"192.168.1.0/24\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst gn01 = new scaleway.VpcGatewayNetwork(\"gn01\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n});\nconst main = new scaleway.VpcPublicGatewayPatRule(\"main\", {\n    gatewayId: pg01.id,\n    privateIp: dhcp01.address,\n    privatePort: 42,\n    publicPort: 42,\n    protocol: \"both\",\n}, {\n    dependsOn: [\n        gn01,\n        pn01,\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\n\npg01 = scaleway.VpcPublicGateway(\"pg01\", type=\"VPC-GW-S\")\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\", subnet=\"192.168.1.0/24\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\ngn01 = scaleway.VpcGatewayNetwork(\"gn01\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id,\n    cleanup_dhcp=True)\nmain = scaleway.VpcPublicGatewayPatRule(\"main\",\n    gateway_id=pg01.id,\n    private_ip=dhcp01.address,\n    private_port=42,\n    public_port=42,\n    protocol=\"both\",\n    opts=pulumi.ResourceOptions(depends_on=[\n            gn01,\n            pn01,\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Type = \"VPC-GW-S\",\n    });\n\n    var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\");\n\n    var gn01 = new Scaleway.VpcGatewayNetwork(\"gn01\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        DhcpId = dhcp01.Id,\n        CleanupDhcp = true,\n    });\n\n    var main = new Scaleway.VpcPublicGatewayPatRule(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateIp = dhcp01.Address,\n        PrivatePort = 42,\n        PublicPort = 42,\n        Protocol = \"both\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            gn01,\n            pn01,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgn01, err := scaleway.NewVpcGatewayNetwork(ctx, \"gn01\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayPatRule(ctx, \"main\", \u0026scaleway.VpcPublicGatewayPatRuleArgs{\n\t\t\tGatewayId:   pg01.ID(),\n\t\t\tPrivateIp:   dhcp01.Address,\n\t\t\tPrivatePort: pulumi.Int(42),\n\t\t\tPublicPort:  pulumi.Int(42),\n\t\t\tProtocol:    pulumi.String(\"both\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tgn01,\n\t\t\tpn01,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRule;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRuleArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .build());\n\n        var dhcp01 = new VpcPublicGatewayDhcp(\"dhcp01\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\");\n\n        var gn01 = new VpcGatewayNetwork(\"gn01\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .dhcpId(dhcp01.id())\n            .cleanupDhcp(true)\n            .build());\n\n        var main = new VpcPublicGatewayPatRule(\"main\", VpcPublicGatewayPatRuleArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateIp(dhcp01.address())\n            .privatePort(42)\n            .publicPort(42)\n            .protocol(\"both\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    gn01,\n                    pn01)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n  dhcp01:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n  gn01:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      dhcpId: ${dhcp01.id}\n      cleanupDhcp: true\n  main:\n    type: scaleway:VpcPublicGatewayPatRule\n    properties:\n      gatewayId: ${pg01.id}\n      privateIp: ${dhcp01.address}\n      privatePort: 42\n      publicPort: 42\n      protocol: both\n    options:\n      dependson:\n        - ${gn01}\n        - ${pn01}\n```\n\n\n## Import\n\nPublic gateway PAT rules config can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the pat rule config.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the pat rule config is associated with.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Private IP to forward data to (IP address).\n"
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The Private port to translate to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The Public port to listen on.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the pat rule config.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayId",
                "organizationId",
                "privateIp",
                "privatePort",
                "publicPort",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Private IP to forward data to (IP address).\n"
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The Private port to translate to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The Public port to listen on.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayId",
                "privateIp",
                "privatePort",
                "publicPort"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayPatRule resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the pat rule config.\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the public gateway.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the pat rule config is associated with.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Private IP to forward data to (IP address).\n"
                    },
                    "privatePort": {
                        "type": "integer",
                        "description": "The Private port to translate to.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                    },
                    "publicPort": {
                        "type": "integer",
                        "description": "The Public port to listen on.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the pat rule config.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "scaleway:index/getAccountSshKey:getAccountSshKey": {
            "description": "Use this data source to get SSH key information based on its ID or name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by SSH key id\nconst myKey = pulumi.output(scaleway.getAccountSshKey({\n    sshKeyId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_account_ssh_key(ssh_key_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetAccountSshKey.Invoke(new()\n    {\n        SshKeyId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupAccountSshKey(ctx, \u0026GetAccountSshKeyArgs{\n\t\t\tSshKeyId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getAccountSshKey(GetAccountSshKeyArgs.builder()\n            .sshKeyId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getAccountSshKey\n      Arguments:\n        sshKeyId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountSshKey.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The SSH key name. Only one of `name` and `ssh_key_id` should be specified.\n"
                    },
                    "sshKeyId": {
                        "type": "string",
                        "description": "The SSH key id. Only one of `name` and `ssh_key_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountSshKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The SSH public key string\n"
                    },
                    "sshKeyId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationId",
                    "projectId",
                    "publicKey",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalOffer:getBaremetalOffer": {
            "description": "Gets information about a baremetal offer. For more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by offer id\nconst myOffer = pulumi.output(scaleway.getBaremetalOffer({\n    offerId: \"25dcf38b-c90c-4b18-97a2-6956e9d1e113\",\n    zone: \"fr-par-2\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_offer = scaleway.get_baremetal_offer(offer_id=\"25dcf38b-c90c-4b18-97a2-6956e9d1e113\",\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        OfferId = \"25dcf38b-c90c-4b18-97a2-6956e9d1e113\",\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.GetBaremetalOffer(ctx, \u0026GetBaremetalOfferArgs{\n\t\t\tOfferId: pulumi.StringRef(\"25dcf38b-c90c-4b18-97a2-6956e9d1e113\"),\n\t\t\tZone:    pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .offerId(\"25dcf38b-c90c-4b18-97a2-6956e9d1e113\")\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        offerId: 25dcf38b-c90c-4b18-97a2-6956e9d1e113\n        zone: fr-par-2\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOffer.\n",
                "properties": {
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The offer id. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "subscriptionPeriod": {
                        "type": "string",
                        "description": "Period of subscription the desired offer. Should be `hourly` or `monthly`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the offer should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOffer.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "Available Bandwidth with the offer.\n"
                    },
                    "commercialRange": {
                        "type": "string",
                        "description": "Commercial range of the offer.\n"
                    },
                    "cpu": {
                        "$ref": "#/types/scaleway:index/getBaremetalOfferCpu:getBaremetalOfferCpu",
                        "description": "A list of cpu specifications. (Structure is documented below.)\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalOfferDisk:getBaremetalOfferDisk"
                        },
                        "description": "A list of disk specifications. (Structure is documented below.)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "memories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalOfferMemory:getBaremetalOfferMemory"
                        },
                        "description": "A list of memory specifications. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the CPU.\n"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "stock": {
                        "type": "string",
                        "description": "Stock status for this offer. Possible values are: `empty`, `low` or `available`.\n"
                    },
                    "subscriptionPeriod": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bandwidth",
                    "commercialRange",
                    "cpu",
                    "disks",
                    "memories",
                    "stock",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalOption:getBaremetalOption": {
            "description": "Gets information about a baremetal option.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by option name \nconst byName = pulumi.output(scaleway.getBaremetalOption({\n    name: \"Remote Access\",\n}));\n// Get info by option id\nconst byId = pulumi.output(scaleway.getBaremetalOption({\n    optionId: \"931df052-d713-4674-8b58-96a63244c8e2\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_baremetal_option(name=\"Remote Access\")\nby_id = scaleway.get_baremetal_option(option_id=\"931df052-d713-4674-8b58-96a63244c8e2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetBaremetalOption.Invoke(new()\n    {\n        Name = \"Remote Access\",\n    });\n\n    var byId = Scaleway.GetBaremetalOption.Invoke(new()\n    {\n        OptionId = \"931df052-d713-4674-8b58-96a63244c8e2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.GetBaremetalOption(ctx, \u0026GetBaremetalOptionArgs{\n\t\t\tName: pulumi.StringRef(\"Remote Access\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetBaremetalOption(ctx, \u0026GetBaremetalOptionArgs{\n\t\t\tOptionId: pulumi.StringRef(\"931df052-d713-4674-8b58-96a63244c8e2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getBaremetalOption(GetBaremetalOptionArgs.builder()\n            .name(\"Remote Access\")\n            .build());\n\n        final var byId = ScalewayFunctions.getBaremetalOption(GetBaremetalOptionArgs.builder()\n            .optionId(\"931df052-d713-4674-8b58-96a63244c8e2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getBaremetalOption\n      Arguments:\n        name: Remote Access\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalOption\n      Arguments:\n        optionId: 931df052-d713-4674-8b58-96a63244c8e2\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOption.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The option name. Only one of `name` and `option_id` should be specified.\n"
                    },
                    "optionId": {
                        "type": "string",
                        "description": "The option id. Only one of `name` and `option_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the option exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOption.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "manageable": {
                        "type": "boolean",
                        "description": "Is false if the option could not be added or removed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the option.\n"
                    },
                    "optionId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "manageable",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalOs:getBaremetalOs": {
            "description": "Gets information about a baremetal operating system.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\nYou can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw baremetal os list` to list all available operating systems.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by os name and version\nconst byName = pulumi.output(scaleway.getBaremetalOs({\n    name: \"Ubuntu\",\n    version: \"20.04 LTS (Focal Fossa)\",\n}));\n// Get info by os id\nconst byId = pulumi.output(scaleway.getBaremetalOs({\n    osId: \"03b7f4ba-a6a1-4305-984e-b54fafbf1681\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_baremetal_os(name=\"Ubuntu\",\n    version=\"20.04 LTS (Focal Fossa)\")\nby_id = scaleway.get_baremetal_os(os_id=\"03b7f4ba-a6a1-4305-984e-b54fafbf1681\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        Name = \"Ubuntu\",\n        Version = \"20.04 LTS (Focal Fossa)\",\n    });\n\n    var byId = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        OsId = \"03b7f4ba-a6a1-4305-984e-b54fafbf1681\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.GetBaremetalOs(ctx, \u0026GetBaremetalOsArgs{\n\t\t\tName:    pulumi.StringRef(\"Ubuntu\"),\n\t\t\tVersion: pulumi.StringRef(\"20.04 LTS (Focal Fossa)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.GetBaremetalOs(ctx, \u0026GetBaremetalOsArgs{\n\t\t\tOsId: pulumi.StringRef(\"03b7f4ba-a6a1-4305-984e-b54fafbf1681\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .name(\"Ubuntu\")\n            .version(\"20.04 LTS (Focal Fossa)\")\n            .build());\n\n        final var byId = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .osId(\"03b7f4ba-a6a1-4305-984e-b54fafbf1681\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        name: Ubuntu\n        version: 20.04 LTS (Focal Fossa)\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        osId: 03b7f4ba-a6a1-4305-984e-b54fafbf1681\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOs.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The os name. Only one of `name` and `os_id` should be specified.\n"
                    },
                    "osId": {
                        "type": "string",
                        "description": "The operating system id. Only one of `name` and `os_id` should be specified.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The os version.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the os exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "osId": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalServer:getBaremetalServer": {
            "description": "Gets information about a baremetal server.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by server name\nconst byName = pulumi.output(scaleway.getBaremetalServer({\n    name: \"foobar\",\n    zone: \"fr-par-2\",\n}));\n// Get info by server id\nconst byId = pulumi.output(scaleway.getBaremetalServer({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_baremetal_server(name=\"foobar\",\n    zone=\"fr-par-2\")\nby_id = scaleway.get_baremetal_server(server_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetBaremetalServer.Invoke(new()\n    {\n        Name = \"foobar\",\n        Zone = \"fr-par-2\",\n    });\n\n    var byId = Scaleway.GetBaremetalServer.Invoke(new()\n    {\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupBaremetalServer(ctx, \u0026GetBaremetalServerArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupBaremetalServer(ctx, \u0026GetBaremetalServerArgs{\n\t\t\tServerId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getBaremetalServer(GetBaremetalServerArgs.builder()\n            .name(\"foobar\")\n            .zone(\"fr-par-2\")\n            .build());\n\n        final var byId = ScalewayFunctions.getBaremetalServer(GetBaremetalServerArgs.builder()\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getBaremetalServer\n      Arguments:\n        name: foobar\n        zone: fr-par-2\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalServer\n      Arguments:\n        serverId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalServer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalServer.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerIp:getBaremetalServerIp"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "offer": {
                        "type": "string"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "os": {
                        "type": "string"
                    },
                    "osId": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reinstallOnConfigChanges": {
                        "type": "boolean"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "servicePassword": {
                        "type": "string"
                    },
                    "serviceUser": {
                        "type": "string"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "user": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "domain",
                    "hostname",
                    "ips",
                    "offer",
                    "offerId",
                    "organizationId",
                    "os",
                    "osId",
                    "password",
                    "projectId",
                    "reinstallOnConfigChanges",
                    "servicePassword",
                    "serviceUser",
                    "sshKeyIds",
                    "tags",
                    "user",
                    "id"
                ]
            }
        },
        "scaleway:index/getContainer:getContainer": {
            "description": "Gets information about the Scaleway Container.\n\nFor more information consult the [documentation](https://www.scaleway.com/en/docs/faq/serverless-containers/).\n\nFor more details about the limitation check [containers-limitations](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/).\n\nYou can check also our [containers guide](https://www.scaleway.com/en/docs/compute/containers/concepts/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst mainContainerNamespace = new scaleway.ContainerNamespace(\"mainContainerNamespace\", {});\nconst mainContainer = new scaleway.Container(\"mainContainer\", {namespaceId: mainContainerNamespace.id});\nconst byName = scaleway.getContainerOutput({\n    namespaceId: mainContainerNamespace.id,\n    name: mainContainer.name,\n});\nconst byId = scaleway.getContainerOutput({\n    namespaceId: mainContainerNamespace.id,\n    containerId: mainContainer.id,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain_container_namespace = scaleway.ContainerNamespace(\"mainContainerNamespace\")\nmain_container = scaleway.Container(\"mainContainer\", namespace_id=main_container_namespace.id)\nby_name = scaleway.get_container_output(namespace_id=main_container_namespace.id,\n    name=main_container.name)\nby_id = scaleway.get_container_output(namespace_id=main_container_namespace.id,\n    container_id=main_container.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainContainerNamespace = new Scaleway.ContainerNamespace(\"mainContainerNamespace\");\n\n    var mainContainer = new Scaleway.Container(\"mainContainer\", new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n    });\n\n    var byName = Scaleway.GetContainer.Invoke(new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n        Name = mainContainer.Name,\n    });\n\n    var byId = Scaleway.GetContainer.Invoke(new()\n    {\n        NamespaceId = mainContainerNamespace.Id,\n        ContainerId = mainContainer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainContainerNamespace, err := scaleway.NewContainerNamespace(ctx, \"mainContainerNamespace\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainContainer, err := scaleway.NewContainer(ctx, \"mainContainer\", \u0026scaleway.ContainerArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupContainerOutput(ctx, GetContainerOutputArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t\tName:        mainContainer.Name,\n\t\t}, nil)\n\t\t_ = scaleway.LookupContainerOutput(ctx, GetContainerOutputArgs{\n\t\t\tNamespaceId: mainContainerNamespace.ID(),\n\t\t\tContainerId: mainContainer.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetContainerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainContainerNamespace = new ContainerNamespace(\"mainContainerNamespace\");\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()        \n            .namespaceId(mainContainerNamespace.id())\n            .build());\n\n        final var byName = ScalewayFunctions.getContainer(GetContainerArgs.builder()\n            .namespaceId(mainContainerNamespace.id())\n            .name(mainContainer.name())\n            .build());\n\n        final var byId = ScalewayFunctions.getContainer(GetContainerArgs.builder()\n            .namespaceId(mainContainerNamespace.id())\n            .containerId(mainContainer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mainContainerNamespace:\n    type: scaleway:ContainerNamespace\n  mainContainer:\n    type: scaleway:Container\n    properties:\n      namespaceId: ${mainContainerNamespace.id}\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getContainer\n      Arguments:\n        namespaceId: ${mainContainerNamespace.id}\n        name: ${mainContainer.name}\n  byId:\n    fn::invoke:\n      Function: scaleway:getContainer\n      Arguments:\n        namespaceId: ${mainContainerNamespace.id}\n        containerId: ${mainContainer.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainer.\n",
                "properties": {
                    "containerId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the container name.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The container namespace ID of the container.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the container was created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContainer.\n",
                "properties": {
                    "containerId": {
                        "type": "string"
                    },
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The amount of vCPU computing resources to allocate to each container. Defaults  to 70.\n"
                    },
                    "cronStatus": {
                        "type": "string",
                        "description": "The cron status of the container.\n"
                    },
                    "deploy": {
                        "type": "boolean",
                        "description": "Boolean indicating whether the container is on a production environment.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The container domain name.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "The error message of the container.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxConcurrency": {
                        "type": "integer",
                        "description": "The maximum number of simultaneous requests your container can handle at the same time. Defaults to 50.\n"
                    },
                    "maxScale": {
                        "type": "integer",
                        "description": "The maximum of number of instances this container can scale to. Default to 20.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The memory computing resources in MB to allocate to each container. Defaults to 128.\n"
                    },
                    "minScale": {
                        "type": "integer",
                        "description": "The minimum of running container instances continuously. Defaults to 0.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port to expose the container. Defaults to 8080.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The privacy type define the way to authenticate to your container. Please check our dedicated [section](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8).\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The communication [protocol](https://developers.scaleway.com/en/products/containers/api/#protocol-9dd4c8) http1 or h2c. Defaults to http1.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the container was created.\n"
                    },
                    "registryImage": {
                        "type": "string",
                        "description": "The registry image address. e.g: **\"rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE\"**.\n"
                    },
                    "registrySha256": {
                        "type": "string",
                        "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The container status.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to 300s.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cpuLimit",
                    "cronStatus",
                    "deploy",
                    "description",
                    "domainName",
                    "environmentVariables",
                    "errorMessage",
                    "maxConcurrency",
                    "maxScale",
                    "memoryLimit",
                    "minScale",
                    "namespaceId",
                    "port",
                    "privacy",
                    "protocol",
                    "registryImage",
                    "registrySha256",
                    "secretEnvironmentVariables",
                    "status",
                    "timeout",
                    "id"
                ]
            }
        },
        "scaleway:index/getContainerNamespace:getContainerNamespace": {
            "description": "Gets information about a container namespace.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by namespace name\nconst byName = pulumi.output(scaleway.getContainerNamespace({\n    name: \"my-namespace-name\",\n}));\n// Get info by namespace ID\nconst byId = pulumi.output(scaleway.getContainerNamespace({\n    namespaceId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_container_namespace(name=\"my-namespace-name\")\nby_id = scaleway.get_container_namespace(namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetContainerNamespace.Invoke(new()\n    {\n        Name = \"my-namespace-name\",\n    });\n\n    var byId = Scaleway.GetContainerNamespace.Invoke(new()\n    {\n        NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupContainerNamespace(ctx, \u0026GetContainerNamespaceArgs{\n\t\t\tName: pulumi.StringRef(\"my-namespace-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupContainerNamespace(ctx, \u0026GetContainerNamespaceArgs{\n\t\t\tNamespaceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetContainerNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getContainerNamespace(GetContainerNamespaceArgs.builder()\n            .name(\"my-namespace-name\")\n            .build());\n\n        final var byId = ScalewayFunctions.getContainerNamespace(GetContainerNamespaceArgs.builder()\n            .namespaceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getContainerNamespace\n      Arguments:\n        name: my-namespace-name\n  byId:\n    fn::invoke:\n      Function: scaleway:getContainerNamespace\n      Arguments:\n        namespaceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainerNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The namespace name.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getContainerNamespace.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "destroyRegistry": {
                        "type": "boolean"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "destroyRegistry",
                    "environmentVariables",
                    "organizationId",
                    "projectId",
                    "registryEndpoint",
                    "registryNamespaceId",
                    "secretEnvironmentVariables",
                    "id"
                ]
            }
        },
        "scaleway:index/getDatabase:getDatabase": {
            "description": "Gets information about a RDB database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\nconst myDb = pulumi.output(scaleway.getDatabase({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    name: \"foobar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_db = scaleway.get_database(instance_id=\"11111111-1111-1111-1111-111111111111\",\n    name=\"foobar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDb = Scaleway.GetDatabase.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        Name = \"foobar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupDatabase(ctx, \u0026GetDatabaseArgs{\n\t\t\tInstanceId: \"11111111-1111-1111-1111-111111111111\",\n\t\t\tName:       \"foobar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDb = ScalewayFunctions.getDatabase(GetDatabaseArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .name(\"foobar\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDb:\n    fn::invoke:\n      Function: scaleway:getDatabase\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n        name: foobar\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether or not the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database (in bytes).\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "managed",
                    "name",
                    "owner",
                    "size",
                    "id"
                ]
            }
        },
        "scaleway:index/getDatabaseAcl:getDatabaseAcl": {
            "description": "Gets information about the RDB instance network Access Control List.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database ACL for the instanceid 11111111-1111-1111-1111-111111111111 located in fr-par\nconst myAcl = pulumi.output(scaleway.getDatabaseAcl({\n    instanceId: \"fr-par/11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_acl = scaleway.get_database_acl(instance_id=\"fr-par/11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAcl = Scaleway.GetDatabaseAcl.Invoke(new()\n    {\n        InstanceId = \"fr-par/11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupDatabaseAcl(ctx, \u0026GetDatabaseAclArgs{\n\t\t\tInstanceId: \"fr-par/11111111-1111-1111-1111-111111111111\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDatabaseAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAcl = ScalewayFunctions.getDatabaseAcl(GetDatabaseAclArgs.builder()\n            .instanceId(\"fr-par/11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAcl:\n    fn::invoke:\n      Function: scaleway:getDatabaseAcl\n      Arguments:\n        instanceId: fr-par/11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseAcl.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseAcl.\n",
                "properties": {
                    "aclRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseAclAclRule:getDatabaseAclAclRule"
                        },
                        "description": "A list of ACLs (structure is described below)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "aclRules",
                    "instanceId",
                    "region",
                    "id"
                ]
            }
        },
        "scaleway:index/getDatabaseBackup:getDatabaseBackup": {
            "description": "Gets information about an RDB backup.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst findByName = pulumi.output(scaleway.getDatabaseBackup({\n    name: \"mybackup\",\n}));\nconst findByNameAndInstance = pulumi.output(scaleway.getDatabaseBackup({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    name: \"mybackup\",\n}));\nconst findById = pulumi.output(scaleway.getDatabaseBackup({\n    backupId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfind_by_name = scaleway.get_database_backup(name=\"mybackup\")\nfind_by_name_and_instance = scaleway.get_database_backup(instance_id=\"11111111-1111-1111-1111-111111111111\",\n    name=\"mybackup\")\nfind_by_id = scaleway.get_database_backup(backup_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var findByName = Scaleway.GetDatabaseBackup.Invoke(new()\n    {\n        Name = \"mybackup\",\n    });\n\n    var findByNameAndInstance = Scaleway.GetDatabaseBackup.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        Name = \"mybackup\",\n    });\n\n    var findById = Scaleway.GetDatabaseBackup.Invoke(new()\n    {\n        BackupId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupDatabaseBackup(ctx, \u0026GetDatabaseBackupArgs{\n\t\t\tName: pulumi.StringRef(\"mybackup\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupDatabaseBackup(ctx, \u0026GetDatabaseBackupArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tName:       pulumi.StringRef(\"mybackup\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupDatabaseBackup(ctx, \u0026GetDatabaseBackupArgs{\n\t\t\tBackupId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDatabaseBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var findByName = ScalewayFunctions.getDatabaseBackup(GetDatabaseBackupArgs.builder()\n            .name(\"mybackup\")\n            .build());\n\n        final var findByNameAndInstance = ScalewayFunctions.getDatabaseBackup(GetDatabaseBackupArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .name(\"mybackup\")\n            .build());\n\n        final var findById = ScalewayFunctions.getDatabaseBackup(GetDatabaseBackupArgs.builder()\n            .backupId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  findByName:\n    fn::invoke:\n      Function: scaleway:getDatabaseBackup\n      Arguments:\n        name: mybackup\n  findByNameAndInstance:\n    fn::invoke:\n      Function: scaleway:getDatabaseBackup\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n        name: mybackup\n  findById:\n    fn::invoke:\n      Function: scaleway:getDatabaseBackup\n      Arguments:\n        backupId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseBackup.\n",
                "properties": {
                    "backupId": {
                        "type": "string",
                        "description": "The RDB backup ID.\nOnly one of the `name` and `backup_id` should be specified.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\nOnly one of the `name` and `backup_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseBackup.\n",
                "properties": {
                    "backupId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    },
                    "expiresAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "databaseName",
                    "expiresAt",
                    "instanceName",
                    "size",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getDatabaseInstance:getDatabaseInstance": {
            "description": "Gets information about an RDB instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by instance ID\nconst myInstance = pulumi.output(scaleway.getDatabaseInstance({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_instance = scaleway.get_database_instance(instance_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myInstance = Scaleway.GetDatabaseInstance.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupDatabaseInstance(ctx, \u0026GetDatabaseInstanceArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myInstance = ScalewayFunctions.getDatabaseInstance(GetDatabaseInstanceArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myInstance:\n    fn::invoke:\n      Function: scaleway:getDatabaseInstance\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\nOnly one of `name` and `instance_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseInstance.\n",
                "properties": {
                    "backupSameRegion": {
                        "type": "boolean"
                    },
                    "backupScheduleFrequency": {
                        "type": "integer"
                    },
                    "backupScheduleRetention": {
                        "type": "integer"
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "disableBackup": {
                        "type": "boolean"
                    },
                    "endpointIp": {
                        "type": "string"
                    },
                    "endpointPort": {
                        "type": "integer"
                    },
                    "engine": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "initSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "isHaCluster": {
                        "type": "boolean"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstanceLoadBalancer:getDatabaseInstanceLoadBalancer"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstancePrivateNetwork:getDatabaseInstancePrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "readReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstanceReadReplica:getDatabaseInstanceReadReplica"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userName": {
                        "type": "string"
                    },
                    "volumeSizeInGb": {
                        "type": "integer"
                    },
                    "volumeType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backupSameRegion",
                    "backupScheduleFrequency",
                    "backupScheduleRetention",
                    "certificate",
                    "disableBackup",
                    "endpointIp",
                    "endpointPort",
                    "engine",
                    "initSettings",
                    "isHaCluster",
                    "loadBalancers",
                    "nodeType",
                    "organizationId",
                    "password",
                    "privateNetworks",
                    "projectId",
                    "readReplicas",
                    "region",
                    "settings",
                    "tags",
                    "userName",
                    "volumeSizeInGb",
                    "volumeType",
                    "id"
                ]
            }
        },
        "scaleway:index/getDatabasePrivilege:getDatabasePrivilege": {
            "description": "Gets information about the privilege on a RDB database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database privilege for the user \"my-user\" on the database \"my-database\" hosted on instance id fr-par/11111111-1111-1111-1111-111111111111\nconst findPriv = pulumi.output(scaleway.getDatabasePrivilege({\n    databaseName: \"my-database\",\n    instanceId: \"fr-par/11111111-1111-111111111111\",\n    userName: \"my-user\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfind_priv = scaleway.get_database_privilege(database_name=\"my-database\",\n    instance_id=\"fr-par/11111111-1111-111111111111\",\n    user_name=\"my-user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var findPriv = Scaleway.GetDatabasePrivilege.Invoke(new()\n    {\n        DatabaseName = \"my-database\",\n        InstanceId = \"fr-par/11111111-1111-111111111111\",\n        UserName = \"my-user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupDatabasePrivilege(ctx, \u0026GetDatabasePrivilegeArgs{\n\t\t\tDatabaseName: \"my-database\",\n\t\t\tInstanceId:   \"fr-par/11111111-1111-111111111111\",\n\t\t\tUserName:     \"my-user\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDatabasePrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var findPriv = ScalewayFunctions.getDatabasePrivilege(GetDatabasePrivilegeArgs.builder()\n            .databaseName(\"my-database\")\n            .instanceId(\"fr-par/11111111-1111-111111111111\")\n            .userName(\"my-user\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  findPriv:\n    fn::invoke:\n      Function: scaleway:getDatabasePrivilege\n      Arguments:\n        databaseName: my-database\n        instanceId: fr-par/11111111-1111-111111111111\n        userName: my-user\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabasePrivilege.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database name.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "instanceId",
                    "userName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabasePrivilege.\n",
                "properties": {
                    "databaseName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission for this user on the database. Possible values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "instanceId",
                    "permission",
                    "userName",
                    "id"
                ]
            }
        },
        "scaleway:index/getDomainRecord:getDomainRecord": {
            "description": "Gets information about a domain record.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get record by name, type and data\nconst byContent = pulumi.output(scaleway.getDomainRecord({\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    name: \"www\",\n    type: \"A\",\n}));\n// Get info by ID\nconst byId = pulumi.output(scaleway.getDomainRecord({\n    dnsZone: \"domain.tld\",\n    recordId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_content = scaleway.get_domain_record(data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    name=\"www\",\n    type=\"A\")\nby_id = scaleway.get_domain_record(dns_zone=\"domain.tld\",\n    record_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byContent = Scaleway.GetDomainRecord.Invoke(new()\n    {\n        Data = \"1.2.3.4\",\n        DnsZone = \"domain.tld\",\n        Name = \"www\",\n        Type = \"A\",\n    });\n\n    var byId = Scaleway.GetDomainRecord.Invoke(new()\n    {\n        DnsZone = \"domain.tld\",\n        RecordId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupDomainRecord(ctx, \u0026GetDomainRecordArgs{\n\t\t\tData:    pulumi.StringRef(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.StringRef(\"domain.tld\"),\n\t\t\tName:    pulumi.StringRef(\"www\"),\n\t\t\tType:    pulumi.StringRef(\"A\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupDomainRecord(ctx, \u0026GetDomainRecordArgs{\n\t\t\tDnsZone:  pulumi.StringRef(\"domain.tld\"),\n\t\t\tRecordId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byContent = ScalewayFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .data(\"1.2.3.4\")\n            .dnsZone(\"domain.tld\")\n            .name(\"www\")\n            .type(\"A\")\n            .build());\n\n        final var byId = ScalewayFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .recordId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byContent:\n    fn::invoke:\n      Function: scaleway:getDomainRecord\n      Arguments:\n        data: 1.2.3.4\n        dnsZone: domain.tld\n        name: www\n        type: A\n  byId:\n    fn::invoke:\n      Function: scaleway:getDomainRecord\n      Arguments:\n        dnsZone: domain.tld\n        recordId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainRecord.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\nCannot be used with `record_id`.\n"
                    },
                    "dnsZone": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record (can be an empty string for a root record).\nCannot be used with `record_id`.\n"
                    },
                    "recordId": {
                        "type": "string",
                        "description": "The record ID.\nCannot be used with `name`, `type` and `data`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\nCannot be used with `record_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomainRecord.\n",
                "properties": {
                    "data": {
                        "type": "string"
                    },
                    "dnsZone": {
                        "type": "string"
                    },
                    "geoIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordGeoIp:getDomainRecordGeoIp"
                        },
                        "description": "Dynamic record base on user geolocalisation (More information about dynamic records)\n"
                    },
                    "httpServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordHttpService:getDomainRecordHttpService"
                        },
                        "description": "Dynamic record base on URL resolve (More information about dynamic records)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keepEmptyZone": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the record (mostly used with an `MX` record)\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "recordId": {
                        "type": "string"
                    },
                    "rootZone": {
                        "type": "boolean"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time To Live of the record in seconds.\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "views": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordView:getDomainRecordView"
                        },
                        "description": "Dynamic record based on the client’s (resolver) subnet (More information about dynamic records)\n"
                    },
                    "weighteds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordWeighted:getDomainRecordWeighted"
                        },
                        "description": "Dynamic record base on IP weights (More information about dynamic records)\n"
                    }
                },
                "type": "object",
                "required": [
                    "geoIps",
                    "httpServices",
                    "keepEmptyZone",
                    "priority",
                    "projectId",
                    "rootZone",
                    "ttl",
                    "views",
                    "weighteds",
                    "id"
                ]
            }
        },
        "scaleway:index/getDomainZone:getDomainZone": {
            "description": "Gets information about a domain zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get zone\nconst main = pulumi.output(scaleway.getDomainZone({\n    domain: \"scaleway-terraform.com\",\n    subdomain: \"test\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_domain_zone(domain=\"scaleway-terraform.com\",\n    subdomain=\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetDomainZone.Invoke(new()\n    {\n        Domain = \"scaleway-terraform.com\",\n        Subdomain = \"test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupDomainZone(ctx, \u0026GetDomainZoneArgs{\n\t\t\tDomain:    pulumi.StringRef(\"scaleway-terraform.com\"),\n\t\t\tSubdomain: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDomainZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getDomainZone(GetDomainZoneArgs.builder()\n            .domain(\"scaleway-terraform.com\")\n            .subdomain(\"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getDomainZone\n      Arguments:\n        domain: scaleway-terraform.com\n        subdomain: test\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainZone.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The domain where the DNS zone will be created.\n"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "The subdomain(zone name) to create in the domain.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomainZone.\n",
                "properties": {
                    "domain": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "Message\n"
                    },
                    "ns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer list for zone.\n"
                    },
                    "nsDefaults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer default list for zone.\n"
                    },
                    "nsMasters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NameServer master list for zone.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "The domain zone status.\n"
                    },
                    "subdomain": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the DNS zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "message",
                    "ns",
                    "nsDefaults",
                    "nsMasters",
                    "projectId",
                    "status",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getFlexibleIp:getFlexibleIp": {
            "description": "Gets information about a Flexible IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by IP ID\nconst myIp = pulumi.output(scaleway.getFlexibleIp({\n    ipId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetFlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myIp = ScalewayFunctions.getFlexibleIp(GetFlexibleIpArgs.builder()\n            .ipId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myIp:\n    fn::invoke:\n      Function: scaleway:getFlexibleIp\n      Arguments:\n        ipId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFlexibleIp.\n",
                "properties": {
                    "flexibleIpId": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFlexibleIp.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "flexibleIpId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "(Defaults to provider `organization_id`) The ID of the organization the IP is in.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this IP.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The associated server ID if any\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "macAddress",
                    "organizationId",
                    "projectId",
                    "reverse",
                    "serverId",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getFunction:getFunction": {
            "inputs": {
                "description": "A collection of arguments for invoking getFunction.\n",
                "properties": {
                    "functionId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFunction.\n",
                "properties": {
                    "cpuLimit": {
                        "type": "integer"
                    },
                    "deploy": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "functionId": {
                        "type": "string"
                    },
                    "handler": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxScale": {
                        "type": "integer"
                    },
                    "memoryLimit": {
                        "type": "integer"
                    },
                    "minScale": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privacy": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "runtime": {
                        "type": "string"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "timeout": {
                        "type": "integer"
                    },
                    "zipFile": {
                        "type": "string"
                    },
                    "zipHash": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cpuLimit",
                    "deploy",
                    "description",
                    "domainName",
                    "environmentVariables",
                    "handler",
                    "maxScale",
                    "memoryLimit",
                    "minScale",
                    "namespaceId",
                    "organizationId",
                    "privacy",
                    "projectId",
                    "region",
                    "runtime",
                    "secretEnvironmentVariables",
                    "timeout",
                    "zipFile",
                    "zipHash",
                    "id"
                ]
            }
        },
        "scaleway:index/getFunctionNamespace:getFunctionNamespace": {
            "description": "Gets information about a function namespace.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by namespace ID\nconst myNamespace = pulumi.output(scaleway.getFunctionNamespace({\n    namespaceId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_namespace = scaleway.get_function_namespace(namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myNamespace = Scaleway.GetFunctionNamespace.Invoke(new()\n    {\n        NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupFunctionNamespace(ctx, \u0026GetFunctionNamespaceArgs{\n\t\t\tNamespaceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetFunctionNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myNamespace = ScalewayFunctions.getFunctionNamespace(GetFunctionNamespaceArgs.builder()\n            .namespaceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myNamespace:\n    fn::invoke:\n      Function: scaleway:getFunctionNamespace\n      Arguments:\n        namespaceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The namespace name.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionNamespace.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "environmentVariables",
                    "organizationId",
                    "projectId",
                    "registryEndpoint",
                    "registryNamespaceId",
                    "secretEnvironmentVariables",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceImage:getInstanceImage": {
            "description": "Gets information about an instance image.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by image id\nconst myImage = pulumi.output(scaleway.getInstanceImage({\n    imageId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_instance_image(image_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myImage = Scaleway.GetInstanceImage.Invoke(new()\n    {\n        ImageId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupInstanceImage(ctx, \u0026GetInstanceImageArgs{\n\t\t\tImageId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myImage = ScalewayFunctions.getInstanceImage(GetInstanceImageArgs.builder()\n            .imageId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myImage:\n    fn::invoke:\n      Function: scaleway:getInstanceImage\n      Arguments:\n        imageId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceImage.\n",
                "properties": {
                    "architecture": {
                        "type": "string",
                        "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image id. Only one of `name` and `image_id` should be specified.\n"
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "Use the latest image ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The image name. Only one of `name` and `image_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the image exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceImage.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the additional volumes in this image.\n"
                    },
                    "architecture": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date of the image creation.\n"
                    },
                    "defaultBootscriptId": {
                        "type": "string",
                        "description": "ID of the default bootscript for this image.\n"
                    },
                    "fromServerId": {
                        "type": "string",
                        "description": "ID of the server the image if based from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "modificationDate": {
                        "type": "string",
                        "description": "Date of image latest update.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the image is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Set to `true` if the image is public.\n"
                    },
                    "rootVolumeId": {
                        "type": "string",
                        "description": "ID of the root volume in this image.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the image. Possible values are: `available`, `creating` or `error`.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "additionalVolumeIds",
                    "creationDate",
                    "defaultBootscriptId",
                    "fromServerId",
                    "modificationDate",
                    "organizationId",
                    "projectId",
                    "public",
                    "rootVolumeId",
                    "state",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceIp:getInstanceIp": {
            "description": "Gets information about an instance IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by ID\nconst myIp = pulumi.output(scaleway.getInstanceIp({\n    id: \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_ip = scaleway.get_instance_ip(id=\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myIp = Scaleway.GetInstanceIp.Invoke(new()\n    {\n        Id = \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupInstanceIp(ctx, \u0026GetInstanceIpArgs{\n\t\t\tId: pulumi.StringRef(\"fr-par-1/11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myIp = ScalewayFunctions.getInstanceIp(GetInstanceIpArgs.builder()\n            .id(\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myIp:\n    fn::invoke:\n      Function: scaleway:getInstanceIp\n      Arguments:\n        id: fr-par-1/11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 address to retrieve\nOnly one of `address` and `id` should be specified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the IP address to retrieve\nOnly one of `address` and `id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the IP.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the IP is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse dns attached to this IP\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationId",
                    "projectId",
                    "reverse",
                    "serverId",
                    "tags",
                    "zone"
                ]
            }
        },
        "scaleway:index/getInstanceSecurityGroup:getInstanceSecurityGroup": {
            "description": "Gets information about a Security Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by security group id\nconst myKey = pulumi.output(scaleway.getInstanceSecurityGroup({\n    securityGroupId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_instance_security_group(security_group_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetInstanceSecurityGroup.Invoke(new()\n    {\n        SecurityGroupId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupInstanceSecurityGroup(ctx, \u0026GetInstanceSecurityGroupArgs{\n\t\t\tSecurityGroupId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceSecurityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getInstanceSecurityGroup(GetInstanceSecurityGroupArgs.builder()\n            .securityGroupId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getInstanceSecurityGroup\n      Arguments:\n        securityGroupId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceSecurityGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The security group name. Only one of `name` and `security_group_id` should be specified.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group id. Only one of `name` and `security_group_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the security group exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceSecurityGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean"
                    },
                    "externalRules": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the security group is associated with.\n"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the security group is associated with.\n"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "stateful": {
                        "type": "boolean"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "enableDefaultSecurity",
                    "externalRules",
                    "inboundDefaultPolicy",
                    "inboundRules",
                    "organizationId",
                    "outboundDefaultPolicy",
                    "outboundRules",
                    "projectId",
                    "stateful",
                    "tags",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceServer:getInstanceServer": {
            "description": "Gets information about an instance server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by server id\nconst myKey = pulumi.output(scaleway.getInstanceServer({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_instance_server(server_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetInstanceServer.Invoke(new()\n    {\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupInstanceServer(ctx, \u0026GetInstanceServerArgs{\n\t\t\tServerId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getInstanceServer(GetInstanceServerArgs.builder()\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getInstanceServer\n      Arguments:\n        serverId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceServer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server id. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceServer.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server.\n"
                    },
                    "bootType": {
                        "type": "string"
                    },
                    "bootscriptId": {
                        "type": "string"
                    },
                    "cloudInit": {
                        "type": "string",
                        "description": "The cloud init script associated with this server.\n"
                    },
                    "enableDynamicIp": {
                        "type": "boolean",
                        "description": "True is dynamic IP in enable on the server.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Determines if IPv6 is enabled for the server.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "The UUID and the label of the base image used by the server.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the server is associated with.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                    },
                    "placementGroupPolicyRespected": {
                        "type": "boolean",
                        "description": "True when the placement group policy is respected.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Scaleway internal IP address of the server.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerPrivateNetwork:getInstanceServerPrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the server is associated with.\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IPv4 address of the server.\n"
                    },
                    "rootVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerRootVolume:getInstanceServerRootVolume"
                        },
                        "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\n"
                    },
                    "userData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The user data associated with the server.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "additionalVolumeIds",
                    "bootType",
                    "bootscriptId",
                    "cloudInit",
                    "enableDynamicIp",
                    "enableIpv6",
                    "image",
                    "ipId",
                    "ipv6Address",
                    "ipv6Gateway",
                    "ipv6PrefixLength",
                    "organizationId",
                    "placementGroupId",
                    "placementGroupPolicyRespected",
                    "privateIp",
                    "privateNetworks",
                    "projectId",
                    "publicIp",
                    "rootVolumes",
                    "securityGroupId",
                    "state",
                    "tags",
                    "type",
                    "userData",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceServers:getInstanceServers": {
            "description": "Gets information about multiple instance servers.\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Find servers by name and zone\nconst myKey = pulumi.output(scaleway.getInstanceServers({\n    name: \"myserver\",\n    zone: \"fr-par-2\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_instance_servers(name=\"myserver\",\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetInstanceServers.Invoke(new()\n    {\n        Name = \"myserver\",\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.GetInstanceServers(ctx, \u0026GetInstanceServersArgs{\n\t\t\tName: pulumi.StringRef(\"myserver\"),\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceServersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getInstanceServers(GetInstanceServersArgs.builder()\n            .name(\"myserver\")\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getInstanceServers\n      Arguments:\n        name: myserver\n        zone: fr-par-2\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceServers.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name used as filter. Servers with a name like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the server is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags used as filter. Servers with these exact tags are listed.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which servers exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceServers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the server is associated with.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServersServer:getInstanceServersServer"
                        },
                        "description": "List of found servers\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone in which the server is.\n"
                    }
                },
                "type": "object",
                "required": [
                    "organizationId",
                    "projectId",
                    "servers",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceSnapshot:getInstanceSnapshot": {
            "description": "Gets information about an instance snapshot.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by snapshot name\nconst byName = pulumi.output(scaleway.getInstanceSnapshot({\n    name: \"my-snapshot-name\",\n}));\n// Get info by snapshot ID\nconst byId = pulumi.output(scaleway.getInstanceSnapshot({\n    snapshotId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_instance_snapshot(name=\"my-snapshot-name\")\nby_id = scaleway.get_instance_snapshot(snapshot_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetInstanceSnapshot.Invoke(new()\n    {\n        Name = \"my-snapshot-name\",\n    });\n\n    var byId = Scaleway.GetInstanceSnapshot.Invoke(new()\n    {\n        SnapshotId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupInstanceSnapshot(ctx, \u0026GetInstanceSnapshotArgs{\n\t\t\tName: pulumi.StringRef(\"my-snapshot-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupInstanceSnapshot(ctx, \u0026GetInstanceSnapshotArgs{\n\t\t\tSnapshotId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getInstanceSnapshot(GetInstanceSnapshotArgs.builder()\n            .name(\"my-snapshot-name\")\n            .build());\n\n        final var byId = ScalewayFunctions.getInstanceSnapshot(GetInstanceSnapshotArgs.builder()\n            .snapshotId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getInstanceSnapshot\n      Arguments:\n        name: my-snapshot-name\n  byId:\n    fn::invoke:\n      Function: scaleway:getInstanceSnapshot\n      Arguments:\n        snapshotId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceSnapshot.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The snapshot name.\nOnly one of `name` and `snapshot_id` should be specified.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "The snapshot id.\nOnly one of `name` and `snapshot_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the snapshot exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceSnapshot.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSnapshotImport:getInstanceSnapshotImport"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "imports",
                    "organizationId",
                    "projectId",
                    "sizeInGb",
                    "tags",
                    "type",
                    "volumeId",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceVolume:getInstanceVolume": {
            "description": "Gets information about an instance volume.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by volume ID\nconst myVolume = pulumi.output(scaleway.getInstanceVolume({\n    volumeId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_volume = scaleway.get_instance_volume(volume_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myVolume = Scaleway.GetInstanceVolume.Invoke(new()\n    {\n        VolumeId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupInstanceVolume(ctx, \u0026GetInstanceVolumeArgs{\n\t\t\tVolumeId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myVolume = ScalewayFunctions.getInstanceVolume(GetInstanceVolumeArgs.builder()\n            .volumeId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myVolume:\n    fn::invoke:\n      Function: scaleway:getInstanceVolume\n      Arguments:\n        volumeId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceVolume.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The volume name.\nOnly one of `name` and `volume_id` should be specified.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The volume id.\nOnly one of `name` and `volume_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the volume exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceVolume.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string"
                    },
                    "fromVolumeId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the volume is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fromSnapshotId",
                    "fromVolumeId",
                    "organizationId",
                    "projectId",
                    "serverId",
                    "sizeInGb",
                    "tags",
                    "type",
                    "id"
                ]
            }
        },
        "scaleway:index/getIotDevice:getIotDevice": {
            "description": "Gets information about an IOT Device.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by device ID\nconst myDevice = pulumi.output(scaleway.getIotDevice({\n    deviceId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_device = scaleway.get_iot_device(device_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDevice = Scaleway.GetIotDevice.Invoke(new()\n    {\n        DeviceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupIotDevice(ctx, \u0026GetIotDeviceArgs{\n\t\t\tDeviceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIotDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDevice = ScalewayFunctions.getIotDevice(GetIotDeviceArgs.builder()\n            .deviceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDevice:\n    fn::invoke:\n      Function: scaleway:getIotDevice\n      Arguments:\n        deviceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIotDevice.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "The device ID.\nOnly one of the `name` and `device_id` should be specified.\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The hub ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Hub.\nOnly one of the `name` and `device_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the hub exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIotDevice.\n",
                "properties": {
                    "allowInsecure": {
                        "type": "boolean"
                    },
                    "allowMultipleConnections": {
                        "type": "boolean"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getIotDeviceCertificate:getIotDeviceCertificate"
                        }
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "hubId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isConnected": {
                        "type": "boolean"
                    },
                    "lastActivityAt": {
                        "type": "string"
                    },
                    "messageFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getIotDeviceMessageFilter:getIotDeviceMessageFilter"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "allowInsecure",
                    "allowMultipleConnections",
                    "certificates",
                    "createdAt",
                    "description",
                    "hubId",
                    "isConnected",
                    "lastActivityAt",
                    "messageFilters",
                    "status",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getIotHub:getIotHub": {
            "description": "Gets information about an IOT Hub.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by hub ID\nconst myHub = pulumi.output(scaleway.getIotHub({\n    hubId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_hub = scaleway.get_iot_hub(hub_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myHub = Scaleway.GetIotHub.Invoke(new()\n    {\n        HubId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupIotHub(ctx, \u0026GetIotHubArgs{\n\t\t\tHubId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIotHubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myHub = ScalewayFunctions.getIotHub(GetIotHubArgs.builder()\n            .hubId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myHub:\n    fn::invoke:\n      Function: scaleway:getIotHub\n      Arguments:\n        hubId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIotHub.\n",
                "properties": {
                    "hubId": {
                        "type": "string",
                        "description": "The Hub ID.\nOnly one of the `name` and `hub_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Hub.\nOnly one of the `name` and `hub_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the hub exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIotHub.\n",
                "properties": {
                    "connectedDeviceCount": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "deviceAutoProvisioning": {
                        "type": "boolean"
                    },
                    "deviceCount": {
                        "type": "integer"
                    },
                    "disableEvents": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "eventsTopicPrefix": {
                        "type": "string"
                    },
                    "hubCa": {
                        "type": "string"
                    },
                    "hubCaChallenge": {
                        "type": "string"
                    },
                    "hubId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "productPlan": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "connectedDeviceCount",
                    "createdAt",
                    "deviceAutoProvisioning",
                    "deviceCount",
                    "disableEvents",
                    "enabled",
                    "endpoint",
                    "eventsTopicPrefix",
                    "hubCa",
                    "hubCaChallenge",
                    "organizationId",
                    "productPlan",
                    "projectId",
                    "status",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getKubernetesCluster:getKubernetesCluster": {
            "description": "Gets information about a Kubernetes Cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by cluster id\nconst myKey = pulumi.output(scaleway.getKubernetesCluster({\n    clusterId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_kubernetes_cluster(cluster_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetKubernetesCluster.Invoke(new()\n    {\n        ClusterId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupKubernetesCluster(ctx, \u0026GetKubernetesClusterArgs{\n\t\t\tClusterId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetKubernetesClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getKubernetesCluster(GetKubernetesClusterArgs.builder()\n            .clusterId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getKubernetesCluster\n      Arguments:\n        clusterId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID. Only one of `name` and `cluster_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster name. Only one of `name` and `cluster_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the cluster exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesCluster.\n",
                "properties": {
                    "admissionPlugins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) enabled on the cluster.\n"
                    },
                    "apiserverCertSans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The URL of the Kubernetes API server.\n"
                    },
                    "autoUpgrades": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterAutoUpgrade:getKubernetesClusterAutoUpgrade"
                        },
                        "description": "The auto upgrade configuration.\n"
                    },
                    "autoscalerConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterAutoscalerConfig:getKubernetesClusterAutoscalerConfig"
                        },
                        "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the cluster.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Kubernetes cluster.\n"
                    },
                    "featureGates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) enabled on the cluster.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterKubeconfig:getKubernetesClusterKubeconfig"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "openIdConnectConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterOpenIdConnectConfig:getKubernetesClusterOpenIdConnectConfig"
                        }
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the cluster is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the cluster is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the cluster is.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Kubernetes cluster.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Kubernetes cluster.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the Kubernetes cluster.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the cluster.\n"
                    },
                    "upgradeAvailable": {
                        "type": "boolean",
                        "description": "True if a newer Kubernetes version is available.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the Kubernetes cluster.\n"
                    },
                    "wildcardDns": {
                        "type": "string",
                        "description": "The DNS wildcard that points to all ready nodes.\n"
                    }
                },
                "type": "object",
                "required": [
                    "admissionPlugins",
                    "apiserverCertSans",
                    "apiserverUrl",
                    "autoUpgrades",
                    "autoscalerConfigs",
                    "cni",
                    "createdAt",
                    "description",
                    "featureGates",
                    "kubeconfigs",
                    "openIdConnectConfigs",
                    "organizationId",
                    "projectId",
                    "status",
                    "tags",
                    "type",
                    "updatedAt",
                    "upgradeAvailable",
                    "version",
                    "wildcardDns",
                    "id"
                ]
            }
        },
        "scaleway:index/getKubernetesNodePool:getKubernetesNodePool": {
            "description": "Gets information about a Kubernetes Cluster's Pool.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by pool id\nconst myKey = pulumi.output(scaleway.getKubernetesNodePool({\n    poolId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_kubernetes_node_pool(pool_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myKey = Scaleway.GetKubernetesNodePool.Invoke(new()\n    {\n        PoolId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupKubernetesNodePool(ctx, \u0026GetKubernetesNodePoolArgs{\n\t\t\tPoolId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetKubernetesNodePoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myKey = ScalewayFunctions.getKubernetesNodePool(GetKubernetesNodePoolArgs.builder()\n            .poolId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myKey:\n    fn::invoke:\n      Function: scaleway:getKubernetesNodePool\n      Arguments:\n        poolId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesNodePool.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID. Required when `name` is set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The pool name. Only one of `name` and `pool_id` should be specified. `cluster_id` should be specified with `name`.\n"
                    },
                    "poolId": {
                        "type": "string",
                        "description": "The pool's ID. Only one of `name` and `pool_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the pool exists.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesNodePool.\n",
                "properties": {
                    "autohealing": {
                        "type": "boolean",
                        "description": "True if the autohealing feature is enabled for this pool.\n"
                    },
                    "autoscaling": {
                        "type": "boolean",
                        "description": "True if the autoscaling feature is enabled for this pool.\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "The container runtime of the pool.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the pool.\n"
                    },
                    "currentSize": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kubeletArgs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the node.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The commercial type of the pool instances.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesNodePoolNode:getKubernetesNodePoolNode"
                        },
                        "description": "(List of) The nodes in the default pool.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "[placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool are attached to.\n"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "rootVolumeSizeInGb": {
                        "type": "integer"
                    },
                    "rootVolumeType": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the pool.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the pool.\n"
                    },
                    "upgradePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesNodePoolUpgradePolicy:getKubernetesNodePoolUpgradePolicy"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the pool.\n"
                    },
                    "waitForPoolReady": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autohealing",
                    "autoscaling",
                    "containerRuntime",
                    "createdAt",
                    "currentSize",
                    "kubeletArgs",
                    "maxSize",
                    "minSize",
                    "nodeType",
                    "nodes",
                    "placementGroupId",
                    "rootVolumeSizeInGb",
                    "rootVolumeType",
                    "status",
                    "tags",
                    "updatedAt",
                    "upgradePolicies",
                    "version",
                    "waitForPoolReady",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getLoadbalancer:getLoadbalancer": {
            "description": "Gets information about a Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by name\nconst byName = pulumi.output(scaleway.getLoadbalancer({\n    name: \"foobar\",\n}));\n// Get info by ID\nconst byId = pulumi.output(scaleway.getLoadbalancer({\n    lbId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_loadbalancer(name=\"foobar\")\nby_id = scaleway.get_loadbalancer(lb_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetLoadbalancer.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    var byId = Scaleway.GetLoadbalancer.Invoke(new()\n    {\n        LbId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupLoadbalancer(ctx, \u0026GetLoadbalancerArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupLoadbalancer(ctx, \u0026GetLoadbalancerArgs{\n\t\t\tLbId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getLoadbalancer(GetLoadbalancerArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        final var byId = ScalewayFunctions.getLoadbalancer(GetLoadbalancerArgs.builder()\n            .lbId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getLoadbalancer\n      Arguments:\n        name: foobar\n  byId:\n    fn::invoke:\n      Function: scaleway:getLoadbalancer\n      Arguments:\n        lbId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadbalancer.\n",
                "properties": {
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "releaseIp": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the LB exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadbalancer.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The load-balancer public IP Address.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLoadbalancerPrivateNetwork:getLoadbalancerPrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the LB is associated with.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "releaseIp": {
                        "type": "boolean"
                    },
                    "sslCompatibilityLevel": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the load-balancers.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the load-balancer.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the LB exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "ipAddress",
                    "ipId",
                    "organizationId",
                    "privateNetworks",
                    "projectId",
                    "region",
                    "sslCompatibilityLevel",
                    "tags",
                    "type",
                    "id"
                ]
            }
        },
        "scaleway:index/getLoadbalancerCertificate:getLoadbalancerCertificate": {
            "description": "Get information about Scaleway Load-Balancer Certificates.\n\nThis data source can prove useful when a module accepts an LB Certificate as an input variable and needs to, for example, determine the security of a certificate for your LB Frontend associated with your domain, etc.\n\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api/#certificate-330754).\n\n## Examples\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadbalancerCertificate.\n",
                "properties": {
                    "certificateId": {
                        "type": "string",
                        "description": "The certificate id.\n- Only one of `name` and `certificate_id` should be specified.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this certificate is attached to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate backend.\n- When using a certificate `name` you should specify the `lb-id`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadbalancerCertificate.\n",
                "properties": {
                    "certificateId": {
                        "type": "string"
                    },
                    "commonName": {
                        "type": "string"
                    },
                    "customCertificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLoadbalancerCertificateCustomCertificate:getLoadbalancerCertificateCustomCertificate"
                        }
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "letsencrypts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLoadbalancerCertificateLetsencrypt:getLoadbalancerCertificateLetsencrypt"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "notValidAfter": {
                        "type": "string"
                    },
                    "notValidBefore": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "subjectAlternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "commonName",
                    "customCertificates",
                    "fingerprint",
                    "letsencrypts",
                    "notValidAfter",
                    "notValidBefore",
                    "status",
                    "subjectAlternativeNames",
                    "id"
                ]
            }
        },
        "scaleway:index/getLoadbalancerIp:getLoadbalancerIp": {
            "description": "Gets information about a Load Balancer IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by IP ID\nconst myIp = pulumi.output(scaleway.getLoadbalancerIp({\n    ipId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_ip = scaleway.get_loadbalancer_ip(ip_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myIp = Scaleway.GetLoadbalancerIp.Invoke(new()\n    {\n        IpId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupLoadbalancerIp(ctx, \u0026GetLoadbalancerIpArgs{\n\t\t\tIpId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLoadbalancerIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myIp = ScalewayFunctions.getLoadbalancerIp(GetLoadbalancerIpArgs.builder()\n            .ipId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myIp:\n    fn::invoke:\n      Function: scaleway:getLoadbalancerIp\n      Arguments:\n        ipId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadbalancerIp.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The IP ID.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadbalancerIp.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The associated load-balancer ID if any\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "(Defaults to provider `organization_id`) The ID of the organization the LB IP is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this IP.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "lbId",
                    "organizationId",
                    "projectId",
                    "region",
                    "reverse",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getMarketplaceImage:getMarketplaceImage": {
            "description": "Gets local image ID of an image from its label name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myImage = pulumi.output(scaleway.getMarketplaceImage({\n    label: \"ubuntu_jammy\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_marketplace_image(label=\"ubuntu_jammy\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myImage = Scaleway.GetMarketplaceImage.Invoke(new()\n    {\n        Label = \"ubuntu_jammy\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.GetMarketplaceImage(ctx, \u0026GetMarketplaceImageArgs{\n\t\t\tLabel: \"ubuntu_jammy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetMarketplaceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myImage = ScalewayFunctions.getMarketplaceImage(GetMarketplaceImageArgs.builder()\n            .label(\"ubuntu_jammy\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myImage:\n    fn::invoke:\n      Function: scaleway:getMarketplaceImage\n      Arguments:\n        label: ubuntu_jammy\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMarketplaceImage.\n",
                "properties": {
                    "instanceType": {
                        "type": "string",
                        "description": "The instance type the image is compatible with.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Exact label of the desired image. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find the right `label`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the image exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMarketplaceImage.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getObjectBucket:getObjectBucket": {
            "description": "Gets information about the Bucket.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/object-storage-feature/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {\n    tags: {\n        foo: \"bar\",\n    },\n});\nconst selected = pulumi.output(scaleway.getObjectBucket({\n    name: \"bucket.test.com\",\n}));\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\", tags={\n    \"foo\": \"bar\",\n})\nselected = scaleway.get_object_bucket(name=\"bucket.test.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Tags = \n        {\n            { \"foo\", \"bar\" },\n        },\n    });\n\n    var selected = Scaleway.GetObjectBucket.Invoke(new()\n    {\n        Name = \"bucket.test.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupObjectBucket(ctx, \u0026GetObjectBucketArgs{\n\t\t\tName: pulumi.StringRef(\"bucket.test.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()        \n            .tags(Map.of(\"foo\", \"bar\"))\n            .build());\n\n        final var selected = ScalewayFunctions.getObjectBucket(GetObjectBucketArgs.builder()\n            .name(\"bucket.test.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      tags:\n        foo: bar\nvariables:\n  selected:\n    fn::invoke:\n      Function: scaleway:getObjectBucket\n      Arguments:\n        name: bucket.test.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectBucket.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The bucket name.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Object Storage exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getObjectBucket.\n",
                "properties": {
                    "acl": {
                        "type": "string"
                    },
                    "corsRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getObjectBucketCorsRule:getObjectBucketCorsRule"
                        }
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint URL of the bucket\n"
                    },
                    "forceDestroy": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lifecycleRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getObjectBucketLifecycleRule:getObjectBucketLifecycleRule"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "objectLockEnabled": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "versionings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getObjectBucketVersioning:getObjectBucketVersioning"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "acl",
                    "corsRules",
                    "endpoint",
                    "forceDestroy",
                    "lifecycleRules",
                    "objectLockEnabled",
                    "tags",
                    "versionings",
                    "id"
                ]
            }
        },
        "scaleway:index/getRedisCluster:getRedisCluster": {
            "description": "Gets information about a Redis cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by cluster ID\nconst myCluster = pulumi.output(scaleway.getRedisCluster({\n    clusterId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_cluster = scaleway.get_redis_cluster(cluster_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myCluster = Scaleway.GetRedisCluster.Invoke(new()\n    {\n        ClusterId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupRedisCluster(ctx, \u0026GetRedisClusterArgs{\n\t\t\tClusterId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRedisClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myCluster = ScalewayFunctions.getRedisCluster(GetRedisClusterArgs.builder()\n            .clusterId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myCluster:\n    fn::invoke:\n      Function: scaleway:getRedisCluster\n      Arguments:\n        clusterId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRedisCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The Redis cluster ID.\nOnly one of the `name` and `cluster_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Redis cluster.\nOnly one of the `name` and `cluster_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`region`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRedisCluster.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRedisClusterAcl:getRedisClusterAcl"
                        }
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "clusterSize": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRedisClusterPrivateNetwork:getRedisClusterPrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRedisClusterPublicNetwork:getRedisClusterPublicNetwork"
                        }
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tlsEnabled": {
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "certificate",
                    "clusterSize",
                    "createdAt",
                    "nodeType",
                    "password",
                    "privateNetworks",
                    "projectId",
                    "publicNetworks",
                    "settings",
                    "tags",
                    "tlsEnabled",
                    "updatedAt",
                    "userName",
                    "version",
                    "id"
                ]
            }
        },
        "scaleway:index/getRegistryImage:getRegistryImage": {
            "description": "Gets information about a registry image.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by image ID\nconst myImage = pulumi.output(scaleway.getRegistryImage({\n    imageId: \"11111111-1111-1111-1111-111111111111\",\n    namespaceId: \"11111111-1111-1111-1111-111111111111\", // Optional\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_registry_image(image_id=\"11111111-1111-1111-1111-111111111111\",\n    namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myImage = Scaleway.GetRegistryImage.Invoke(new()\n    {\n        ImageId = \"11111111-1111-1111-1111-111111111111\",\n        NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.GetRegistryImage(ctx, \u0026GetRegistryImageArgs{\n\t\t\tImageId:     pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tNamespaceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRegistryImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myImage = ScalewayFunctions.getRegistryImage(GetRegistryImageArgs.builder()\n            .imageId(\"11111111-1111-1111-1111-111111111111\")\n            .namespaceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myImage:\n    fn::invoke:\n      Function: scaleway:getRegistryImage\n      Arguments:\n        imageId: 11111111-1111-1111-1111-111111111111\n        namespaceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryImage.\n",
                "properties": {
                    "imageId": {
                        "type": "string",
                        "description": "The image ID.\nOnly one of `name` and `image_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The image name.\nOnly one of `name` and `image_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace ID in which the image is.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the image is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the image exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the registry image\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryImage.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the image is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the registry image.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the registry image\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The privacy policy of the registry image.\n"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId",
                    "organizationId",
                    "projectId",
                    "region",
                    "size",
                    "tags",
                    "visibility",
                    "id"
                ]
            }
        },
        "scaleway:index/getRegistryNamespace:getRegistryNamespace": {
            "description": "Gets information about a registry namespace.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by namespace ID\nconst myNamespace = pulumi.output(scaleway.getRegistryNamespace({\n    namespaceId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_namespace = scaleway.get_registry_namespace(namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myNamespace = Scaleway.GetRegistryNamespace.Invoke(new()\n    {\n        NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = scaleway.LookupRegistryNamespace(ctx, \u0026GetRegistryNamespaceArgs{\n\t\t\tNamespaceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetRegistryNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myNamespace = ScalewayFunctions.getRegistryNamespace(GetRegistryNamespaceArgs.builder()\n            .namespaceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myNamespace:\n    fn::invoke:\n      Function: scaleway:getRegistryNamespace\n      Arguments:\n        namespaceId: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The namespace name.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryNamespace.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the Registry Namespace.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "The Namespace Privacy Policy: whether or not the images are public.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "endpoint",
                    "isPublic",
                    "organizationId",
                    "projectId",
                    "id"
                ]
            }
        },
        "scaleway:index/getTemDomain:getTemDomain": {
            "description": "Gets information about a transactional email domain.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by domain ID\nconst myDomain = pulumi.output(scaleway.getTemDomain({\n    id: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetTemDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDomain = ScalewayFunctions.getTemDomain(GetTemDomainArgs.builder()\n            .id(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDomain:\n    fn::invoke:\n      Function: scaleway:getTemDomain\n      Arguments:\n        id: 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTemDomain.\n",
                "properties": {
                    "domainId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The domain name.\nOnly one of `name` and `id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the domain exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTemDomain.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the Transaction Email Domain's creation (RFC 3339 format).\n"
                    },
                    "dkimConfig": {
                        "type": "string",
                        "description": "The DKIM public key, as should be recorded in the DNS zone.\n"
                    },
                    "domainId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Transaction Email Domain.\n"
                    },
                    "lastError": {
                        "type": "string",
                        "description": "The error message if the last check failed.\n"
                    },
                    "lastValidAt": {
                        "type": "string",
                        "description": "The date and time the domain was last found to be valid (RFC 3339 format).\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nextCheckAt": {
                        "type": "string",
                        "description": "The date and time of the next scheduled check (RFC 3339 format).\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "revokedAt": {
                        "type": "string",
                        "description": "The date and time of the revocation of the domain (RFC 3339 format).\n"
                    },
                    "spfConfig": {
                        "type": "string",
                        "description": "The snippet of the SPF record that should be registered in the DNS zone.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Transaction Email Domain.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "dkimConfig",
                    "id",
                    "lastError",
                    "lastValidAt",
                    "nextCheckAt",
                    "projectId",
                    "revokedAt",
                    "spfConfig",
                    "status"
                ]
            }
        },
        "scaleway:index/getVpcGatewayNetwork:getVpcGatewayNetwork": {
            "description": "Gets information about a gateway network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: scaleway_vpc_public_gateway.pg01.id,\n    privateNetworkId: scaleway_vpc_private_network.pn01.id,\n    dhcpId: scaleway_vpc_public_gateway_dhcp.dhcp01.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\nconst byId = scaleway.getVpcGatewayNetworkOutput({\n    gatewayNetworkId: main.id,\n});\nconst byGatewayAndPn = scaleway.getVpcGatewayNetwork({\n    gatewayId: scaleway_vpc_public_gateway.pg01.id,\n    privateNetworkId: scaleway_vpc_private_network.pn01.id,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=scaleway_vpc_public_gateway[\"pg01\"][\"id\"],\n    private_network_id=scaleway_vpc_private_network[\"pn01\"][\"id\"],\n    dhcp_id=scaleway_vpc_public_gateway_dhcp[\"dhcp01\"][\"id\"],\n    cleanup_dhcp=True,\n    enable_masquerade=True)\nby_id = scaleway.get_vpc_gateway_network_output(gateway_network_id=main.id)\nby_gateway_and_pn = scaleway.get_vpc_gateway_network(gateway_id=scaleway_vpc_public_gateway[\"pg01\"][\"id\"],\n    private_network_id=scaleway_vpc_private_network[\"pn01\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = scaleway_vpc_public_gateway.Pg01.Id,\n        PrivateNetworkId = scaleway_vpc_private_network.Pn01.Id,\n        DhcpId = scaleway_vpc_public_gateway_dhcp.Dhcp01.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n    var byId = Scaleway.GetVpcGatewayNetwork.Invoke(new()\n    {\n        GatewayNetworkId = main.Id,\n    });\n\n    var byGatewayAndPn = Scaleway.GetVpcGatewayNetwork.Invoke(new()\n    {\n        GatewayId = scaleway_vpc_public_gateway.Pg01.Id,\n        PrivateNetworkId = scaleway_vpc_private_network.Pn01.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pulumi.Any(scaleway_vpc_public_gateway.Pg01.Id),\n\t\t\tPrivateNetworkId: pulumi.Any(scaleway_vpc_private_network.Pn01.Id),\n\t\t\tDhcpId:           pulumi.Any(scaleway_vpc_public_gateway_dhcp.Dhcp01.Id),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcGatewayNetworkOutput(ctx, GetVpcGatewayNetworkOutputArgs{\n\t\t\tGatewayNetworkId: main.ID(),\n\t\t}, nil)\n\t\t_, err = scaleway.LookupVpcGatewayNetwork(ctx, \u0026GetVpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pulumi.StringRef(scaleway_vpc_public_gateway.Pg01.Id),\n\t\t\tPrivateNetworkId: pulumi.StringRef(scaleway_vpc_private_network.Pn01.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcGatewayNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(scaleway_vpc_public_gateway.pg01().id())\n            .privateNetworkId(scaleway_vpc_private_network.pn01().id())\n            .dhcpId(scaleway_vpc_public_gateway_dhcp.dhcp01().id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n        final var byId = ScalewayFunctions.getVpcGatewayNetwork(GetVpcGatewayNetworkArgs.builder()\n            .gatewayNetworkId(main.id())\n            .build());\n\n        final var byGatewayAndPn = ScalewayFunctions.getVpcGatewayNetwork(GetVpcGatewayNetworkArgs.builder()\n            .gatewayId(scaleway_vpc_public_gateway.pg01().id())\n            .privateNetworkId(scaleway_vpc_private_network.pn01().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${scaleway_vpc_public_gateway.pg01.id}\n      privateNetworkId: ${scaleway_vpc_private_network.pn01.id}\n      dhcpId: ${scaleway_vpc_public_gateway_dhcp.dhcp01.id}\n      cleanupDhcp: true\n      enableMasquerade: true\nvariables:\n  byId:\n    fn::invoke:\n      Function: scaleway:getVpcGatewayNetwork\n      Arguments:\n        gatewayNetworkId: ${main.id}\n  byGatewayAndPn:\n    fn::invoke:\n      Function: scaleway:getVpcGatewayNetwork\n      Arguments:\n        gatewayId: ${scaleway_vpc_public_gateway.pg01.id}\n        privateNetworkId: ${scaleway_vpc_private_network.pn01.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcGatewayNetwork.\n",
                "properties": {
                    "dhcpId": {
                        "type": "string",
                        "description": "ID of the public gateway DHCP config\n"
                    },
                    "enableMasquerade": {
                        "type": "boolean",
                        "description": "If masquerade is enabled on requested network\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "ID of the public gateway the gateway network is linked to\n"
                    },
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "ID of the gateway network.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "ID of the private network the gateway network is linked to\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcGatewayNetwork.\n",
                "properties": {
                    "cleanupDhcp": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dhcpId": {
                        "type": "string"
                    },
                    "enableDhcp": {
                        "type": "boolean"
                    },
                    "enableMasquerade": {
                        "type": "boolean"
                    },
                    "gatewayId": {
                        "type": "string"
                    },
                    "gatewayNetworkId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "staticAddress": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cleanupDhcp",
                    "createdAt",
                    "enableDhcp",
                    "macAddress",
                    "staticAddress",
                    "updatedAt",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPrivateNetwork:getVpcPrivateNetwork": {
            "description": "Gets information about a private network.\n\n{{% examples %}}\n## Example Usage\n\nN/A, the usage will be meaningful in the next releases of VPC.\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPrivateNetwork.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Exact name of the private network.\n"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPrivateNetwork.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "organizationId",
                    "projectId",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGateway:getVpcPublicGateway": {
            "description": "Gets information about a public gateway.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGateway(\"main\", {\n    type: \"VPC-GW-S\",\n    zone: \"nl-ams-1\",\n});\nconst pgTestByName = main.name.apply(name =\u003e scaleway.getVpcPublicGateway({\n    name: name,\n    zone: \"nl-ams-1\",\n}));\nconst pgTestById = main.id.apply(id =\u003e scaleway.getVpcPublicGateway({\n    publicGatewayId: id,\n}));\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGateway(\"main\",\n    type=\"VPC-GW-S\",\n    zone=\"nl-ams-1\")\npg_test_by_name = scaleway.get_vpc_public_gateway_output(name=main.name,\n    zone=\"nl-ams-1\")\npg_test_by_id = scaleway.get_vpc_public_gateway_output(public_gateway_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGateway(\"main\", new()\n    {\n        Type = \"VPC-GW-S\",\n        Zone = \"nl-ams-1\",\n    });\n\n    var pgTestByName = Scaleway.GetVpcPublicGateway.Invoke(new()\n    {\n        Name = main.Name,\n        Zone = \"nl-ams-1\",\n    });\n\n    var pgTestById = Scaleway.GetVpcPublicGateway.Invoke(new()\n    {\n        PublicGatewayId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tZone: pulumi.String(\"nl-ams-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayOutput(ctx, GetVpcPublicGatewayOutputArgs{\n\t\t\tName: main.Name,\n\t\t\tZone: pulumi.String(\"nl-ams-1\"),\n\t\t}, nil)\n\t\t_ = scaleway.LookupVpcPublicGatewayOutput(ctx, GetVpcPublicGatewayOutputArgs{\n\t\t\tPublicGatewayId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGateway(\"main\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .zone(\"nl-ams-1\")\n            .build());\n\n        final var pgTestByName = ScalewayFunctions.getVpcPublicGateway(GetVpcPublicGatewayArgs.builder()\n            .name(main.name())\n            .zone(\"nl-ams-1\")\n            .build());\n\n        final var pgTestById = ScalewayFunctions.getVpcPublicGateway(GetVpcPublicGatewayArgs.builder()\n            .publicGatewayId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n      zone: nl-ams-1\nvariables:\n  pgTestByName:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGateway\n      Arguments:\n        name: ${main.name}\n        zone: nl-ams-1\n  pgTestById:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGateway\n      Arguments:\n        publicGatewayId: ${main.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGateway.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Exact name of the public gateway.\n"
                    },
                    "publicGatewayId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe public gateway should be created.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGateway.\n",
                "properties": {
                    "bastionEnabled": {
                        "type": "boolean"
                    },
                    "bastionPort": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "enableSmtp": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicGatewayId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "upstreamDnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bastionEnabled",
                    "bastionPort",
                    "createdAt",
                    "enableSmtp",
                    "ipId",
                    "organizationId",
                    "projectId",
                    "tags",
                    "type",
                    "updatedAt",
                    "upstreamDnsServers",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGatewayDhcp:getVpcPublicGatewayDhcp": {
            "description": "Gets information about a public gateway DHCP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayDhcp(\"main\", {\n    subnet: \"192.168.0.0/24\",\n});\nconst dhcpById = main.id.apply(id =\u003e scaleway.getVpcPublicGatewayDhcp({\n    dhcpId: id,\n}));\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.0.0/24\")\ndhcp_by_id = scaleway.get_vpc_public_gateway_dhcp_output(dhcp_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayDhcp(\"main\", new()\n    {\n        Subnet = \"192.168.0.0/24\",\n    });\n\n    var dhcpById = Scaleway.GetVpcPublicGatewayDhcp.Invoke(new()\n    {\n        DhcpId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.0.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayDhcpOutput(ctx, GetVpcPublicGatewayDhcpOutputArgs{\n\t\t\tDhcpId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayDhcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayDhcp(\"main\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.0.0/24\")\n            .build());\n\n        final var dhcpById = ScalewayFunctions.getVpcPublicGatewayDhcp(GetVpcPublicGatewayDhcpArgs.builder()\n            .dhcpId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.0.0/24\nvariables:\n  dhcpById:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGatewayDhcp\n      Arguments:\n        dhcpId: ${main.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayDhcp.\n",
                "properties": {
                    "dhcpId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dhcpId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayDhcp.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dhcpId": {
                        "type": "string"
                    },
                    "dnsLocalName": {
                        "type": "string"
                    },
                    "dnsSearches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dnsServersOverrides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "enableDynamic": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "poolHigh": {
                        "type": "string"
                    },
                    "poolLow": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "pushDefaultRoute": {
                        "type": "boolean"
                    },
                    "pushDnsServer": {
                        "type": "boolean"
                    },
                    "rebindTimer": {
                        "type": "integer"
                    },
                    "renewTimer": {
                        "type": "integer"
                    },
                    "subnet": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "validLifetime": {
                        "type": "integer"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "createdAt",
                    "dhcpId",
                    "dnsLocalName",
                    "dnsSearches",
                    "dnsServersOverrides",
                    "enableDynamic",
                    "organizationId",
                    "poolHigh",
                    "poolLow",
                    "projectId",
                    "pushDefaultRoute",
                    "pushDnsServer",
                    "rebindTimer",
                    "renewTimer",
                    "subnet",
                    "updatedAt",
                    "validLifetime",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGatewayDhcpReservation:getVpcPublicGatewayDhcpReservation": {
            "description": "Gets information about a dhcp entries. For further information please check the\nAPI [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-entries-e40fb6)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayDhcpReservation.\n",
                "properties": {
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "The ID of the owning GatewayNetwork.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address of the reservation to retrieve\n"
                    },
                    "reservationId": {
                        "type": "string",
                        "description": "The ID of the Reservation to retrieve\n"
                    },
                    "waitForDhcp": {
                        "type": "boolean",
                        "description": "Boolean to wait for mac_address to exist in dhcp\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe image exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayDhcpReservation.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway DHCP config.\n"
                    },
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "The ID of the owning GatewayNetwork.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The Hostname of the client machine.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address to give to the machine (IP address).\n"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "reservationId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are reservation and lease.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway DHCP config.\n"
                    },
                    "waitForDhcp": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "hostname",
                    "ipAddress",
                    "type",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGatewayIp:getVpcPublicGatewayIp": {
            "description": "Gets information about a public gateway IP.\n\nFor further information please check the API [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#get-66f0c0)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayIp(\"main\", {});\nconst ipById = main.id.apply(id =\u003e scaleway.getVpcPublicGatewayIp({\n    ipId: id,\n}));\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayIp(\"main\")\nip_by_id = scaleway.get_vpc_public_gateway_ip_output(ip_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayIp(\"main\");\n\n    var ipById = Scaleway.GetVpcPublicGatewayIp.Invoke(new()\n    {\n        IpId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayIpOutput(ctx, GetVpcPublicGatewayIpOutputArgs{\n\t\t\tIpId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayIp(\"main\");\n\n        final var ipById = ScalewayFunctions.getVpcPublicGatewayIp(GetVpcPublicGatewayIpArgs.builder()\n            .ipId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayIp\nvariables:\n  ipById:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGatewayIp\n      Arguments:\n        ipId: ${main.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayIp.\n",
                "properties": {
                    "ipId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayIp.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "createdAt",
                    "organizationId",
                    "projectId",
                    "reverse",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicPatRule:getVpcPublicPatRule": {
            "description": "Gets information about a public gateway PAT rule. For further information please check the\nAPI [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#get-8faeea)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@lbrlabs/pulumi-scaleway\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {type: \"VPC-GW-S\"});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {subnet: \"192.168.1.0/24\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst gn01 = new scaleway.VpcGatewayNetwork(\"gn01\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n}, {\n    dependsOn: [pn01],\n});\nconst mainVpcPublicGatewayPatRule = new scaleway.VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\", {\n    gatewayId: pg01.id,\n    privateIp: dhcp01.address,\n    privatePort: 42,\n    publicPort: 42,\n    protocol: \"both\",\n}, {\n    dependsOn: [\n        gn01,\n        pn01,\n    ],\n});\nconst mainVpcPublicPatRule = scaleway.getVpcPublicPatRuleOutput({\n    patRuleId: mainVpcPublicGatewayPatRule.id,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_scaleway as scaleway\nimport pulumi_scaleway as scaleway\n\npg01 = scaleway.VpcPublicGateway(\"pg01\", type=\"VPC-GW-S\")\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\", subnet=\"192.168.1.0/24\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\ngn01 = scaleway.VpcGatewayNetwork(\"gn01\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True,\n    opts=pulumi.ResourceOptions(depends_on=[pn01]))\nmain_vpc_public_gateway_pat_rule = scaleway.VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\",\n    gateway_id=pg01.id,\n    private_ip=dhcp01.address,\n    private_port=42,\n    public_port=42,\n    protocol=\"both\",\n    opts=pulumi.ResourceOptions(depends_on=[\n            gn01,\n            pn01,\n        ]))\nmain_vpc_public_pat_rule = scaleway.get_vpc_public_pat_rule_output(pat_rule_id=main_vpc_public_gateway_pat_rule.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Scaleway = Lbrlabs.PulumiPackage.Scaleway;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Type = \"VPC-GW-S\",\n    });\n\n    var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\");\n\n    var gn01 = new Scaleway.VpcGatewayNetwork(\"gn01\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        DhcpId = dhcp01.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            pn01,\n        },\n    });\n\n    var mainVpcPublicGatewayPatRule = new Scaleway.VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateIp = dhcp01.Address,\n        PrivatePort = 42,\n        PublicPort = 42,\n        Protocol = \"both\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            gn01,\n            pn01,\n        },\n    });\n\n    var mainVpcPublicPatRule = Scaleway.GetVpcPublicPatRule.Invoke(new()\n    {\n        PatRuleId = mainVpcPublicGatewayPatRule.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgn01, err := scaleway.NewVpcGatewayNetwork(ctx, \"gn01\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpn01,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayPatRule, err := scaleway.NewVpcPublicGatewayPatRule(ctx, \"mainVpcPublicGatewayPatRule\", \u0026scaleway.VpcPublicGatewayPatRuleArgs{\n\t\t\tGatewayId:   pg01.ID(),\n\t\t\tPrivateIp:   dhcp01.Address,\n\t\t\tPrivatePort: pulumi.Int(42),\n\t\t\tPublicPort:  pulumi.Int(42),\n\t\t\tProtocol:    pulumi.String(\"both\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tgn01,\n\t\t\tpn01,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.GetVpcPublicPatRuleOutput(ctx, GetVpcPublicPatRuleOutputArgs{\n\t\t\tPatRuleId: mainVpcPublicGatewayPatRule.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRule;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRuleArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicPatRuleArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()        \n            .type(\"VPC-GW-S\")\n            .build());\n\n        var dhcp01 = new VpcPublicGatewayDhcp(\"dhcp01\", VpcPublicGatewayDhcpArgs.builder()        \n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\");\n\n        var gn01 = new VpcGatewayNetwork(\"gn01\", VpcGatewayNetworkArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .dhcpId(dhcp01.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(pn01)\n                .build());\n\n        var mainVpcPublicGatewayPatRule = new VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\", VpcPublicGatewayPatRuleArgs.builder()        \n            .gatewayId(pg01.id())\n            .privateIp(dhcp01.address())\n            .privatePort(42)\n            .publicPort(42)\n            .protocol(\"both\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    gn01,\n                    pn01)\n                .build());\n\n        final var mainVpcPublicPatRule = ScalewayFunctions.getVpcPublicPatRule(GetVpcPublicPatRuleArgs.builder()\n            .patRuleId(mainVpcPublicGatewayPatRule.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      type: VPC-GW-S\n  dhcp01:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n  gn01:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      dhcpId: ${dhcp01.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n    options:\n      dependson:\n        - ${pn01}\n  mainVpcPublicGatewayPatRule:\n    type: scaleway:VpcPublicGatewayPatRule\n    properties:\n      gatewayId: ${pg01.id}\n      privateIp: ${dhcp01.address}\n      privatePort: 42\n      publicPort: 42\n      protocol: both\n    options:\n      dependson:\n        - ${gn01}\n        - ${pn01}\nvariables:\n  mainVpcPublicPatRule:\n    fn::invoke:\n      Function: scaleway:getVpcPublicPatRule\n      Arguments:\n        patRuleId: ${mainVpcPublicGatewayPatRule.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicPatRule.\n",
                "properties": {
                    "patRuleId": {
                        "type": "string",
                        "description": "The ID of the PAT rule to retrieve\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe image exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "patRuleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicPatRule.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the public gateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "patRuleId": {
                        "type": "string"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Private IP to forward data to (IP address).\n"
                    },
                    "privatePort": {
                        "type": "integer",
                        "description": "The Private port to translate to.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                    },
                    "publicPort": {
                        "type": "integer",
                        "description": "The Public port to listen on.\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "gatewayId",
                    "organizationId",
                    "patRuleId",
                    "privateIp",
                    "privatePort",
                    "protocol",
                    "publicPort",
                    "updatedAt",
                    "id"
                ]
            }
        }
    }
}