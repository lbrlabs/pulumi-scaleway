{
    "name": "scaleway",
    "description": "A Pulumi package for creating and managing scaleway cloud resources.",
    "keywords": [
        "pulumi",
        "scaleway"
    ],
    "homepage": "https://leebriggs.co.uk/projects#pulumi-scaleway",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`scaleway` Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway).",
    "repository": "https://github.com/jaxxstorm/pulumi-scaleway",
    "pluginDownloadURL": "https://dl.briggs.work/pulumi/releases/plugins",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_PROJECT_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                }
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                }
            }
        },
        "defaults": [
            "region",
            "zone"
        ]
    },
    "types": {
        "scaleway:index/BaremetalServerIp:BaremetalServerIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse of the IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id",
                        "reverse",
                        "version"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A simple text describing this rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Name of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "IP of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Name of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "IP of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipNet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pnId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipNet",
                "pnId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "ipNet",
                        "name",
                        "pnId",
                        "port",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseInstanceReadReplica:DatabaseInstanceReadReplica": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordGeoIpMatch:DomainRecordGeoIpMatch"
                    },
                    "description": "The list of matches. *(Can be more than 1)*\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "matches"
            ]
        },
        "scaleway:index/DomainRecordGeoIpMatch:DomainRecordGeoIpMatch": {
            "properties": {
                "continents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of continents (eg: `EU` for Europe, `NA` for North America, `AS` for Asia...). [List of all continents code](https://api.scaleway.com/domain-private/v2beta1/continents)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of countries (eg: `FR` for France, `US` for the United States, `GB` for Great Britain...). [List of all countries code](https://api.scaleway.com/domain-private/v2beta1/countries)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "data": {
                    "type": "string",
                    "description": "The data of the view record\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "scaleway:index/DomainRecordHttpService:DomainRecordHttpService": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs to check\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mustContain": {
                    "type": "string",
                    "description": "Text to search\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy to return an IP from the IPs list. Can be `random` or `hashed`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "URL to match the `must_contain` text to validate an IP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAgent": {
                    "type": "string",
                    "description": "User-agent used when checking the URL\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ips",
                "mustContain",
                "strategy",
                "url"
            ]
        },
        "scaleway:index/DomainRecordView:DomainRecordView": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The data of the view record\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet of the view\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data",
                "subnet"
            ]
        },
        "scaleway:index/DomainRecordWeighted:DomainRecordWeighted": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The weighted IP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the IP as an integer UInt32.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "weight"
            ]
        },
        "scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule applies to. If no `port` nor `port_range` are specified, the rule will apply to all port. Only one of `port` and `port_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule applies to. If no `port` nor `port_range` are specified, the rule will apply to all port. Only one of `port` and `port_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pnId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "pnId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macAddress",
                        "pnId",
                        "status",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume": {
            "properties": {
                "boot": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Forces deletion of the root volume on instance termination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "Size of the root volume in gigabytes.\nTo find the right size use [this endpoint](https://api.scaleway.com/instance/v1/zones/fr-par-1/products/servers) and\ncheck the `volumes_constraint.{min|max}_size` (in bytes) for your `commercial_type`.\nUpdates to this field will recreate a new resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID of the root volume of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sizeInGb",
                        "volumeId"
                    ]
                }
            }
        },
        "scaleway:index/IotDeviceCertificate:IotDeviceCertificate": {
            "properties": {
                "crt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The private key of the device, in case it is generated by Scaleway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "crt",
                        "key"
                    ]
                }
            }
        },
        "scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters": {
            "properties": {
                "publish": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFiltersPublish:IotDeviceMessageFiltersPublish",
                    "description": "Rules used to restrict topics the device can publish to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscribe": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFiltersSubscribe:IotDeviceMessageFiltersSubscribe",
                    "description": "Rules used to restrict topics the device can subscribe to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/IotDeviceMessageFiltersPublish:IotDeviceMessageFiltersPublish": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Same as publish rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Same as publish rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/IotDeviceMessageFiltersSubscribe:IotDeviceMessageFiltersSubscribe": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Same as publish rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Same as publish rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/IotRouteDatabase:IotRouteDatabase": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dbname",
                "host",
                "password",
                "port",
                "query",
                "username"
            ]
        },
        "scaleway:index/IotRouteRest:IotRouteRest": {
            "properties": {
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "verb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "headers",
                "uri",
                "verb"
            ]
        },
        "scaleway:index/IotRouteS3:IotRouteS3": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "bucketRegion",
                "strategy"
            ]
        },
        "scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Set to `true` to enable Kubernetes patch version auto upgrades.\n\u003e **Important:** When enabling auto upgrades, the `version` field take a minor version like x.y (ie 1.18).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowDay": {
                    "type": "string",
                    "description": "The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowStartHour": {
                    "type": "integer",
                    "description": "The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enable",
                "maintenanceWindowDay",
                "maintenanceWindowStartHour"
            ]
        },
        "scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig": {
            "properties": {
                "balanceSimilarNodeGroups": {
                    "type": "boolean",
                    "description": "Detect similar node groups and balance the number of nodes between them.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableScaleDown": {
                    "type": "boolean",
                    "description": "Disables the scale down feature of the autoscaler.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "estimator": {
                    "type": "string",
                    "description": "Type of resource estimator to be used in scale up.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expander": {
                    "type": "string",
                    "description": "Type of node group expander to be used in scale up.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expendablePodsPriorityCutoff": {
                    "type": "integer",
                    "description": "Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonsetsUtilization": {
                    "type": "boolean",
                    "description": "Ignore DaemonSet pods when calculating resource utilization for scaling down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxGracefulTerminationSec": {
                    "type": "integer",
                    "description": "Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownDelayAfterAdd": {
                    "type": "string",
                    "description": "How long after scale up that scale down evaluation resumes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownUnneededTime": {
                    "type": "string",
                    "description": "How long a node should be unneeded before it is eligible for scale down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownUtilizationThreshold": {
                    "type": "number",
                    "description": "Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/KubernetesClusterKubeconfig:KubernetesClusterKubeconfig": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "The CA certificate of the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configFile": {
                    "type": "string",
                    "description": "The raw kubeconfig file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "The token to connect to the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCaCertificate",
                        "configFile",
                        "host",
                        "token"
                    ]
                }
            }
        },
        "scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "A client id that all tokens must be issued for\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "JWT claim to use as the user's group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsPrefix": {
                    "type": "string",
                    "description": "Prefix prepended to group claims\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "URL of the provider which allows the API server to discover public signing keys\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Multiple key=value pairs that describes a required claim in the ID Token\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameClaim": {
                    "type": "string",
                    "description": "JWT claim to use as the user name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernamePrefix": {
                    "type": "string",
                    "description": "Prefix prepended to username\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "issuerUrl"
            ]
        },
        "scaleway:index/KubernetesNodePoolNode:KubernetesNodePoolNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIpV6": {
                    "type": "string",
                    "description": "The public IPv6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "publicIp",
                        "publicIpV6",
                        "status"
                    ]
                }
            }
        },
        "scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "The maximum number of nodes to be created during the upgrade\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "The maximum number of nodes that can be not ready at the same time\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for HC requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for HC requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp": {
            "type": "object"
        },
        "scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate": {
            "properties": {
                "certificateChain": {
                    "type": "string",
                    "description": "Full PEM-formatted certificate chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateChain"
            ]
        },
        "scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "Main domain of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of alternative domain names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonName"
            ]
        },
        "scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl": {
            "properties": {
                "action": {
                    "$ref": "#/types/scaleway:index/LoadbalancerFrontendAclAction:LoadbalancerFrontendAclAction",
                    "description": "Action to undertake when an ACL filter matches.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "match": {
                    "$ref": "#/types/scaleway:index/LoadbalancerFrontendAclMatch:LoadbalancerFrontendAclMatch",
                    "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "match"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "match",
                        "name"
                    ]
                }
            }
        },
        "scaleway:index/LoadbalancerFrontendAclAction:LoadbalancerFrontendAclAction": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The action type. Possible values are: `allow` or `deny`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:index/LoadbalancerFrontendAclMatch:LoadbalancerFrontendAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "description": "The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.\nIt extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).\nPossible values are: `acl_http_filter_none`, `path_begin`, `path_end` or `regex`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of possible values to match for the given HTTP filter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "invert": {
                    "type": "boolean",
                    "description": "If set to `true`, the condition will be of type \"unless\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs or CIDR v4/v6 addresses of the client of the session to match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork": {
            "properties": {
                "dhcpConfig": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateNetworkId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticConfigs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The Private Network attachment status\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateNetworkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhcpConfig",
                        "privateNetworkId",
                        "staticConfigs",
                        "status",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule": {
            "properties": {
                "allowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which headers are allowed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which origins are allowed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies expose header in the response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAgeSeconds": {
                    "type": "integer",
                    "description": "Specifies time in seconds that browser can cache the response for a preflight request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedMethods",
                "allowedOrigins"
            ]
        },
        "scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "scaleway:index/getBaremetalOfferCpu:getBaremetalOfferCpu": {
            "properties": {
                "coreCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequency": {
                    "type": "integer",
                    "description": "Frequency of the memory in MHz.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threadCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "coreCount",
                "frequency",
                "name",
                "threadCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalOfferDisk:getBaremetalOfferDisk": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of memory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalOfferMemory:getBaremetalOfferMemory": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequency": {
                    "type": "integer",
                    "description": "Frequency of the memory in MHz.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEcc": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of memory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "frequency",
                "isEcc",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseAclAclRule:getDatabaseAclAclRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A simple text describing this rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstanceLoadBalancer:getDatabaseInstanceLoadBalancer": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "hostname",
                "ip",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstancePrivateNetwork:getDatabaseInstancePrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipNet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pnId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "hostname",
                "ip",
                "ipNet",
                "name",
                "pnId",
                "port",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstanceReadReplica:getDatabaseInstanceReadReplica": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordGeoIp:getDomainRecordGeoIp": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getDomainRecordGeoIpMatch:getDomainRecordGeoIpMatch"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "matches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordGeoIpMatch:getDomainRecordGeoIpMatch": {
            "properties": {
                "continents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\nCannot be used with `record_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "continents",
                "countries",
                "data"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordHttpService:getDomainRecordHttpService": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mustContain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userAgent": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ips",
                "mustContain",
                "strategy",
                "url",
                "userAgent"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordView:getDomainRecordView": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\nCannot be used with `record_id`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "data",
                "subnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordWeighted:getDomainRecordWeighted": {
            "properties": {
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerPrivateNetwork:getInstanceServerPrivateNetwork": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pnId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server exists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "macAddress",
                "pnId",
                "status",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerRootVolume:getInstanceServerRootVolume": {
            "properties": {
                "boot": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Forces deletion of the root volume on instance termination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "Size of the root volume in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID of the root volume of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "boot",
                "deleteOnTermination",
                "sizeInGb",
                "volumeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterAutoUpgrade:getKubernetesClusterAutoUpgrade": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "True if Kubernetes patch version auto upgrades is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowDay": {
                    "type": "string",
                    "description": "The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindowStartHour": {
                    "type": "integer",
                    "description": "The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enable",
                "maintenanceWindowDay",
                "maintenanceWindowStartHour"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterAutoscalerConfig:getKubernetesClusterAutoscalerConfig": {
            "properties": {
                "balanceSimilarNodeGroups": {
                    "type": "boolean",
                    "description": "True if detecting similar node groups and balance the number of nodes between them is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableScaleDown": {
                    "type": "boolean",
                    "description": "True if the scale down feature of the autoscaler is disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "estimator": {
                    "type": "string",
                    "description": "The type of resource estimator used in scale up.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expander": {
                    "type": "string",
                    "description": "The type of node group expander be used in scale up.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expendablePodsPriorityCutoff": {
                    "type": "integer",
                    "description": "Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonsetsUtilization": {
                    "type": "boolean",
                    "description": "True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxGracefulTerminationSec": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownDelayAfterAdd": {
                    "type": "string",
                    "description": "The duration after scale up that scale down evaluation resumes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownUnneededTime": {
                    "type": "string",
                    "description": "The duration a node should be unneeded before it is eligible for scale down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scaleDownUtilizationThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "balanceSimilarNodeGroups",
                "disableScaleDown",
                "estimator",
                "expander",
                "expendablePodsPriorityCutoff",
                "ignoreDaemonsetsUtilization",
                "maxGracefulTerminationSec",
                "scaleDownDelayAfterAdd",
                "scaleDownUnneededTime",
                "scaleDownUtilizationThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterKubeconfig:getKubernetesClusterKubeconfig": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "The CA certificate of the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configFile": {
                    "type": "string",
                    "description": "The raw kubeconfig file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "The token to connect to the Kubernetes API server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterCaCertificate",
                "configFile",
                "host",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterOpenIdConnectConfig:getKubernetesClusterOpenIdConnectConfig": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupsPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issuerUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameClaim": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernamePrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "groupsClaims",
                "groupsPrefix",
                "issuerUrl",
                "requiredClaims",
                "usernameClaim",
                "usernamePrefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesNodePoolNode:getKubernetesNodePoolNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The pool name. Only one of `name` and `pool_id` should be specified. `cluster_id` should be specified with `name`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIpV6": {
                    "type": "string",
                    "description": "The public IPv6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "publicIp",
                "publicIpV6",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesNodePoolUpgradePolicy:getKubernetesNodePoolUpgradePolicy": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxSurge",
                "maxUnavailable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLoadbalancerPrivateNetwork:getLoadbalancerPrivateNetwork": {
            "properties": {
                "dhcpConfig": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateNetworkId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticConfigs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "`region`) The region in which the LB exists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dhcpConfig",
                "privateNetworkId",
                "staticConfigs",
                "status",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the scaleway package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n"
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n"
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n"
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n"
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n"
            }
        },
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_PROJECT_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                }
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                }
            }
        }
    },
    "resources": {
        "scaleway:index/accountSshKey:AccountSshKey": {
            "description": "Manages user SSH keys to access servers provisioned on Scaleway.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.AccountSshKey(\"main\", {\n    publicKey: \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.AccountSshKey(\"main\", public_key=\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.AccountSshKey(\"main\", new Scaleway.AccountSshKeyArgs\n        {\n            PublicKey = \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewAccountSshKey(ctx, \"main\", \u0026scaleway.AccountSshKeyArgs{\n\t\t\tPublicKey: pulumi.String(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSH keys can be imported using the `id`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/accountSshKey:AccountSshKey main 11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the SSH key is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is associated with.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "publicKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is associated with.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n"
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountSshKey resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the SSH key is associated with.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public SSH key to be added.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/appleSliconValleyServer:AppleSliconValleyServer": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the server\n"
                },
                "deletableAt": {
                    "type": "string",
                    "description": "The minimal date and time on which you can delete this server due to Apple licence\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the server\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the server\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the server\n"
                },
                "vncUrl": {
                    "type": "string",
                    "description": "VNC url use to connect remotely to the desktop GUI\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "createdAt",
                "deletableAt",
                "ip",
                "name",
                "organizationId",
                "projectId",
                "type",
                "updatedAt",
                "vncUrl",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the server\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the server\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppleSliconValleyServer resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the server\n"
                    },
                    "deletableAt": {
                        "type": "string",
                        "description": "The minimal date and time on which you can delete this server due to Apple licence\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IPv4 address of the server\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the server\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the server\n"
                    },
                    "vncUrl": {
                        "type": "string",
                        "description": "VNC url use to connect remotely to the desktop GUI\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/baremetalServer:BaremetalServer": {
            "description": "Creates and manages Scaleway Compute Baremetal servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getAccountSshKey({\n    name: \"main\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: \"GP-BM1-S\",\n    os: \"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n    sshKeyIds: [main],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_account_ssh_key(name=\"main\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=\"GP-BM1-S\",\n    os=\"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n    ssh_key_ids=[main])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = Output.Create(Scaleway.GetAccountSshKey.InvokeAsync(new Scaleway.GetAccountSshKeyArgs\n        {\n            Name = \"main\",\n        }));\n        var @base = new Scaleway.BaremetalServer(\"base\", new Scaleway.BaremetalServerArgs\n        {\n            Zone = \"fr-par-2\",\n            Offer = \"GP-BM1-S\",\n            Os = \"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n            SshKeyIds = \n            {\n                main,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"main\"\n\t\tmain, err := scaleway.LookupAccountSshKey(ctx, \u0026GetAccountSshKeyArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:  pulumi.String(\"fr-par-2\"),\n\t\t\tOffer: pulumi.String(\"GP-BM1-S\"),\n\t\t\tOs:    pulumi.String(\"d17d6872-0412-45d9-a198-af82c34d3c5c\"),\n\t\t\tSshKeyIds: pulumi.StringArray{\n\t\t\t\tGetAccountSshKeyResult(main),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nBaremetal servers can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/baremetalServer:BaremetalServer web fr-par-2/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the server.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the server.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the server.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerIp:BaremetalServerIp"
                    },
                    "description": "(List of) The IPs of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "offer": {
                    "type": "string",
                    "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.\n"
                },
                "offerId": {
                    "type": "string",
                    "description": "The ID of the offer.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                },
                "osId": {
                    "type": "string",
                    "description": "The ID of the os.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH keys allowed to connect to the server.\n\u003e **Important:** Updates to `ssh_key_ids` will reinstall the server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "required": [
                "domain",
                "ips",
                "name",
                "offer",
                "offerId",
                "organizationId",
                "os",
                "osId",
                "projectId",
                "sshKeyIds",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the server.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "offer": {
                    "type": "string",
                    "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH keys allowed to connect to the server.\n\u003e **Important:** Updates to `ssh_key_ids` will reinstall the server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "requiredInputs": [
                "offer",
                "os",
                "sshKeyIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BaremetalServer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the server.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the server.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the server.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerIp:BaremetalServerIp"
                        },
                        "description": "(List of) The IPs of the server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "offer": {
                        "type": "string",
                        "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The ID of the offer.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                    },
                    "osId": {
                        "type": "string",
                        "description": "The ID of the os.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is associated with.\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SSH keys allowed to connect to the server.\n\u003e **Important:** Updates to `ssh_key_ids` will reinstall the server.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/database:Database": {
            "description": "Creates and manages Scaleway RDB database.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.Database(\"main\", {instanceId: scaleway_rdb_instance.main.id});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.Database(\"main\", instance_id=scaleway_rdb_instance[\"main\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.Database(\"main\", new Scaleway.DatabaseArgs\n        {\n            InstanceId = scaleway_rdb_instance.Main.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabase(ctx, \"main\", \u0026scaleway.DatabaseArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nRDB Database can be imported using the `{region}/{id}/{DBNAME}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/database:Database rdb01_mydb fr-par/11111111-1111-1111-1111-111111111111/mydb\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where to create the database.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Whether or not the database is managed or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The name of the owner of the database.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of the database (in bytes).\n"
                }
            },
            "required": [
                "instanceId",
                "managed",
                "name",
                "owner",
                "size"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where to create the database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the instance where to create the database.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether or not the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-new-database`).\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database (in bytes).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseAcl:DatabaseAcl": {
            "description": "Creates and manages Scaleway Database instance autorized IPs.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.DatabaseAcl(\"main\", {\n    instanceId: scaleway_rdb_instance.main.id,\n    aclRules: [{\n        ip: \"1.2.3.4/32\",\n        description: \"foo\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.DatabaseAcl(\"main\",\n    instance_id=scaleway_rdb_instance[\"main\"][\"id\"],\n    acl_rules=[scaleway.DatabaseAclAclRuleArgs(\n        ip=\"1.2.3.4/32\",\n        description=\"foo\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.DatabaseAcl(\"main\", new Scaleway.DatabaseAclArgs\n        {\n            InstanceId = scaleway_rdb_instance.Main.Id,\n            AclRules = \n            {\n                new Scaleway.Inputs.DatabaseAclAclRuleArgs\n                {\n                    Ip = \"1.2.3.4/32\",\n                    Description = \"foo\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseAcl(ctx, \"main\", \u0026scaleway.DatabaseAclArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),\n\t\t\tAclRules: DatabaseAclAclRuleArray{\n\t\t\t\t\u0026DatabaseAclAclRuleArgs{\n\t\t\t\t\tIp:          pulumi.String(\"1.2.3.4/32\"),\n\t\t\t\t\tDescription: pulumi.String(\"foo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/databaseAcl:DatabaseAcl acl01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "aclRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule"
                    },
                    "description": "A list of ACLs (structure is described below)\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance on which to create the ACL.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "required": [
                "aclRules",
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "aclRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule"
                    },
                    "description": "A list of ACLs (structure is described below)\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance on which to create the ACL.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "requiredInputs": [
                "aclRules",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseAcl resources.\n",
                "properties": {
                    "aclRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule"
                        },
                        "description": "A list of ACLs (structure is described below)\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance on which to create the ACL.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseInstance:DatabaseInstance": {
            "description": "Creates and manages Scaleway Database Instances.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst mainDatabaseInstance = new scaleway.DatabaseInstance(\"mainDatabaseInstance\", {\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-11\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\n// with backup schedule\nconst mainIndex_databaseInstanceDatabaseInstance = new scaleway.DatabaseInstance(\"mainIndex/databaseInstanceDatabaseInstance\", {\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-11\",\n    isHaCluster: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    disableBackup: true,\n    backupScheduleFrequency: 24,\n    backupScheduleRetention: 7,\n});\n// keep it one week\n// with private network and dhcp configuration\nconst pn02 = new scaleway.VpcPrivateNetwork(\"pn02\", {});\nconst mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", {subnet: \"192.168.1.0/24\"});\nconst mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\", {});\nconst mainVpcPublicGateway = new scaleway.VpcPublicGateway(\"mainVpcPublicGateway\", {\n    type: \"VPC-GW-S\",\n    ipId: mainVpcPublicGatewayIp.id,\n});\nconst mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateNetworkId: pn02.id,\n    dhcpId: mainVpcPublicGatewayDhcp.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n}, {\n    dependsOn: [\n        mainVpcPublicGatewayIp,\n        pn02,\n    ],\n});\nconst mainVpcPublicGatewayPatRule = new scaleway.VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateIp: mainVpcPublicGatewayDhcp.address,\n    privatePort: mainDatabaseInstance.privateNetwork.apply(privateNetwork =\u003e privateNetwork?.port),\n    publicPort: 42,\n    protocol: \"both\",\n}, {\n    dependsOn: [\n        mainVpcGatewayNetwork,\n        pn02,\n    ],\n});\nconst mainScalewayIndex_databaseInstanceDatabaseInstance = new scaleway.DatabaseInstance(\"mainScalewayIndex/databaseInstanceDatabaseInstance\", {\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-11\",\n    isHaCluster: false,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    region: \"fr-par\",\n    tags: [\n        \"terraform-test\",\n        \"scaleway_rdb_instance\",\n        \"volume\",\n        \"rdb_pn\",\n    ],\n    volumeType: \"bssd\",\n    volumeSizeInGb: 10,\n    privateNetwork: {\n        ipNet: \"192.168.1.254/24\",\n        pnId: pn02.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain_database_instance = scaleway.DatabaseInstance(\"mainDatabaseInstance\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-11\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\n# with backup schedule\nmain_index_database_instance_database_instance = scaleway.DatabaseInstance(\"mainIndex/databaseInstanceDatabaseInstance\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-11\",\n    is_ha_cluster=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    disable_backup=True,\n    backup_schedule_frequency=24,\n    backup_schedule_retention=7)\n# keep it one week\n# with private network and dhcp configuration\npn02 = scaleway.VpcPrivateNetwork(\"pn02\")\nmain_vpc_public_gateway_dhcp = scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", subnet=\"192.168.1.0/24\")\nmain_vpc_public_gateway_ip = scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\")\nmain_vpc_public_gateway = scaleway.VpcPublicGateway(\"mainVpcPublicGateway\",\n    type=\"VPC-GW-S\",\n    ip_id=main_vpc_public_gateway_ip.id)\nmain_vpc_gateway_network = scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_network_id=pn02.id,\n    dhcp_id=main_vpc_public_gateway_dhcp.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True,\n    opts=pulumi.ResourceOptions(depends_on=[\n            main_vpc_public_gateway_ip,\n            pn02,\n        ]))\nmain_vpc_public_gateway_pat_rule = scaleway.VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_ip=main_vpc_public_gateway_dhcp.address,\n    private_port=main_database_instance.private_network.port,\n    public_port=42,\n    protocol=\"both\",\n    opts=pulumi.ResourceOptions(depends_on=[\n            main_vpc_gateway_network,\n            pn02,\n        ]))\nmain_scaleway_index_database_instance_database_instance = scaleway.DatabaseInstance(\"mainScalewayIndex/databaseInstanceDatabaseInstance\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-11\",\n    is_ha_cluster=False,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    region=\"fr-par\",\n    tags=[\n        \"terraform-test\",\n        \"scaleway_rdb_instance\",\n        \"volume\",\n        \"rdb_pn\",\n    ],\n    volume_type=\"bssd\",\n    volume_size_in_gb=10,\n    private_network=scaleway.DatabaseInstancePrivateNetworkArgs(\n        ip_net=\"192.168.1.254/24\",\n        pn_id=pn02.id,\n    ))\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mainDatabaseInstance = new Scaleway.DatabaseInstance(\"mainDatabaseInstance\", new Scaleway.DatabaseInstanceArgs\n        {\n            NodeType = \"DB-DEV-S\",\n            Engine = \"PostgreSQL-11\",\n            IsHaCluster = true,\n            DisableBackup = true,\n            UserName = \"my_initial_user\",\n            Password = \"thiZ_is_v\u0026ry_s3cret\",\n        });\n        // with backup schedule\n        var mainIndex_databaseInstanceDatabaseInstance = new Scaleway.DatabaseInstance(\"mainIndex/databaseInstanceDatabaseInstance\", new Scaleway.DatabaseInstanceArgs\n        {\n            NodeType = \"DB-DEV-S\",\n            Engine = \"PostgreSQL-11\",\n            IsHaCluster = true,\n            UserName = \"my_initial_user\",\n            Password = \"thiZ_is_v\u0026ry_s3cret\",\n            DisableBackup = true,\n            BackupScheduleFrequency = 24,\n            BackupScheduleRetention = 7,\n        });\n        // keep it one week\n        // with private network and dhcp configuration\n        var pn02 = new Scaleway.VpcPrivateNetwork(\"pn02\", new Scaleway.VpcPrivateNetworkArgs\n        {\n        });\n        var mainVpcPublicGatewayDhcp = new Scaleway.VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", new Scaleway.VpcPublicGatewayDhcpArgs\n        {\n            Subnet = \"192.168.1.0/24\",\n        });\n        var mainVpcPublicGatewayIp = new Scaleway.VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\", new Scaleway.VpcPublicGatewayIpArgs\n        {\n        });\n        var mainVpcPublicGateway = new Scaleway.VpcPublicGateway(\"mainVpcPublicGateway\", new Scaleway.VpcPublicGatewayArgs\n        {\n            Type = \"VPC-GW-S\",\n            IpId = mainVpcPublicGatewayIp.Id,\n        });\n        var mainVpcGatewayNetwork = new Scaleway.VpcGatewayNetwork(\"mainVpcGatewayNetwork\", new Scaleway.VpcGatewayNetworkArgs\n        {\n            GatewayId = mainVpcPublicGateway.Id,\n            PrivateNetworkId = pn02.Id,\n            DhcpId = mainVpcPublicGatewayDhcp.Id,\n            CleanupDhcp = true,\n            EnableMasquerade = true,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                mainVpcPublicGatewayIp,\n                pn02,\n            },\n        });\n        var mainVpcPublicGatewayPatRule = new Scaleway.VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\", new Scaleway.VpcPublicGatewayPatRuleArgs\n        {\n            GatewayId = mainVpcPublicGateway.Id,\n            PrivateIp = mainVpcPublicGatewayDhcp.Address,\n            PrivatePort = mainDatabaseInstance.PrivateNetwork.Apply(privateNetwork =\u003e privateNetwork?.Port),\n            PublicPort = 42,\n            Protocol = \"both\",\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                mainVpcGatewayNetwork,\n                pn02,\n            },\n        });\n        var mainScalewayIndex_databaseInstanceDatabaseInstance = new Scaleway.DatabaseInstance(\"mainScalewayIndex/databaseInstanceDatabaseInstance\", new Scaleway.DatabaseInstanceArgs\n        {\n            NodeType = \"db-dev-s\",\n            Engine = \"PostgreSQL-11\",\n            IsHaCluster = false,\n            DisableBackup = true,\n            UserName = \"my_initial_user\",\n            Password = \"thiZ_is_v\u0026ry_s3cret\",\n            Region = \"fr-par\",\n            Tags = \n            {\n                \"terraform-test\",\n                \"scaleway_rdb_instance\",\n                \"volume\",\n                \"rdb_pn\",\n            },\n            VolumeType = \"bssd\",\n            VolumeSizeInGb = 10,\n            PrivateNetwork = new Scaleway.Inputs.DatabaseInstancePrivateNetworkArgs\n            {\n                IpNet = \"192.168.1.254/24\",\n                PnId = pn02.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainDatabaseInstance, err := scaleway.NewDatabaseInstance(ctx, \"mainDatabaseInstance\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-11\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseInstance(ctx, \"mainIndex/databaseInstanceDatabaseInstance\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tNodeType:                pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:                  pulumi.String(\"PostgreSQL-11\"),\n\t\t\tIsHaCluster:             pulumi.Bool(true),\n\t\t\tUserName:                pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:                pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tDisableBackup:           pulumi.Bool(true),\n\t\t\tBackupScheduleFrequency: pulumi.Int(24),\n\t\t\tBackupScheduleRetention: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn02, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn02\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayDhcp, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"mainVpcPublicGatewayDhcp\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, \"mainVpcPublicGatewayIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGateway, err := scaleway.NewVpcPublicGateway(ctx, \"mainVpcPublicGateway\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: mainVpcPublicGatewayIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcGatewayNetwork, err := scaleway.NewVpcGatewayNetwork(ctx, \"mainVpcGatewayNetwork\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        mainVpcPublicGateway.ID(),\n\t\t\tPrivateNetworkId: pn02.ID(),\n\t\t\tDhcpId:           mainVpcPublicGatewayDhcp.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainVpcPublicGatewayIp,\n\t\t\tpn02,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayPatRule(ctx, \"mainVpcPublicGatewayPatRule\", \u0026scaleway.VpcPublicGatewayPatRuleArgs{\n\t\t\tGatewayId: mainVpcPublicGateway.ID(),\n\t\t\tPrivateIp: mainVpcPublicGatewayDhcp.Address,\n\t\t\tPrivatePort: mainDatabaseInstance.PrivateNetwork.ApplyT(func(privateNetwork DatabaseInstancePrivateNetwork) (int, error) {\n\t\t\t\treturn privateNetwork.Port, nil\n\t\t\t}).(pulumi.IntOutput),\n\t\t\tPublicPort: pulumi.Int(42),\n\t\t\tProtocol:   pulumi.String(\"both\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainVpcGatewayNetwork,\n\t\t\tpn02,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseInstance(ctx, \"mainScalewayIndex/databaseInstanceDatabaseInstance\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-11\"),\n\t\t\tIsHaCluster:   pulumi.Bool(false),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tRegion:        pulumi.String(\"fr-par\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform-test\"),\n\t\t\t\tpulumi.String(\"scaleway_rdb_instance\"),\n\t\t\t\tpulumi.String(\"volume\"),\n\t\t\t\tpulumi.String(\"rdb_pn\"),\n\t\t\t},\n\t\t\tVolumeType:     pulumi.String(\"bssd\"),\n\t\t\tVolumeSizeInGb: pulumi.Int(10),\n\t\t\tPrivateNetwork: \u0026DatabaseInstancePrivateNetworkArgs{\n\t\t\t\tIpNet: pulumi.String(\"192.168.1.254/24\"),\n\t\t\t\tPnId:  pn02.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Private Network\n\n\u003e **Important:** Updates to `private_network` will recreate the attachment Instance.\n\n- `ip_net` - (Required) The IP network where to con.\n- `pn_id` - (Required) The ID of the private network. If not provided it will be randomly generated.\n\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/databaseInstance:DatabaseInstance rdb01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "backupScheduleFrequency": {
                    "type": "integer",
                    "description": "Backup schedule frequency in hours.\n"
                },
                "backupScheduleRetention": {
                    "type": "integer",
                    "description": "Backup schedule retention in days.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Certificate of the database instance.\n"
                },
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance.\n"
                },
                "endpointIp": {
                    "type": "string",
                    "description": "The IP of the Database Instance.\n"
                },
                "endpointPort": {
                    "type": "integer",
                    "description": "The port of the Database Instance.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n"
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n"
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer"
                    },
                    "description": "List of load balancer endpoints of the database instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `db-dev-s`).\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the Database Instance is associated with.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork",
                    "description": "List of private networks endpoints of the database instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database Instance is associated with.\n"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseInstanceReadReplica:DatabaseInstanceReadReplica"
                    },
                    "description": "List of read replicas of the database instance.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n"
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`. Must be a multiple of 5000000000.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "required": [
                "backupScheduleFrequency",
                "backupScheduleRetention",
                "certificate",
                "endpointIp",
                "endpointPort",
                "engine",
                "loadBalancers",
                "name",
                "nodeType",
                "organizationId",
                "projectId",
                "readReplicas",
                "region",
                "settings",
                "volumeSizeInGb"
            ],
            "inputProperties": {
                "backupScheduleFrequency": {
                    "type": "integer",
                    "description": "Backup schedule frequency in hours.\n"
                },
                "backupScheduleRetention": {
                    "type": "integer",
                    "description": "Backup schedule retention in days.\n"
                },
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n"
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `db-dev-s`).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork",
                    "description": "List of private networks endpoints of the database instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database Instance is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n"
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`. Must be a multiple of 5000000000.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "requiredInputs": [
                "engine",
                "nodeType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseInstance resources.\n",
                "properties": {
                    "backupScheduleFrequency": {
                        "type": "integer",
                        "description": "Backup schedule frequency in hours.\n"
                    },
                    "backupScheduleRetention": {
                        "type": "integer",
                        "description": "Backup schedule retention in days.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Certificate of the database instance.\n"
                    },
                    "disableBackup": {
                        "type": "boolean",
                        "description": "Disable automated backup for the database instance.\n"
                    },
                    "endpointIp": {
                        "type": "string",
                        "description": "The IP of the Database Instance.\n"
                    },
                    "endpointPort": {
                        "type": "integer",
                        "description": "The port of the Database Instance.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n"
                    },
                    "isHaCluster": {
                        "type": "boolean",
                        "description": "Enable or disable high availability for the database instance.\n"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer"
                        },
                        "description": "List of load balancer endpoints of the database instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database Instance.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of database instance you want to create (e.g. `db-dev-s`).\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the Database Instance is associated with.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the database instance.\n"
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork",
                        "description": "List of private networks endpoints of the database instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Database Instance is associated with.\n"
                    },
                    "readReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DatabaseInstanceReadReplica:DatabaseInstanceReadReplica"
                        },
                        "description": "List of read replicas of the database instance.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of engine settings to be set.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Database Instance.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the database instance.\n"
                    },
                    "volumeSizeInGb": {
                        "type": "integer",
                        "description": "Volume size (in GB) when `volume_type` is set to `bssd`. Must be a multiple of 5000000000.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databasePrivilege:DatabasePrivilege": {
            "description": "Create and manage Scaleway RDB database privilege.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst priv = new scaleway.DatabasePrivilege(\"priv\", {\n    instanceId: scaleway_rdb_instance.rdb.id,\n    userName: \"my-db-user\",\n    databaseName: \"my-db-name\",\n    permission: \"all\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\npriv = scaleway.DatabasePrivilege(\"priv\",\n    instance_id=scaleway_rdb_instance[\"rdb\"][\"id\"],\n    user_name=\"my-db-user\",\n    database_name=\"my-db-name\",\n    permission=\"all\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var priv = new Scaleway.DatabasePrivilege(\"priv\", new Scaleway.DatabasePrivilegeArgs\n        {\n            InstanceId = scaleway_rdb_instance.Rdb.Id,\n            UserName = \"my-db-user\",\n            DatabaseName = \"my-db-name\",\n            Permission = \"all\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabasePrivilege(ctx, \"priv\", \u0026scaleway.DatabasePrivilegeArgs{\n\t\t\tInstanceId:   pulumi.Any(scaleway_rdb_instance.Rdb.Id),\n\t\t\tUserName:     pulumi.String(\"my-db-user\"),\n\t\t\tDatabaseName: pulumi.String(\"my-db-name\"),\n\t\t\tPermission:   pulumi.String(\"all\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where to create the database.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "required": [
                "databaseName",
                "instanceId",
                "permission",
                "userName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the instance where to create the database.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "instanceId",
                "permission",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabasePrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-db-name`).\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the instance where to create the database.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Name of the user (e.g. `my-db-user`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseUser:DatabaseUser": {
            "description": "Creates and manages Scaleway Database Users.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as random from \"@pulumi/random\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst dbPassword = new random.RandomPassword(\"dbPassword\", {\n    length: 16,\n    special: true,\n});\nconst dbAdmin = new scaleway.DatabaseUser(\"dbAdmin\", {\n    instanceId: scaleway_rdb_instance.main.id,\n    password: dbPassword.result,\n    isAdmin: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_random as random\nimport pulumi_scaleway as scaleway\n\ndb_password = random.RandomPassword(\"dbPassword\",\n    length=16,\n    special=True)\ndb_admin = scaleway.DatabaseUser(\"dbAdmin\",\n    instance_id=scaleway_rdb_instance[\"main\"][\"id\"],\n    password=db_password.result,\n    is_admin=True)\n```\n```csharp\nusing Pulumi;\nusing Random = Pulumi.Random;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dbPassword = new Random.RandomPassword(\"dbPassword\", new Random.RandomPasswordArgs\n        {\n            Length = 16,\n            Special = true,\n        });\n        var dbAdmin = new Scaleway.DatabaseUser(\"dbAdmin\", new Scaleway.DatabaseUserArgs\n        {\n            InstanceId = scaleway_rdb_instance.Main.Id,\n            Password = dbPassword.Result,\n            IsAdmin = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-random/sdk/v4/go/random\"\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdbPassword, err := random.NewRandomPassword(ctx, \"dbPassword\", \u0026random.RandomPasswordArgs{\n\t\t\tLength:  pulumi.Int(16),\n\t\t\tSpecial: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseUser(ctx, \"dbAdmin\", \u0026scaleway.DatabaseUserArgs{\n\t\t\tInstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),\n\t\t\tPassword:   dbPassword.Result,\n\t\t\tIsAdmin:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nDatabase User can be imported using `{region}/{instance_id}/{name}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/databaseUser:DatabaseUser admin fr-par/11111111-1111-1111-1111-111111111111/admin\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The instance on which to create the user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database User name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "password",
                "region"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The instance on which to create the user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database User name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseUser resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The instance on which to create the user.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Grant admin permissions to the Database User.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Database User name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Database User password.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/domainRecord:DomainRecord": {
            "description": "Creates and manages Scaleway Domain record.  \nFor more information, see [the documentation](https://www.scaleway.com/en/docs/scaleway-dns/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst www = new scaleway.DomainRecord(\"www\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n});\nconst www2 = new scaleway.DomainRecord(\"www2\", {\n    data: \"1.2.3.5\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n});\nconst mx = new scaleway.DomainRecord(\"mx\", {\n    data: \"mx.online.net.\",\n    dnsZone: \"domain.tld\",\n    priority: 10,\n    ttl: 3600,\n    type: \"MX\",\n});\nconst mx2 = new scaleway.DomainRecord(\"mx2\", {\n    data: \"mx-cache.online.net.\",\n    dnsZone: \"domain.tld\",\n    priority: 20,\n    ttl: 3600,\n    type: \"MX\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nwww = scaleway.DomainRecord(\"www\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\")\nwww2 = scaleway.DomainRecord(\"www2\",\n    data=\"1.2.3.5\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\")\nmx = scaleway.DomainRecord(\"mx\",\n    data=\"mx.online.net.\",\n    dns_zone=\"domain.tld\",\n    priority=10,\n    ttl=3600,\n    type=\"MX\")\nmx2 = scaleway.DomainRecord(\"mx2\",\n    data=\"mx-cache.online.net.\",\n    dns_zone=\"domain.tld\",\n    priority=20,\n    ttl=3600,\n    type=\"MX\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var www = new Scaleway.DomainRecord(\"www\", new Scaleway.DomainRecordArgs\n        {\n            Data = \"1.2.3.4\",\n            DnsZone = \"domain.tld\",\n            Ttl = 3600,\n            Type = \"A\",\n        });\n        var www2 = new Scaleway.DomainRecord(\"www2\", new Scaleway.DomainRecordArgs\n        {\n            Data = \"1.2.3.5\",\n            DnsZone = \"domain.tld\",\n            Ttl = 3600,\n            Type = \"A\",\n        });\n        var mx = new Scaleway.DomainRecord(\"mx\", new Scaleway.DomainRecordArgs\n        {\n            Data = \"mx.online.net.\",\n            DnsZone = \"domain.tld\",\n            Priority = 10,\n            Ttl = 3600,\n            Type = \"MX\",\n        });\n        var mx2 = new Scaleway.DomainRecord(\"mx2\", new Scaleway.DomainRecordArgs\n        {\n            Data = \"mx-cache.online.net.\",\n            DnsZone = \"domain.tld\",\n            Priority = 20,\n            Ttl = 3600,\n            Type = \"MX\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainRecord(ctx, \"www\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"www2\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.5\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:     pulumi.String(\"mx.online.net.\"),\n\t\t\tDnsZone:  pulumi.String(\"domain.tld\"),\n\t\t\tPriority: pulumi.Int(10),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tType:     pulumi.String(\"MX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx2\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:     pulumi.String(\"mx-cache.online.net.\"),\n\t\t\tDnsZone:  pulumi.String(\"domain.tld\"),\n\t\t\tPriority: pulumi.Int(20),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tType:     pulumi.String(\"MX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### With dynamic records\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst geoIp = new scaleway.DomainRecord(\"geo_ip\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    geoIp: {\n        matches: [\n            {\n                continents: [\"EU\"],\n                countries: [\"FR\"],\n                data: \"1.2.3.5\",\n            },\n            {\n                continents: [\"NA\"],\n                data: \"4.3.2.1\",\n            },\n        ],\n    },\n    ttl: 3600,\n    type: \"A\",\n});\nconst httpService = new scaleway.DomainRecord(\"http_service\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    httpService: {\n        ips: [\n            \"1.2.3.5\",\n            \"1.2.3.6\",\n        ],\n        mustContain: \"up\",\n        strategy: \"hashed\",\n        url: \"http://mywebsite.com/health\",\n        userAgent: \"scw_service_up\",\n    },\n    ttl: 3600,\n    type: \"A\",\n});\nconst view = new scaleway.DomainRecord(\"view\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n    views: [\n        {\n            data: \"1.2.3.5\",\n            subnet: \"100.0.0.0/16\",\n        },\n        {\n            data: \"1.2.3.6\",\n            subnet: \"100.1.0.0/16\",\n        },\n    ],\n});\nconst weighted = new scaleway.DomainRecord(\"weighted\", {\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    ttl: 3600,\n    type: \"A\",\n    weighteds: [\n        {\n            ip: \"1.2.3.5\",\n            weight: 1,\n        },\n        {\n            ip: \"1.2.3.6\",\n            weight: 2,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\ngeo_ip = scaleway.DomainRecord(\"geoIp\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    geo_ip=scaleway.DomainRecordGeoIpArgs(\n        matches=[\n            scaleway.DomainRecordGeoIpMatchArgs(\n                continents=[\"EU\"],\n                countries=[\"FR\"],\n                data=\"1.2.3.5\",\n            ),\n            scaleway.DomainRecordGeoIpMatchArgs(\n                continents=[\"NA\"],\n                data=\"4.3.2.1\",\n            ),\n        ],\n    ),\n    ttl=3600,\n    type=\"A\")\nhttp_service = scaleway.DomainRecord(\"httpService\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    http_service=scaleway.DomainRecordHttpServiceArgs(\n        ips=[\n            \"1.2.3.5\",\n            \"1.2.3.6\",\n        ],\n        must_contain=\"up\",\n        strategy=\"hashed\",\n        url=\"http://mywebsite.com/health\",\n        user_agent=\"scw_service_up\",\n    ),\n    ttl=3600,\n    type=\"A\")\nview = scaleway.DomainRecord(\"view\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\",\n    views=[\n        scaleway.DomainRecordViewArgs(\n            data=\"1.2.3.5\",\n            subnet=\"100.0.0.0/16\",\n        ),\n        scaleway.DomainRecordViewArgs(\n            data=\"1.2.3.6\",\n            subnet=\"100.1.0.0/16\",\n        ),\n    ])\nweighted = scaleway.DomainRecord(\"weighted\",\n    data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    ttl=3600,\n    type=\"A\",\n    weighteds=[\n        scaleway.DomainRecordWeightedArgs(\n            ip=\"1.2.3.5\",\n            weight=1,\n        ),\n        scaleway.DomainRecordWeightedArgs(\n            ip=\"1.2.3.6\",\n            weight=2,\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var geoIp = new Scaleway.DomainRecord(\"geoIp\", new Scaleway.DomainRecordArgs\n        {\n            Data = \"1.2.3.4\",\n            DnsZone = \"domain.tld\",\n            GeoIp = new Scaleway.Inputs.DomainRecordGeoIpArgs\n            {\n                Matches = \n                {\n                    new Scaleway.Inputs.DomainRecordGeoIpMatchArgs\n                    {\n                        Continents = \n                        {\n                            \"EU\",\n                        },\n                        Countries = \n                        {\n                            \"FR\",\n                        },\n                        Data = \"1.2.3.5\",\n                    },\n                    new Scaleway.Inputs.DomainRecordGeoIpMatchArgs\n                    {\n                        Continents = \n                        {\n                            \"NA\",\n                        },\n                        Data = \"4.3.2.1\",\n                    },\n                },\n            },\n            Ttl = 3600,\n            Type = \"A\",\n        });\n        var httpService = new Scaleway.DomainRecord(\"httpService\", new Scaleway.DomainRecordArgs\n        {\n            Data = \"1.2.3.4\",\n            DnsZone = \"domain.tld\",\n            HttpService = new Scaleway.Inputs.DomainRecordHttpServiceArgs\n            {\n                Ips = \n                {\n                    \"1.2.3.5\",\n                    \"1.2.3.6\",\n                },\n                MustContain = \"up\",\n                Strategy = \"hashed\",\n                Url = \"http://mywebsite.com/health\",\n                UserAgent = \"scw_service_up\",\n            },\n            Ttl = 3600,\n            Type = \"A\",\n        });\n        var view = new Scaleway.DomainRecord(\"view\", new Scaleway.DomainRecordArgs\n        {\n            Data = \"1.2.3.4\",\n            DnsZone = \"domain.tld\",\n            Ttl = 3600,\n            Type = \"A\",\n            Views = \n            {\n                new Scaleway.Inputs.DomainRecordViewArgs\n                {\n                    Data = \"1.2.3.5\",\n                    Subnet = \"100.0.0.0/16\",\n                },\n                new Scaleway.Inputs.DomainRecordViewArgs\n                {\n                    Data = \"1.2.3.6\",\n                    Subnet = \"100.1.0.0/16\",\n                },\n            },\n        });\n        var weighted = new Scaleway.DomainRecord(\"weighted\", new Scaleway.DomainRecordArgs\n        {\n            Data = \"1.2.3.4\",\n            DnsZone = \"domain.tld\",\n            Ttl = 3600,\n            Type = \"A\",\n            Weighteds = \n            {\n                new Scaleway.Inputs.DomainRecordWeightedArgs\n                {\n                    Ip = \"1.2.3.5\",\n                    Weight = 1,\n                },\n                new Scaleway.Inputs.DomainRecordWeightedArgs\n                {\n                    Ip = \"1.2.3.6\",\n                    Weight = 2,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainRecord(ctx, \"geoIp\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tGeoIp: \u0026DomainRecordGeoIpArgs{\n\t\t\t\tMatches: DomainRecordGeoIpMatchArray{\n\t\t\t\t\t\u0026DomainRecordGeoIpMatchArgs{\n\t\t\t\t\t\tContinents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"EU\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tCountries: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"FR\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tData: pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026DomainRecordGeoIpMatchArgs{\n\t\t\t\t\t\tContinents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"NA\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tData: pulumi.String(\"4.3.2.1\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTtl:  pulumi.Int(3600),\n\t\t\tType: pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"httpService\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tHttpService: \u0026DomainRecordHttpServiceArgs{\n\t\t\t\tIps: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tpulumi.String(\"1.2.3.6\"),\n\t\t\t\t},\n\t\t\t\tMustContain: pulumi.String(\"up\"),\n\t\t\t\tStrategy:    pulumi.String(\"hashed\"),\n\t\t\t\tUrl:         pulumi.String(\"http://mywebsite.com/health\"),\n\t\t\t\tUserAgent:   pulumi.String(\"scw_service_up\"),\n\t\t\t},\n\t\t\tTtl:  pulumi.Int(3600),\n\t\t\tType: pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"view\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tViews: DomainRecordViewArray{\n\t\t\t\t\u0026DomainRecordViewArgs{\n\t\t\t\t\tData:   pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tSubnet: pulumi.String(\"100.0.0.0/16\"),\n\t\t\t\t},\n\t\t\t\t\u0026DomainRecordViewArgs{\n\t\t\t\t\tData:   pulumi.String(\"1.2.3.6\"),\n\t\t\t\t\tSubnet: pulumi.String(\"100.1.0.0/16\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"weighted\", \u0026scaleway.DomainRecordArgs{\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tWeighteds: DomainRecordWeightedArray{\n\t\t\t\t\u0026DomainRecordWeightedArgs{\n\t\t\t\t\tIp:     pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tWeight: pulumi.Int(1),\n\t\t\t\t},\n\t\t\t\t\u0026DomainRecordWeightedArgs{\n\t\t\t\t\tIp:     pulumi.String(\"1.2.3.6\"),\n\t\t\t\t\tWeight: pulumi.Int(2),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### Create an instance and add records with the new instance IP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst config = new pulumi.Config();\nconst projectId = config.require(\"projectId\");\nconst dnsZone = config.require(\"dnsZone\");\nconst publicIp = new scaleway.InstanceIp(\"publicIp\", {projectId: projectId});\nconst web = new scaleway.InstanceServer(\"web\", {\n    projectId: projectId,\n    type: \"DEV1-S\",\n    image: \"ubuntu_focal\",\n    tags: [\n        \"front\",\n        \"web\",\n    ],\n    ipId: publicIp.id,\n    rootVolume: {\n        sizeInGb: 20,\n    },\n});\nconst webA = new scaleway.DomainRecord(\"webA\", {\n    dnsZone: dnsZone,\n    type: \"A\",\n    data: web.publicIp,\n    ttl: 3600,\n});\nconst webCname = new scaleway.DomainRecord(\"webCname\", {\n    dnsZone: dnsZone,\n    type: \"CNAME\",\n    data: `web.${dnsZone}.`,\n    ttl: 3600,\n});\nconst webAlias = new scaleway.DomainRecord(\"webAlias\", {\n    dnsZone: dnsZone,\n    type: \"ALIAS\",\n    data: `web.${dnsZone}.`,\n    ttl: 3600,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nconfig = pulumi.Config()\nproject_id = config.require(\"projectId\")\ndns_zone = config.require(\"dnsZone\")\npublic_ip = scaleway.InstanceIp(\"publicIp\", project_id=project_id)\nweb = scaleway.InstanceServer(\"web\",\n    project_id=project_id,\n    type=\"DEV1-S\",\n    image=\"ubuntu_focal\",\n    tags=[\n        \"front\",\n        \"web\",\n    ],\n    ip_id=public_ip.id,\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        size_in_gb=20,\n    ))\nweb_a = scaleway.DomainRecord(\"webA\",\n    dns_zone=dns_zone,\n    type=\"A\",\n    data=web.public_ip,\n    ttl=3600)\nweb_cname = scaleway.DomainRecord(\"webCname\",\n    dns_zone=dns_zone,\n    type=\"CNAME\",\n    data=f\"web.{dns_zone}.\",\n    ttl=3600)\nweb_alias = scaleway.DomainRecord(\"webAlias\",\n    dns_zone=dns_zone,\n    type=\"ALIAS\",\n    data=f\"web.{dns_zone}.\",\n    ttl=3600)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var config = new Config();\n        var projectId = config.Require(\"projectId\");\n        var dnsZone = config.Require(\"dnsZone\");\n        var publicIp = new Scaleway.InstanceIp(\"publicIp\", new Scaleway.InstanceIpArgs\n        {\n            ProjectId = projectId,\n        });\n        var web = new Scaleway.InstanceServer(\"web\", new Scaleway.InstanceServerArgs\n        {\n            ProjectId = projectId,\n            Type = \"DEV1-S\",\n            Image = \"ubuntu_focal\",\n            Tags = \n            {\n                \"front\",\n                \"web\",\n            },\n            IpId = publicIp.Id,\n            RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n            {\n                SizeInGb = 20,\n            },\n        });\n        var webA = new Scaleway.DomainRecord(\"webA\", new Scaleway.DomainRecordArgs\n        {\n            DnsZone = dnsZone,\n            Type = \"A\",\n            Data = web.PublicIp,\n            Ttl = 3600,\n        });\n        var webCname = new Scaleway.DomainRecord(\"webCname\", new Scaleway.DomainRecordArgs\n        {\n            DnsZone = dnsZone,\n            Type = \"CNAME\",\n            Data = $\"web.{dnsZone}.\",\n            Ttl = 3600,\n        });\n        var webAlias = new Scaleway.DomainRecord(\"webAlias\", new Scaleway.DomainRecordArgs\n        {\n            DnsZone = dnsZone,\n            Type = \"ALIAS\",\n            Data = $\"web.{dnsZone}.\",\n            Ttl = 3600,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\tdnsZone := cfg.Require(\"dnsZone\")\n\t\tpublicIp, err := scaleway.NewInstanceIp(ctx, \"publicIp\", \u0026scaleway.InstanceIpArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tweb, err := scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t\tType:      pulumi.String(\"DEV1-S\"),\n\t\t\tImage:     pulumi.String(\"ubuntu_focal\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"front\"),\n\t\t\t\tpulumi.String(\"web\"),\n\t\t\t},\n\t\t\tIpId: publicIp.ID(),\n\t\t\tRootVolume: \u0026InstanceServerRootVolumeArgs{\n\t\t\t\tSizeInGb: pulumi.Int(20),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"webA\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    web.PublicIp,\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"webCname\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tType:    pulumi.String(\"CNAME\"),\n\t\t\tData:    pulumi.String(fmt.Sprintf(\"%v%v%v\", \"web.\", dnsZone, \".\")),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"webAlias\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tType:    pulumi.String(\"ALIAS\"),\n\t\t\tData:    pulumi.String(fmt.Sprintf(\"%v%v%v\", \"web.\", dnsZone, \".\")),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Multiple records\n\nSome record types can have multiple `data` with the same `name` (eg: `A`, `AAAA`, `MX`, `NS`...).  \nYou can duplicate a resource `scaleway.DomainRecord` with the same `name`, the records will be added.\n\nPlease note, some record (eg: `CNAME`, Multiple dynamic records of different types...) has to be unique.\n\n\n## Import\n\nRecord can be imported using the `{dns_zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/domainRecord:DomainRecord www subdomain.domain.tld/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The data of the view record\n"
                },
                "dnsZone": {
                    "type": "string",
                    "description": "The DNS Zone of the domain. If the DNS zone doesn't exist, it will be automatically created.\n"
                },
                "geoIp": {
                    "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                    "description": "The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Geo-IP-Records)\n"
                },
                "httpService": {
                    "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                    "description": "The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Healthcheck-records)\n"
                },
                "keepEmptyZone": {
                    "type": "boolean",
                    "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the record (can be an empty string for a root record).\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the record (mostly used with an `MX` record)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time To Tive of the record in seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n"
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                    },
                    "description": "The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Views-records)\n"
                },
                "weighteds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                    },
                    "description": "You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Weight-Records)\n"
                }
            },
            "required": [
                "data",
                "dnsZone",
                "name",
                "projectId",
                "type"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "The data of the view record\n"
                },
                "dnsZone": {
                    "type": "string",
                    "description": "The DNS Zone of the domain. If the DNS zone doesn't exist, it will be automatically created.\n"
                },
                "geoIp": {
                    "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                    "description": "The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Geo-IP-Records)\n"
                },
                "httpService": {
                    "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                    "description": "The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Healthcheck-records)\n"
                },
                "keepEmptyZone": {
                    "type": "boolean",
                    "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the record (can be an empty string for a root record).\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the record (mostly used with an `MX` record)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time To Tive of the record in seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n"
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                    },
                    "description": "The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Views-records)\n"
                },
                "weighteds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                    },
                    "description": "You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Weight-Records)\n"
                }
            },
            "requiredInputs": [
                "data",
                "dnsZone",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainRecord resources.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The data of the view record\n"
                    },
                    "dnsZone": {
                        "type": "string",
                        "description": "The DNS Zone of the domain. If the DNS zone doesn't exist, it will be automatically created.\n"
                    },
                    "geoIp": {
                        "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                        "description": "The Geo IP feature provides DNS resolution, based on the user’s geographical location. You can define a default IP that resolves if no Geo IP rule matches, and specify IPs for each geographical zone. [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Geo-IP-Records)\n"
                    },
                    "httpService": {
                        "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                        "description": "The DNS service checks the provided URL on the configured IPs and resolves the request to one of the IPs by excluding the ones not responding to the given string to check. [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Healthcheck-records)\n"
                    },
                    "keepEmptyZone": {
                        "type": "boolean",
                        "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Please note, each zone not deleted will [cost you money](https://www.scaleway.com/en/dns/)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record (can be an empty string for a root record).\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the record (mostly used with an `MX` record)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time To Tive of the record in seconds.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n"
                    },
                    "views": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                        },
                        "description": "The answer to a DNS request is based on the client’s (resolver) subnet. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Views-records)\n"
                    },
                    "weighteds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                        },
                        "description": "You provide a list of IPs with their corresponding weights. These weights are used to proportionally direct requests to each IP. Depending on the weight of a record more or fewer requests are answered with its related IP compared to the others in the list. *(Can be more than 1)* [Documentation and usage example](https://www.scaleway.com/en/docs/scaleway-dns/#-Weight-Records)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIp:InstanceIp": {
            "description": "Creates and manages Scaleway Compute Instance IPs. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#ips-268151).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst serverIp = new scaleway.InstanceIp(\"server_ip\", {});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nserver_ip = scaleway.InstanceIp(\"serverIp\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serverIp = new Scaleway.InstanceIp(\"serverIp\", new Scaleway.InstanceIpArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceIp(ctx, \"serverIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIPs can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceIp:InstanceIp server_ip fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the IP is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse dns attached to this IP\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server associated with this IP\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "address",
                "organizationId",
                "projectId",
                "reverse",
                "serverId",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the IP is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IP is associated with.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse dns attached to this IP\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server associated with this IP\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIpReverseDns:InstanceIpReverseDns": {
            "description": "Manages Scaleway Compute Instance IPs Reverse DNS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst serverIp = new scaleway.InstanceIp(\"serverIp\", {});\nconst reverse = new scaleway.InstanceIpReverseDns(\"reverse\", {\n    ipId: serverIp.id,\n    reverse: \"www.scaleway.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nserver_ip = scaleway.InstanceIp(\"serverIp\")\nreverse = scaleway.InstanceIpReverseDns(\"reverse\",\n    ip_id=server_ip.id,\n    reverse=\"www.scaleway.com\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serverIp = new Scaleway.InstanceIp(\"serverIp\", new Scaleway.InstanceIpArgs\n        {\n        });\n        var reverse = new Scaleway.InstanceIpReverseDns(\"reverse\", new Scaleway.InstanceIpReverseDnsArgs\n        {\n            IpId = serverIp.Id,\n            Reverse = \"www.scaleway.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tserverIp, err := scaleway.NewInstanceIp(ctx, \"serverIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceIpReverseDns(ctx, \"reverse\", \u0026scaleway.InstanceIpReverseDnsArgs{\n\t\t\tIpId:    serverIp.ID(),\n\t\t\tReverse: pulumi.String(\"www.scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIPs reverse DNS can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceIpReverseDns:InstanceIpReverseDns reverse fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "ipId",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "requiredInputs": [
                "ipId",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIpReverseDns resources.\n",
                "properties": {
                    "ipId": {
                        "type": "string",
                        "description": "The IP ID\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse DNS for this IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instancePlacementGroup:InstancePlacementGroup": {
            "description": "Creates and manages Compute Instance Placement Groups. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst availabilityGroup = new scaleway.InstancePlacementGroup(\"availability_group\", {});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\navailability_group = scaleway.InstancePlacementGroup(\"availabilityGroup\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var availabilityGroup = new Scaleway.InstancePlacementGroup(\"availabilityGroup\", new Scaleway.InstancePlacementGroupArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstancePlacementGroup(ctx, \"availabilityGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPlacement groups can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instancePlacementGroup:InstancePlacementGroup availability_group fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the placement group is associated with.\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `optional` or `enforced`.\n"
                },
                "policyRespected": {
                    "type": "boolean",
                    "description": "Is true when the policy is respected.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the placement group is associated with.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the placement group should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "policyRespected",
                "projectId",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group.\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `optional` or `enforced`.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the placement group is associated with.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the placement group should be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePlacementGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the placement group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the placement group is associated with.\n"
                    },
                    "policyMode": {
                        "type": "string",
                        "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `optional` or `enforced`.\n"
                    },
                    "policyRespected": {
                        "type": "boolean",
                        "description": "Is true when the policy is respected.\n"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the placement group is associated with.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the placement group should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instancePrivateNic:InstancePrivateNic": {
            "description": "Creates and manages Scaleway Instance Private NICs. For more information, see\n[the documentation](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    privateNetworkId: \"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n    serverId: \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    private_network_id=\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n    server_id=\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new Scaleway.InstancePrivateNicArgs\n        {\n            PrivateNetworkId = \"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n            ServerId = \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tPrivateNetworkId: pulumi.String(\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"),\n\t\t\tServerId:         pulumi.String(\"fr-par-1/11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nPrivate NICs can be imported using the `{zone}/{server_id}/{private_nic_id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instancePrivateNic:InstancePrivateNic server_volume fr-par-1/11111111-1111-1111-1111-111111111111/22222222-2222-2222-2222-222222222222\n```\n\n ",
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "MAC address of the NIC\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network attached to.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "macAddress",
                "privateNetworkId",
                "serverId",
                "zone"
            ],
            "inputProperties": {
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network attached to.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "requiredInputs": [
                "privateNetworkId",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePrivateNic resources.\n",
                "properties": {
                    "macAddress": {
                        "type": "string",
                        "description": "MAC address of the NIC\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network attached to.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the server associated with.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup": {
            "description": "\n\n\n## Import\n\nInstance security group can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceSecurityGroup:InstanceSecurityGroup web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                },
                "externalRules": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the security group is associated with.\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the security group is associated with.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean to specify whether the security group should be stateful or not.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the security group should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                },
                "externalRules": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the security group is associated with.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean to specify whether the security group should be stateful or not.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the security group should be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the security group.\n"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean",
                        "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                    },
                    "externalRules": {
                        "type": "boolean",
                        "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the security group is associated with.\n"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the security group is associated with.\n"
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "A boolean to specify whether the security group should be stateful or not.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the security group should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules": {
            "description": "\n\n\n## Import\n\nInstance security group rules can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of the security group.\n"
                }
            },
            "required": [
                "securityGroupId"
            ],
            "inputProperties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of the security group.\n"
                }
            },
            "requiredInputs": [
                "securityGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroupRules resources.\n",
                "properties": {
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The ID of the security group.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceServer:InstanceServer": {
            "description": "Creates and manages Scaleway Compute Instance servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#servers-8bf7d7).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst publicIp = new scaleway.InstanceIp(\"publicIp\", {});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_focal\",\n    ipId: publicIp.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\npublic_ip = scaleway.InstanceIp(\"publicIp\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_focal\",\n    ip_id=public_ip.id)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var publicIp = new Scaleway.InstanceIp(\"publicIp\", new Scaleway.InstanceIpArgs\n        {\n        });\n        var web = new Scaleway.InstanceServer(\"web\", new Scaleway.InstanceServerArgs\n        {\n            Type = \"DEV1-S\",\n            Image = \"ubuntu_focal\",\n            IpId = publicIp.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpublicIp, err := scaleway.NewInstanceIp(ctx, \"publicIp\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_focal\"),\n\t\t\tIpId:  publicIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### With additional volumes and tags\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst data = new scaleway.InstanceVolume(\"data\", {\n    sizeInGb: 100,\n    type: \"b_ssd\",\n});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_focal\",\n    tags: [\n        \"hello\",\n        \"public\",\n    ],\n    rootVolume: {\n        deleteOnTermination: false,\n    },\n    additionalVolumeIds: [data.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\ndata = scaleway.InstanceVolume(\"data\",\n    size_in_gb=100,\n    type=\"b_ssd\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_focal\",\n    tags=[\n        \"hello\",\n        \"public\",\n    ],\n    root_volume=scaleway.InstanceServerRootVolumeArgs(\n        delete_on_termination=False,\n    ),\n    additional_volume_ids=[data.id])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var data = new Scaleway.InstanceVolume(\"data\", new Scaleway.InstanceVolumeArgs\n        {\n            SizeInGb = 100,\n            Type = \"b_ssd\",\n        });\n        var web = new Scaleway.InstanceServer(\"web\", new Scaleway.InstanceServerArgs\n        {\n            Type = \"DEV1-S\",\n            Image = \"ubuntu_focal\",\n            Tags = \n            {\n                \"hello\",\n                \"public\",\n            },\n            RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n            {\n                DeleteOnTermination = false,\n            },\n            AdditionalVolumeIds = \n            {\n                data.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdata, err := scaleway.NewInstanceVolume(ctx, \"data\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tSizeInGb: pulumi.Int(100),\n\t\t\tType:     pulumi.String(\"b_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_focal\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hello\"),\n\t\t\t\tpulumi.String(\"public\"),\n\t\t\t},\n\t\t\tRootVolume: \u0026InstanceServerRootVolumeArgs{\n\t\t\t\tDeleteOnTermination: pulumi.Bool(false),\n\t\t\t},\n\t\t\tAdditionalVolumeIds: pulumi.StringArray{\n\t\t\t\tdata.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### With a reserved IP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst ip = new scaleway.InstanceIp(\"ip\", {});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"f974feac-abae-4365-b988-8ec7d1cec10d\",\n    tags: [\n        \"hello\",\n        \"public\",\n    ],\n    ipId: ip.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nip = scaleway.InstanceIp(\"ip\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"f974feac-abae-4365-b988-8ec7d1cec10d\",\n    tags=[\n        \"hello\",\n        \"public\",\n    ],\n    ip_id=ip.id)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ip = new Scaleway.InstanceIp(\"ip\", new Scaleway.InstanceIpArgs\n        {\n        });\n        var web = new Scaleway.InstanceServer(\"web\", new Scaleway.InstanceServerArgs\n        {\n            Type = \"DEV1-S\",\n            Image = \"f974feac-abae-4365-b988-8ec7d1cec10d\",\n            Tags = \n            {\n                \"hello\",\n                \"public\",\n            },\n            IpId = ip.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip, err := scaleway.NewInstanceIp(ctx, \"ip\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"f974feac-abae-4365-b988-8ec7d1cec10d\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hello\"),\n\t\t\t\tpulumi.String(\"public\"),\n\t\t\t},\n\t\t\tIpId: ip.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### With security group\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst www = new scaleway.InstanceSecurityGroup(\"www\", {\n    inboundDefaultPolicy: \"drop\",\n    outboundDefaultPolicy: \"accept\",\n    inboundRules: [\n        {\n            action: \"accept\",\n            port: \"22\",\n            ip: \"212.47.225.64\",\n        },\n        {\n            action: \"accept\",\n            port: \"80\",\n        },\n        {\n            action: \"accept\",\n            port: \"443\",\n        },\n    ],\n    outboundRules: [{\n        action: \"drop\",\n        ipRange: \"10.20.0.0/24\",\n    }],\n});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_focal\",\n    securityGroupId: www.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nwww = scaleway.InstanceSecurityGroup(\"www\",\n    inbound_default_policy=\"drop\",\n    outbound_default_policy=\"accept\",\n    inbound_rules=[\n        scaleway.InstanceSecurityGroupInboundRuleArgs(\n            action=\"accept\",\n            port=22,\n            ip=\"212.47.225.64\",\n        ),\n        scaleway.InstanceSecurityGroupInboundRuleArgs(\n            action=\"accept\",\n            port=80,\n        ),\n        scaleway.InstanceSecurityGroupInboundRuleArgs(\n            action=\"accept\",\n            port=443,\n        ),\n    ],\n    outbound_rules=[scaleway.InstanceSecurityGroupOutboundRuleArgs(\n        action=\"drop\",\n        ip_range=\"10.20.0.0/24\",\n    )])\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_focal\",\n    security_group_id=www.id)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var www = new Scaleway.InstanceSecurityGroup(\"www\", new Scaleway.InstanceSecurityGroupArgs\n        {\n            InboundDefaultPolicy = \"drop\",\n            OutboundDefaultPolicy = \"accept\",\n            InboundRules = \n            {\n                new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n                {\n                    Action = \"accept\",\n                    Port = 22,\n                    Ip = \"212.47.225.64\",\n                },\n                new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n                {\n                    Action = \"accept\",\n                    Port = 80,\n                },\n                new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n                {\n                    Action = \"accept\",\n                    Port = 443,\n                },\n            },\n            OutboundRules = \n            {\n                new Scaleway.Inputs.InstanceSecurityGroupOutboundRuleArgs\n                {\n                    Action = \"drop\",\n                    IpRange = \"10.20.0.0/24\",\n                },\n            },\n        });\n        var web = new Scaleway.InstanceServer(\"web\", new Scaleway.InstanceServerArgs\n        {\n            Type = \"DEV1-S\",\n            Image = \"ubuntu_focal\",\n            SecurityGroupId = www.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twww, err := scaleway.NewInstanceSecurityGroup(ctx, \"www\", \u0026scaleway.InstanceSecurityGroupArgs{\n\t\t\tInboundDefaultPolicy:  pulumi.String(\"drop\"),\n\t\t\tOutboundDefaultPolicy: pulumi.String(\"accept\"),\n\t\t\tInboundRules: InstanceSecurityGroupInboundRuleArray{\n\t\t\t\t\u0026InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(22),\n\t\t\t\t\tIp:     pulumi.String(\"212.47.225.64\"),\n\t\t\t\t},\n\t\t\t\t\u0026InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(80),\n\t\t\t\t},\n\t\t\t\t\u0026InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(443),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutboundRules: InstanceSecurityGroupOutboundRuleArray{\n\t\t\t\t\u0026InstanceSecurityGroupOutboundRuleArgs{\n\t\t\t\t\tAction:  pulumi.String(\"drop\"),\n\t\t\t\t\tIpRange: pulumi.String(\"10.20.0.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:            pulumi.String(\"DEV1-S\"),\n\t\t\tImage:           pulumi.String(\"ubuntu_focal\"),\n\t\t\tSecurityGroupId: www.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### With user data and cloud-init\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * from \"fs\";\n\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_focal\",\n    userData: {\n        foo: \"bar\",\n        \"cloud-init\": fs.readFileSync(`${path.module}/cloud-init.yml`),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_focal\",\n    user_data={\n        \"foo\": \"bar\",\n        \"cloud-init\": (lambda path: open(path).read())(f\"{path['module']}/cloud-init.yml\"),\n    })\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var web = new Scaleway.InstanceServer(\"web\", new Scaleway.InstanceServerArgs\n        {\n            Type = \"DEV1-S\",\n            Image = \"ubuntu_focal\",\n            UserData = \n            {\n                { \"foo\", \"bar\" },\n                { \"cloud-init\", File.ReadAllText($\"{path.Module}/cloud-init.yml\") },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_focal\"),\n\t\t\tUserData: pulumi.StringMap{\n\t\t\t\t\"foo\":        pulumi.String(\"bar\"),\n\t\t\t\t\"cloud-init\": readFileOrPanic(fmt.Sprintf(\"%v%v\", path.Module, \"/cloud-init.yml\")),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### With private network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst base = new scaleway.InstanceServer(\"base\", {\n    image: \"ubuntu_focal\",\n    type: \"DEV1-S\",\n    privateNetworks: [{\n        pnId: pn01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\nbase = scaleway.InstanceServer(\"base\",\n    image=\"ubuntu_focal\",\n    type=\"DEV1-S\",\n    private_networks=[scaleway.InstanceServerPrivateNetworkArgs(\n        pn_id=pn01.id,\n    )])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new Scaleway.VpcPrivateNetworkArgs\n        {\n        });\n        var @base = new Scaleway.InstanceServer(\"base\", new Scaleway.InstanceServerArgs\n        {\n            Image = \"ubuntu_focal\",\n            Type = \"DEV1-S\",\n            PrivateNetworks = \n            {\n                new Scaleway.Inputs.InstanceServerPrivateNetworkArgs\n                {\n                    PnId = pn01.Id,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"base\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_focal\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tPrivateNetworks: InstanceServerPrivateNetworkArray{\n\t\t\t\t\u0026InstanceServerPrivateNetworkArgs{\n\t\t\t\t\tPnId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Private Network\n\n\u003e **Important:** Updates to `private_network` will recreate a new private network interface.\n\n- `pn_id` - (Required) The private network ID where to connect.\n- `mac_address` The private NIC MAC address.\n- `status` The private NIC state.\n- `zone` - (Defaults to provider `zone`) The zone in which the server must be created.\n\n\u003e **Important:**\n\n- You can only attach an instance in the same zone as a private network.\n- Instance supports maximum 8 different private networks.\n\n\n## Import\n\nInstance servers can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceServer:InstanceServer web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find either the right `label` or the right local image `ID` for a given `type`.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "= (Optional) The ID of the reserved IP that is attached to the server.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                },
                "placementGroupPolicyRespected": {
                    "type": "boolean",
                    "description": "True when the placement group policy is respected.\n- `root_volume`\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Scaleway internal IP address of the server.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                    },
                    "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4 address of the server.\n"
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will recreate a new resource.\n"
                },
                "userData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The user data associated with the server\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "required": [
                "bootscriptId",
                "image",
                "ipv6Address",
                "ipv6Gateway",
                "ipv6PrefixLength",
                "name",
                "organizationId",
                "placementGroupPolicyRespected",
                "privateIp",
                "projectId",
                "publicIp",
                "rootVolume",
                "securityGroupId",
                "type",
                "zone"
            ],
            "inputProperties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find either the right `label` or the right local image `ID` for a given `type`.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "= (Optional) The ID of the reserved IP that is attached to the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                    },
                    "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will recreate a new resource.\n"
                },
                "userData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The user data associated with the server\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "requiredInputs": [
                "image",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceServer resources.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n"
                    },
                    "bootType": {
                        "type": "string",
                        "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                    },
                    "bootscriptId": {
                        "type": "string",
                        "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n"
                    },
                    "cloudInit": {
                        "type": "string",
                        "description": "The cloud init script associated with this server\n"
                    },
                    "enableDynamicIp": {
                        "type": "boolean",
                        "description": "If true a dynamic IP will be attached to the server.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Determines if IPv6 is enabled for the server.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find either the right `label` or the right local image `ID` for a given `type`.\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "= (Optional) The ID of the reserved IP that is attached to the server.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                    },
                    "placementGroupPolicyRespected": {
                        "type": "boolean",
                        "description": "True when the placement group policy is respected.\n- `root_volume`\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Scaleway internal IP address of the server.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                        },
                        "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is associated with.\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IPv4 address of the server.\n"
                    },
                    "rootVolume": {
                        "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                        "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will recreate a new resource.\n"
                    },
                    "userData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The user data associated with the server\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSnapshot:InstanceSnapshot": {
            "description": "Creates and manages Scaleway Compute Snapshots.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#snapshots-756fae).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.InstanceSnapshot(\"main\", {\n    volumeId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.InstanceSnapshot(\"main\", volume_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.InstanceSnapshot(\"main\", new Scaleway.InstanceSnapshotArgs\n        {\n            VolumeId = \"11111111-1111-1111-1111-111111111111\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceSnapshot(ctx, \"main\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nSnapshots can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceSnapshot:InstanceSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The snapshot creation time.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the snapshot is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the snapshot is associated with.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "(Optional) The size of the snapshot.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the snapshot. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the snapshot should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "projectId",
                "sizeInGb",
                "type",
                "volumeId",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the snapshot is associated with.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the snapshot should be created.\n"
                }
            },
            "requiredInputs": [
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSnapshot resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The snapshot creation time.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the snapshot is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the snapshot is associated with.\n"
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "(Optional) The size of the snapshot.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the snapshot. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The ID of the volume to take a snapshot from.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the snapshot should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceVolume:InstanceVolume": {
            "description": "Creates and manages Scaleway Compute Instance Volumes.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst serverVolume = new scaleway.InstanceVolume(\"server_volume\", {\n    sizeInGb: 20,\n    type: \"l_ssd\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nserver_volume = scaleway.InstanceVolume(\"serverVolume\",\n    size_in_gb=20,\n    type=\"l_ssd\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serverVolume = new Scaleway.InstanceVolume(\"serverVolume\", new Scaleway.InstanceVolumeArgs\n        {\n            SizeInGb = 20,\n            Type = \"l_ssd\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceVolume(ctx, \"serverVolume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t\tType:     pulumi.String(\"l_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nvolumes can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/instanceVolume:InstanceVolume server_volume fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "Create a volume based on a image\n"
                },
                "fromVolumeId": {
                    "type": "string",
                    "description": "If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the volume is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the volume is associated with.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The id of the associated server.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_volume_id` should be specified.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the volume should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "serverId",
                "type",
                "zone"
            ],
            "inputProperties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "Create a volume based on a image\n"
                },
                "fromVolumeId": {
                    "type": "string",
                    "description": "If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the volume is associated with.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_volume_id` should be specified.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the volume should be created.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceVolume resources.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string",
                        "description": "Create a volume based on a image\n"
                    },
                    "fromVolumeId": {
                        "type": "string",
                        "description": "If set, the new volume will be copied from this volume. Only one of `size_in_gb`, `from_volume_id` and `from_snapshot_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the volume is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the volume is associated with.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The id of the associated server.\n"
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "The size of the volume. Only one of `size_in_gb`, `from_volume_id` and `from_volume_id` should be specified.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the volume should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotDevice:IotDevice": {
            "description": "\n\n\n## Import\n\nIoT devices can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iotDevice:IotDevice device01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "allowInsecure": {
                    "type": "boolean",
                    "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n"
                },
                "allowMultipleConnections": {
                    "type": "boolean",
                    "description": "Allow more than one simultaneous connection using the same device credentials.\n"
                },
                "certificate": {
                    "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                    "description": "The certificate bundle of the device.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the device was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IoT device (e.g. `living room`).\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the hub on which this device will be created.\n"
                },
                "isConnected": {
                    "type": "boolean",
                    "description": "The current connection status of the device.\n"
                },
                "lastActivityAt": {
                    "type": "string",
                    "description": "The last MQTT activity of the device.\n"
                },
                "messageFilters": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                    "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT device you want to create (e.g. `my-device`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the device.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the device resource was updated.\n"
                }
            },
            "required": [
                "certificate",
                "createdAt",
                "hubId",
                "isConnected",
                "lastActivityAt",
                "name",
                "region",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "allowInsecure": {
                    "type": "boolean",
                    "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n"
                },
                "allowMultipleConnections": {
                    "type": "boolean",
                    "description": "Allow more than one simultaneous connection using the same device credentials.\n"
                },
                "certificate": {
                    "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                    "description": "The certificate bundle of the device.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IoT device (e.g. `living room`).\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the hub on which this device will be created.\n"
                },
                "messageFilters": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                    "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT device you want to create (e.g. `my-device`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                }
            },
            "requiredInputs": [
                "hubId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotDevice resources.\n",
                "properties": {
                    "allowInsecure": {
                        "type": "boolean",
                        "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n"
                    },
                    "allowMultipleConnections": {
                        "type": "boolean",
                        "description": "Allow more than one simultaneous connection using the same device credentials.\n"
                    },
                    "certificate": {
                        "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                        "description": "The certificate bundle of the device.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the device was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the IoT device (e.g. `living room`).\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The ID of the hub on which this device will be created.\n"
                    },
                    "isConnected": {
                        "type": "boolean",
                        "description": "The current connection status of the device.\n"
                    },
                    "lastActivityAt": {
                        "type": "string",
                        "description": "The last MQTT activity of the device.\n"
                    },
                    "messageFilters": {
                        "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                        "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT device you want to create (e.g. `my-device`).\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the device.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the device resource was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotHub:IotHub": {
            "description": "\n\n\n## Import\n\nIoT Hubs can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iotHub:IotHub hub01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "connectedDeviceCount": {
                    "type": "integer",
                    "description": "The current number of connected devices in the Hub.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Hub was created.\n"
                },
                "deviceAutoProvisioning": {
                    "type": "boolean",
                    "description": "Wether to enable the device auto provisioning or not\n"
                },
                "deviceCount": {
                    "type": "integer",
                    "description": "The number of registered devices in the Hub.\n"
                },
                "disableEvents": {
                    "type": "boolean",
                    "description": "Whether to enable the hub events or not\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Wether the IoT Hub instance should be enabled or not.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The MQTT network endpoint to connect MQTT devices to.\n"
                },
                "eventsTopicPrefix": {
                    "type": "string",
                    "description": "Topic prefix for the hub events\n"
                },
                "hubCa": {
                    "type": "string",
                    "description": "Custom user provided certificate authority\n"
                },
                "hubCaChallenge": {
                    "type": "string",
                    "description": "Challenge certificate for the user provided hub CA\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "productPlan": {
                    "type": "string",
                    "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the Hub.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the Hub resource was updated.\n"
                }
            },
            "required": [
                "connectedDeviceCount",
                "createdAt",
                "deviceCount",
                "endpoint",
                "name",
                "organizationId",
                "productPlan",
                "projectId",
                "region",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "deviceAutoProvisioning": {
                    "type": "boolean",
                    "description": "Wether to enable the device auto provisioning or not\n"
                },
                "disableEvents": {
                    "type": "boolean",
                    "description": "Whether to enable the hub events or not\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Wether the IoT Hub instance should be enabled or not.\n"
                },
                "eventsTopicPrefix": {
                    "type": "string",
                    "description": "Topic prefix for the hub events\n"
                },
                "hubCa": {
                    "type": "string",
                    "description": "Custom user provided certificate authority\n"
                },
                "hubCaChallenge": {
                    "type": "string",
                    "description": "Challenge certificate for the user provided hub CA\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                },
                "productPlan": {
                    "type": "string",
                    "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                }
            },
            "requiredInputs": [
                "productPlan"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotHub resources.\n",
                "properties": {
                    "connectedDeviceCount": {
                        "type": "integer",
                        "description": "The current number of connected devices in the Hub.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Hub was created.\n"
                    },
                    "deviceAutoProvisioning": {
                        "type": "boolean",
                        "description": "Wether to enable the device auto provisioning or not\n"
                    },
                    "deviceCount": {
                        "type": "integer",
                        "description": "The number of registered devices in the Hub.\n"
                    },
                    "disableEvents": {
                        "type": "boolean",
                        "description": "Whether to enable the hub events or not\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Wether the IoT Hub instance should be enabled or not.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The MQTT network endpoint to connect MQTT devices to.\n"
                    },
                    "eventsTopicPrefix": {
                        "type": "string",
                        "description": "Topic prefix for the hub events\n"
                    },
                    "hubCa": {
                        "type": "string",
                        "description": "Custom user provided certificate authority\n"
                    },
                    "hubCaChallenge": {
                        "type": "string",
                        "description": "Challenge certificate for the user provided hub CA\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "productPlan": {
                        "type": "string",
                        "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the Hub.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the Hub resource was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotNetwork:IotNetwork": {
            "description": "\n\n\n## Import\n\nIoT Networks can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/iotNetwork:IotNetwork net01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Network was created.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint to use when interacting with the network.\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Network will be attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The endpoint key to keep secret.\n"
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "The prefix that will be prepended to all topics for this Network.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The network type to create (e.g. `sigfox`).\n"
                }
            },
            "required": [
                "createdAt",
                "endpoint",
                "hubId",
                "name",
                "secret",
                "type"
            ],
            "inputProperties": {
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Network will be attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n"
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "The prefix that will be prepended to all topics for this Network.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The network type to create (e.g. `sigfox`).\n"
                }
            },
            "requiredInputs": [
                "hubId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotNetwork resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Network was created.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint to use when interacting with the network.\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The hub ID to which the Network will be attached to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The endpoint key to keep secret.\n"
                    },
                    "topicPrefix": {
                        "type": "string",
                        "description": "The prefix that will be prepended to all topics for this Network.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The network type to create (e.g. `sigfox`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotRoute:IotRoute": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the IoT Route\n"
                },
                "database": {
                    "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                    "description": "Database Route parameters\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the route's hub\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the route\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "rest": {
                    "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                    "description": "Rest Route parameters\n"
                },
                "s3": {
                    "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                    "description": "S3 Route parameters\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Topic the route subscribes to (wildcards allowed)\n"
                }
            },
            "required": [
                "createdAt",
                "hubId",
                "name",
                "region",
                "topic"
            ],
            "inputProperties": {
                "database": {
                    "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                    "description": "Database Route parameters\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the route's hub\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the route\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "rest": {
                    "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                    "description": "Rest Route parameters\n"
                },
                "s3": {
                    "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                    "description": "S3 Route parameters\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Topic the route subscribes to (wildcards allowed)\n"
                }
            },
            "requiredInputs": [
                "hubId",
                "topic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotRoute resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the IoT Route\n"
                    },
                    "database": {
                        "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                        "description": "Database Route parameters\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The ID of the route's hub\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the route\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n"
                    },
                    "rest": {
                        "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                        "description": "Rest Route parameters\n"
                    },
                    "s3": {
                        "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                        "description": "S3 Route parameters\n"
                    },
                    "topic": {
                        "type": "string",
                        "description": "The Topic the route subscribes to (wildcards allowed)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/kubernetesCluster:KubernetesCluster": {
            "description": "\n\n\n## Import\n\nKubernetes clusters can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/kubernetesCluster:KubernetesCluster mycluster fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                },
                "apiserverCertSans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                },
                "apiserverUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade",
                    "description": "The auto upgrade configuration.\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig",
                    "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the cluster.\n"
                },
                "deleteAdditionalResources": {
                    "type": "boolean",
                    "description": "Delete additional resources like block volumes and loadbalancers that were created in Kubernetes on cluster deletion.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Kubernetes cluster.\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterKubeconfig:KubernetesClusterKubeconfig"
                    },
                    "description": "The kubeconfig configuration file of the Kubernetes cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Kubernetes cluster.\n"
                },
                "openIdConnectConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig",
                    "description": "The OpenID Connect configuration of the cluster\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the cluster is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cluster is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the cluster should be created.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Kubernetes cluster.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Kubernetes cluster.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Kubernetes cluster.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the cluster.\n"
                },
                "upgradeAvailable": {
                    "type": "boolean",
                    "description": "Set to `true` if a newer Kubernetes version is available.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes cluster.\n"
                },
                "wildcardDns": {
                    "type": "string",
                    "description": "The DNS wildcard that points to all ready nodes.\n- `kubeconfig`\n"
                }
            },
            "required": [
                "apiserverUrl",
                "autoUpgrade",
                "autoscalerConfig",
                "cni",
                "createdAt",
                "kubeconfigs",
                "name",
                "openIdConnectConfig",
                "organizationId",
                "projectId",
                "region",
                "status",
                "type",
                "updatedAt",
                "upgradeAvailable",
                "version",
                "wildcardDns"
            ],
            "inputProperties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                },
                "apiserverCertSans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade",
                    "description": "The auto upgrade configuration.\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig",
                    "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "deleteAdditionalResources": {
                    "type": "boolean",
                    "description": "Delete additional resources like block volumes and loadbalancers that were created in Kubernetes on cluster deletion.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Kubernetes cluster.\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Kubernetes cluster.\n"
                },
                "openIdConnectConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig",
                    "description": "The OpenID Connect configuration of the cluster\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cluster is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the cluster should be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Kubernetes cluster.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Kubernetes cluster.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes cluster.\n"
                }
            },
            "requiredInputs": [
                "cni",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesCluster resources.\n",
                "properties": {
                    "admissionPlugins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                    },
                    "apiserverCertSans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                    },
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The URL of the Kubernetes API server.\n"
                    },
                    "autoUpgrade": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade",
                        "description": "The auto upgrade configuration.\n"
                    },
                    "autoscalerConfig": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig",
                        "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the cluster.\n"
                    },
                    "deleteAdditionalResources": {
                        "type": "boolean",
                        "description": "Delete additional resources like block volumes and loadbalancers that were created in Kubernetes on cluster deletion.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Kubernetes cluster.\n"
                    },
                    "featureGates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/KubernetesClusterKubeconfig:KubernetesClusterKubeconfig"
                        },
                        "description": "The kubeconfig configuration file of the Kubernetes cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the Kubernetes cluster.\n"
                    },
                    "openIdConnectConfig": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig",
                        "description": "The OpenID Connect configuration of the cluster\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the cluster is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the cluster is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the cluster should be created.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Kubernetes cluster.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Kubernetes cluster.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Kubernetes cluster.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the cluster.\n"
                    },
                    "upgradeAvailable": {
                        "type": "boolean",
                        "description": "Set to `true` if a newer Kubernetes version is available.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the Kubernetes cluster.\n"
                    },
                    "wildcardDns": {
                        "type": "string",
                        "description": "The DNS wildcard that points to all ready nodes.\n- `kubeconfig`\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/kubernetesNodePool:KubernetesNodePool": {
            "description": "Creates and manages Scaleway Kubernetes cluster pools. For more information, see [the documentation](https://developers.scaleway.com/en/products/k8s/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst jack = new scaleway.KubernetesCluster(\"jack\", {\n    version: \"1.19.4\",\n    cni: \"cilium\",\n});\nconst bill = new scaleway.KubernetesNodePool(\"bill\", {\n    clusterId: jack.id,\n    nodeType: \"DEV1-M\",\n    size: 3,\n    minSize: 0,\n    maxSize: 10,\n    autoscaling: true,\n    autohealing: true,\n    containerRuntime: \"containerd\",\n    placementGroupId: \"1267e3fd-a51c-49ed-ad12-857092ee3a3d\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\njack = scaleway.KubernetesCluster(\"jack\",\n    version=\"1.19.4\",\n    cni=\"cilium\")\nbill = scaleway.KubernetesNodePool(\"bill\",\n    cluster_id=jack.id,\n    node_type=\"DEV1-M\",\n    size=3,\n    min_size=0,\n    max_size=10,\n    autoscaling=True,\n    autohealing=True,\n    container_runtime=\"containerd\",\n    placement_group_id=\"1267e3fd-a51c-49ed-ad12-857092ee3a3d\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var jack = new Scaleway.KubernetesCluster(\"jack\", new Scaleway.KubernetesClusterArgs\n        {\n            Version = \"1.19.4\",\n            Cni = \"cilium\",\n        });\n        var bill = new Scaleway.KubernetesNodePool(\"bill\", new Scaleway.KubernetesNodePoolArgs\n        {\n            ClusterId = jack.Id,\n            NodeType = \"DEV1-M\",\n            Size = 3,\n            MinSize = 0,\n            MaxSize = 10,\n            Autoscaling = true,\n            Autohealing = true,\n            ContainerRuntime = \"containerd\",\n            PlacementGroupId = \"1267e3fd-a51c-49ed-ad12-857092ee3a3d\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjack, err := scaleway.NewKubernetesCluster(ctx, \"jack\", \u0026scaleway.KubernetesClusterArgs{\n\t\t\tVersion: pulumi.String(\"1.19.4\"),\n\t\t\tCni:     pulumi.String(\"cilium\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewKubernetesNodePool(ctx, \"bill\", \u0026scaleway.KubernetesNodePoolArgs{\n\t\t\tClusterId:        jack.ID(),\n\t\t\tNodeType:         pulumi.String(\"DEV1-M\"),\n\t\t\tSize:             pulumi.Int(3),\n\t\t\tMinSize:          pulumi.Int(0),\n\t\t\tMaxSize:          pulumi.Int(10),\n\t\t\tAutoscaling:      pulumi.Bool(true),\n\t\t\tAutohealing:      pulumi.Bool(true),\n\t\t\tContainerRuntime: pulumi.String(\"containerd\"),\n\t\t\tPlacementGroupId: pulumi.String(\"1267e3fd-a51c-49ed-ad12-857092ee3a3d\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nKubernetes pools can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/kubernetesNodePool:KubernetesNodePool mypool fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enables the autohealing feature for this pool.\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster on which this pool will be created.\n"
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the pool.\n"
                },
                "currentSize": {
                    "type": "integer",
                    "description": "The actual size of the pool\n"
                },
                "kubeletArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Kubelet arguments to be used by this pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The commercial type of the pool instances.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/KubernetesNodePoolNode:KubernetesNodePoolNode"
                    },
                    "description": "(List of) The nodes in the default pool.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the pool should be created.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the pool.\n"
                },
                "upgradePolicy": {
                    "$ref": "#/types/scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy",
                    "description": "The Pool upgrade policy\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the pool.\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                }
            },
            "required": [
                "clusterId",
                "createdAt",
                "currentSize",
                "maxSize",
                "name",
                "nodeType",
                "nodes",
                "region",
                "size",
                "status",
                "updatedAt",
                "upgradePolicy",
                "version",
                "zone"
            ],
            "inputProperties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enables the autohealing feature for this pool.\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster on which this pool will be created.\n"
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "kubeletArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Kubelet arguments to be used by this pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The commercial type of the pool instances.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the pool should be created.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                },
                "upgradePolicy": {
                    "$ref": "#/types/scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy",
                    "description": "The Pool upgrade policy\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "nodeType",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesNodePool resources.\n",
                "properties": {
                    "autohealing": {
                        "type": "boolean",
                        "description": "Enables the autohealing feature for this pool.\n"
                    },
                    "autoscaling": {
                        "type": "boolean",
                        "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Kubernetes cluster on which this pool will be created.\n"
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the pool.\n"
                    },
                    "currentSize": {
                        "type": "integer",
                        "description": "The actual size of the pool\n"
                    },
                    "kubeletArgs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The Kubelet arguments to be used by this pool\n"
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The commercial type of the pool instances.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/KubernetesNodePoolNode:KubernetesNodePoolNode"
                        },
                        "description": "(List of) The nodes in the default pool.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the pool should be created.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the pool.\n"
                    },
                    "upgradePolicy": {
                        "$ref": "#/types/scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy",
                        "description": "The Pool upgrade policy\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the pool.\n"
                    },
                    "waitForPoolReady": {
                        "type": "boolean",
                        "description": "Whether to wait for the pool to be ready.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancer:Loadbalancer": {
            "description": "Creates and manages Scaleway Load-Balancers.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst ip = new scaleway.LoadbalancerIp(\"ip\", {});\nconst base = new scaleway.Loadbalancer(\"base\", {\n    ipId: ip.id,\n    zone: \"fr-par-1\",\n    type: \"LB-S\",\n    releaseIp: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nip = scaleway.LoadbalancerIp(\"ip\")\nbase = scaleway.Loadbalancer(\"base\",\n    ip_id=ip.id,\n    zone=\"fr-par-1\",\n    type=\"LB-S\",\n    release_ip=True)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ip = new Scaleway.LoadbalancerIp(\"ip\", new Scaleway.LoadbalancerIpArgs\n        {\n        });\n        var @base = new Scaleway.Loadbalancer(\"base\", new Scaleway.LoadbalancerArgs\n        {\n            IpId = ip.Id,\n            Zone = \"fr-par-1\",\n            Type = \"LB-S\",\n            ReleaseIp = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip, err := scaleway.NewLoadbalancerIp(ctx, \"ip\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"base\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId:      ip.ID(),\n\t\t\tZone:      pulumi.String(\"fr-par-1\"),\n\t\t\tType:      pulumi.String(\"LB-S\"),\n\t\t\tReleaseIp: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## IP ID\n\nSince v1.15.0, `ip_id` is a required field. This means that now a separate `scaleway.LoadbalancerIp` is required.\nWhen importing, the IP needs to be imported as well as the LB.\nWhen upgrading to v1.15.0, you will need to create a new `scaleway.LoadbalancerIp` resource and import it.\n\nFor instance, if you had the following:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst base = new scaleway.Loadbalancer(\"base\", {\n    type: \"LB-S\",\n    zone: \"fr-par-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nbase = scaleway.Loadbalancer(\"base\",\n    type=\"LB-S\",\n    zone=\"fr-par-1\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @base = new Scaleway.Loadbalancer(\"base\", new Scaleway.LoadbalancerArgs\n        {\n            Type = \"LB-S\",\n            Zone = \"fr-par-1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancer(ctx, \"base\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t\tZone: pulumi.String(\"fr-par-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nYou will need to update it to:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst ip = new scaleway.LoadbalancerIp(\"ip\", {});\nconst base = new scaleway.Loadbalancer(\"base\", {\n    ipId: ip.id,\n    zone: \"fr-par-1\",\n    type: \"LB-S\",\n    releaseIp: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nip = scaleway.LoadbalancerIp(\"ip\")\nbase = scaleway.Loadbalancer(\"base\",\n    ip_id=ip.id,\n    zone=\"fr-par-1\",\n    type=\"LB-S\",\n    release_ip=True)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ip = new Scaleway.LoadbalancerIp(\"ip\", new Scaleway.LoadbalancerIpArgs\n        {\n        });\n        var @base = new Scaleway.Loadbalancer(\"base\", new Scaleway.LoadbalancerArgs\n        {\n            IpId = ip.Id,\n            Zone = \"fr-par-1\",\n            Type = \"LB-S\",\n            ReleaseIp = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip, err := scaleway.NewLoadbalancerIp(ctx, \"ip\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"base\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId:      ip.ID(),\n\t\t\tZone:      pulumi.String(\"fr-par-1\"),\n\t\t\tType:      pulumi.String(\"LB-S\"),\n\t\t\tReleaseIp: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Private Network\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst ip01 = new scaleway.LoadbalancerIp(\"ip01\", {});\nconst pnLB01 = new scaleway.VpcPrivateNetwork(\"pnLB01\", {});\nconst lb01 = new scaleway.Loadbalancer(\"lb01\", {\n    ipId: ip01.id,\n    type: \"LB-S\",\n    releaseIp: false,\n    privateNetworks: [{\n        privateNetworkId: pnLB01.id,\n        staticConfigs: [\n            \"172.16.0.100\",\n            \"172.16.0.101\",\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nip01 = scaleway.LoadbalancerIp(\"ip01\")\npn_lb01 = scaleway.VpcPrivateNetwork(\"pnLB01\")\nlb01 = scaleway.Loadbalancer(\"lb01\",\n    ip_id=ip01.id,\n    type=\"LB-S\",\n    release_ip=False,\n    private_networks=[scaleway.LoadbalancerPrivateNetworkArgs(\n        private_network_id=pn_lb01.id,\n        static_configs=[\n            \"172.16.0.100\",\n            \"172.16.0.101\",\n        ],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ip01 = new Scaleway.LoadbalancerIp(\"ip01\", new Scaleway.LoadbalancerIpArgs\n        {\n        });\n        var pnLB01 = new Scaleway.VpcPrivateNetwork(\"pnLB01\", new Scaleway.VpcPrivateNetworkArgs\n        {\n        });\n        var lb01 = new Scaleway.Loadbalancer(\"lb01\", new Scaleway.LoadbalancerArgs\n        {\n            IpId = ip01.Id,\n            Type = \"LB-S\",\n            ReleaseIp = false,\n            PrivateNetworks = \n            {\n                new Scaleway.Inputs.LoadbalancerPrivateNetworkArgs\n                {\n                    PrivateNetworkId = pnLB01.Id,\n                    StaticConfigs = \n                    {\n                        \"172.16.0.100\",\n                        \"172.16.0.101\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLoadbalancerIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpnLB01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pnLB01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"lb01\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId:      ip01.ID(),\n\t\t\tType:      pulumi.String(\"LB-S\"),\n\t\t\tReleaseIp: pulumi.Bool(false),\n\t\t\tPrivateNetworks: LoadbalancerPrivateNetworkArray{\n\t\t\t\t\u0026LoadbalancerPrivateNetworkArgs{\n\t\t\t\t\tPrivateNetworkId: pnLB01.ID(),\n\t\t\t\t\tStaticConfigs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"172.16.0.100\"),\n\t\t\t\t\t\tpulumi.String(\"172.16.0.101\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003e **Important:** Updates to `private_network` will recreate the attachment.\n\n- `private_network_id` - (Required) The ID of the Private Network to associate.\n\n- `static_config` - (Optional) Define two local ip address of your choice for each load balancer instance. See below.\n\n- `dhcp_config` - (Optional) Set to true if you want to let DHCP assign IP addresses. See below.\n\n\u003e **Important:**  Only one of static_config and dhcp_config may be set.\n\n- `zone` - (Defaults to provider `zone`) The zone in which the private network was created.\n\n\n## Import\n\nLoad-Balancer can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/loadbalancer:Loadbalancer lb01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n Be aware that you will also need to import the `scaleway_lb_ip` resource. ",
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The load-balance public IP Address\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the associated IP. See below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the load-balancer is associated with.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork"
                    },
                    "description": "List of private network to connect with your load balancer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the load-balancer is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the resource\n"
                },
                "releaseIp": {
                    "type": "boolean",
                    "description": "The release_ip allow release the ip address associated with the load-balancers.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the load-balancers.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the load-balancer.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "ipAddress",
                "ipId",
                "name",
                "organizationId",
                "projectId",
                "region",
                "type",
                "zone"
            ],
            "inputProperties": {
                "ipId": {
                    "type": "string",
                    "description": "The ID of the associated IP. See below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork"
                    },
                    "description": "List of private network to connect with your load balancer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the load-balancer is associated with.\n"
                },
                "releaseIp": {
                    "type": "boolean",
                    "description": "The release_ip allow release the ip address associated with the load-balancers.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the load-balancers.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the load-balancer.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "requiredInputs": [
                "ipId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Loadbalancer resources.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The load-balance public IP Address\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The ID of the associated IP. See below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load-balancer.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the load-balancer is associated with.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork"
                        },
                        "description": "List of private network to connect with your load balancer\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the load-balancer is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the resource\n"
                    },
                    "releaseIp": {
                        "type": "boolean",
                        "description": "The release_ip allow release the ip address associated with the load-balancers.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the load-balancers.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the load-balancer.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerBackend:LoadbalancerBackend": {
            "description": "Creates and manages Scaleway Load-Balancer Backends.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst backend01 = new scaleway.LoadbalancerBackend(\"backend01\", {\n    lbId: scaleway_lb.lb01.id,\n    forwardProtocol: \"http\",\n    forwardPort: \"80\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nbackend01 = scaleway.LoadbalancerBackend(\"backend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    forward_protocol=\"http\",\n    forward_port=80)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var backend01 = new Scaleway.LoadbalancerBackend(\"backend01\", new Scaleway.LoadbalancerBackendArgs\n        {\n            LbId = scaleway_lb.Lb01.Id,\n            ForwardProtocol = \"http\",\n            ForwardPort = 80,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerBackend(ctx, \"backend01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### With HTTP Health Check\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst backend01 = new scaleway.LoadbalancerBackend(\"backend01\", {\n    lbId: scaleway_lb.lb01.id,\n    forwardProtocol: \"http\",\n    forwardPort: \"80\",\n    healthCheckHttp: {\n        uri: \"www.test.com/health\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nbackend01 = scaleway.LoadbalancerBackend(\"backend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    forward_protocol=\"http\",\n    forward_port=80,\n    health_check_http=scaleway.LoadbalancerBackendHealthCheckHttpArgs(\n        uri=\"www.test.com/health\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var backend01 = new Scaleway.LoadbalancerBackend(\"backend01\", new Scaleway.LoadbalancerBackendArgs\n        {\n            LbId = scaleway_lb.Lb01.Id,\n            ForwardProtocol = \"http\",\n            ForwardPort = 80,\n            HealthCheckHttp = new Scaleway.Inputs.LoadbalancerBackendHealthCheckHttpArgs\n            {\n                Uri = \"www.test.com/health\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerBackend(ctx, \"backend01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tHealthCheckHttp: \u0026LoadbalancerBackendHealthCheckHttpArgs{\n\t\t\t\tUri: pulumi.String(\"www.test.com/health\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nLoad-Balancer backend can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/loadbalancerBackend:LoadbalancerBackend backend01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers.\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol. Possible values are: `tcp` or `http`.\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests.\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp",
                    "description": "This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps",
                    "description": "This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to.\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp",
                    "description": "This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this backend is attached to.\n\u003e **Important:** Updates to `lb_id` will recreate the backend.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer backend.\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.\n",
                    "deprecationMessage": "Please use proxy_protocol instead"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of backend server IP addresses. Addresses can be either IPv4 or IPv6.\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time. (e.g.: `1s`)\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time. (e.g.: `1s`)\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time. (e.g.: `1s`)\n"
                }
            },
            "required": [
                "forwardPort",
                "forwardProtocol",
                "healthCheckPort",
                "healthCheckTcp",
                "lbId",
                "name"
            ],
            "inputProperties": {
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers.\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol. Possible values are: `tcp` or `http`.\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests.\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp",
                    "description": "This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps",
                    "description": "This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to.\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp",
                    "description": "This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this backend is attached to.\n\u003e **Important:** Updates to `lb_id` will recreate the backend.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer backend.\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.\n",
                    "deprecationMessage": "Please use proxy_protocol instead"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of backend server IP addresses. Addresses can be either IPv4 or IPv6.\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time. (e.g.: `1s`)\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time. (e.g.: `1s`)\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time. (e.g.: `1s`)\n"
                }
            },
            "requiredInputs": [
                "forwardPort",
                "forwardProtocol",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerBackend resources.\n",
                "properties": {
                    "forwardPort": {
                        "type": "integer",
                        "description": "User sessions will be forwarded to this port of backend servers.\n"
                    },
                    "forwardPortAlgorithm": {
                        "type": "string",
                        "description": "Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.\n"
                    },
                    "forwardProtocol": {
                        "type": "string",
                        "description": "Backend protocol. Possible values are: `tcp` or `http`.\n"
                    },
                    "healthCheckDelay": {
                        "type": "string",
                        "description": "Interval between two HC requests.\n"
                    },
                    "healthCheckHttp": {
                        "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp",
                        "description": "This block enable HTTP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                    },
                    "healthCheckHttps": {
                        "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps",
                        "description": "This block enable HTTPS health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                    },
                    "healthCheckMaxRetries": {
                        "type": "integer",
                        "description": "Number of allowed failed HC requests before the backend server is marked down.\n"
                    },
                    "healthCheckPort": {
                        "type": "integer",
                        "description": "Port the HC requests will be send to.\n"
                    },
                    "healthCheckTcp": {
                        "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp",
                        "description": "This block enable TCP health check. Only one of `health_check_tcp`, `health_check_http` and `health_check_https` should be specified.\n"
                    },
                    "healthCheckTimeout": {
                        "type": "string",
                        "description": "Timeout before we consider a HC request failed.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this backend is attached to.\n\u003e **Important:** Updates to `lb_id` will recreate the backend.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load-balancer backend.\n"
                    },
                    "onMarkedDownAction": {
                        "type": "string",
                        "description": "Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdown_sessions`.\n"
                    },
                    "proxyProtocol": {
                        "type": "string",
                        "description": "Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2_ssl`, `v2_ssl_cn`)\n"
                    },
                    "sendProxyV2": {
                        "type": "boolean",
                        "description": "DEPRECATED please use `proxy_protocol` instead - (Default: `false`) Enables PROXY protocol version 2.\n",
                        "deprecationMessage": "Please use proxy_protocol instead"
                    },
                    "serverIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of backend server IP addresses. Addresses can be either IPv4 or IPv6.\n"
                    },
                    "stickySessions": {
                        "type": "string",
                        "description": "Load balancing algorithm. Possible values are: `none`, `cookie` and `table`.\n"
                    },
                    "stickySessionsCookieName": {
                        "type": "string",
                        "description": "Cookie name for for sticky sessions. Only applicable when sticky_sessions is set to `cookie`.\n"
                    },
                    "timeoutConnect": {
                        "type": "string",
                        "description": "Maximum initial server connection establishment time. (e.g.: `1s`)\n"
                    },
                    "timeoutServer": {
                        "type": "string",
                        "description": "Maximum server connection inactivity time. (e.g.: `1s`)\n"
                    },
                    "timeoutTunnel": {
                        "type": "string",
                        "description": "Maximum tunnel inactivity time. (e.g.: `1s`)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerCertificate:LoadbalancerCertificate": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "Main domain of the certificate.\n"
                },
                "customCertificate": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate",
                    "description": "Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The identifier (SHA-1) of the certificate\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this certificate is attached to.\n"
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt",
                    "description": "Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate backend.\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "The not valid after validity bound timestamp\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "The not valid before validity bound timestamp\n"
                },
                "status": {
                    "type": "string",
                    "description": "Certificate status\n"
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of alternative domain names.\n"
                }
            },
            "required": [
                "commonName",
                "fingerprint",
                "lbId",
                "name",
                "notValidAfter",
                "notValidBefore",
                "status",
                "subjectAlternativeNames"
            ],
            "inputProperties": {
                "customCertificate": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate",
                    "description": "Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this certificate is attached to.\n"
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt",
                    "description": "Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate backend.\n"
                }
            },
            "requiredInputs": [
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerCertificate resources.\n",
                "properties": {
                    "commonName": {
                        "type": "string",
                        "description": "Main domain of the certificate.\n"
                    },
                    "customCertificate": {
                        "$ref": "#/types/scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate",
                        "description": "Configuration block for custom certificate chain. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The identifier (SHA-1) of the certificate\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this certificate is attached to.\n"
                    },
                    "letsencrypt": {
                        "$ref": "#/types/scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt",
                        "description": "Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `custom_certificate` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate backend.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "The not valid after validity bound timestamp\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "The not valid before validity bound timestamp\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Certificate status\n"
                    },
                    "subjectAlternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of alternative domain names.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerFrontend:LoadbalancerFrontend": {
            "description": "Creates and manages Scaleway Load-Balancer Frontends. For more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst frontend01 = new scaleway.LoadbalancerFrontend(\"frontend01\", {\n    lbId: scaleway_lb.lb01.id,\n    backendId: scaleway_lb_backend.backend01.id,\n    inboundPort: \"80\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfrontend01 = scaleway.LoadbalancerFrontend(\"frontend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    backend_id=scaleway_lb_backend[\"backend01\"][\"id\"],\n    inbound_port=80)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var frontend01 = new Scaleway.LoadbalancerFrontend(\"frontend01\", new Scaleway.LoadbalancerFrontendArgs\n        {\n            LbId = scaleway_lb.Lb01.Id,\n            BackendId = scaleway_lb_backend.Backend01.Id,\n            InboundPort = 80,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerFrontend(ctx, \"frontend01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tBackendId:   pulumi.Any(scaleway_lb_backend.Backend01.Id),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## With ACLs\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst frontend01 = new scaleway.LoadbalancerFrontend(\"frontend01\", {\n    lbId: scaleway_lb.lb01.id,\n    backendId: scaleway_lb_backend.backend01.id,\n    inboundPort: \"80\",\n    acls: [\n        {\n            name: \"blacklist wellknwon IPs\",\n            action: {\n                type: \"allow\",\n            },\n            match: {\n                ipSubnets: [\n                    \"192.168.0.1\",\n                    \"192.168.0.2\",\n                    \"192.168.10.0/24\",\n                ],\n            },\n        },\n        {\n            action: {\n                type: \"deny\",\n            },\n            match: {\n                ipSubnets: [\"51.51.51.51\"],\n                httpFilter: \"regex\",\n                httpFilterValues: [`^foo*bar$`],\n            },\n        },\n        {\n            action: {\n                type: \"allow\",\n            },\n            match: {\n                httpFilter: \"path_begin\",\n                httpFilterValues: [\n                    \"foo\",\n                    \"bar\",\n                ],\n            },\n        },\n        {\n            action: {\n                type: \"allow\",\n            },\n            match: {\n                httpFilter: \"path_begin\",\n                httpFilterValues: [\"hi\"],\n                invert: \"true\",\n            },\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfrontend01 = scaleway.LoadbalancerFrontend(\"frontend01\",\n    lb_id=scaleway_lb[\"lb01\"][\"id\"],\n    backend_id=scaleway_lb_backend[\"backend01\"][\"id\"],\n    inbound_port=80,\n    acls=[\n        scaleway.LoadbalancerFrontendAclArgs(\n            name=\"blacklist wellknwon IPs\",\n            action=scaleway.LoadbalancerFrontendAclActionArgs(\n                type=\"allow\",\n            ),\n            match=scaleway.LoadbalancerFrontendAclMatchArgs(\n                ip_subnets=[\n                    \"192.168.0.1\",\n                    \"192.168.0.2\",\n                    \"192.168.10.0/24\",\n                ],\n            ),\n        ),\n        scaleway.LoadbalancerFrontendAclArgs(\n            action=scaleway.LoadbalancerFrontendAclActionArgs(\n                type=\"deny\",\n            ),\n            match=scaleway.LoadbalancerFrontendAclMatchArgs(\n                ip_subnets=[\"51.51.51.51\"],\n                http_filter=\"regex\",\n                http_filter_values=[\"^foo*bar$\"],\n            ),\n        ),\n        scaleway.LoadbalancerFrontendAclArgs(\n            action=scaleway.LoadbalancerFrontendAclActionArgs(\n                type=\"allow\",\n            ),\n            match=scaleway.LoadbalancerFrontendAclMatchArgs(\n                http_filter=\"path_begin\",\n                http_filter_values=[\n                    \"foo\",\n                    \"bar\",\n                ],\n            ),\n        ),\n        scaleway.LoadbalancerFrontendAclArgs(\n            action=scaleway.LoadbalancerFrontendAclActionArgs(\n                type=\"allow\",\n            ),\n            match=scaleway.LoadbalancerFrontendAclMatchArgs(\n                http_filter=\"path_begin\",\n                http_filter_values=[\"hi\"],\n                invert=True,\n            ),\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var frontend01 = new Scaleway.LoadbalancerFrontend(\"frontend01\", new Scaleway.LoadbalancerFrontendArgs\n        {\n            LbId = scaleway_lb.Lb01.Id,\n            BackendId = scaleway_lb_backend.Backend01.Id,\n            InboundPort = 80,\n            Acls = \n            {\n                new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n                {\n                    Name = \"blacklist wellknwon IPs\",\n                    Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                    {\n                        Type = \"allow\",\n                    },\n                    Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                    {\n                        IpSubnets = \n                        {\n                            \"192.168.0.1\",\n                            \"192.168.0.2\",\n                            \"192.168.10.0/24\",\n                        },\n                    },\n                },\n                new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n                {\n                    Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                    {\n                        Type = \"deny\",\n                    },\n                    Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                    {\n                        IpSubnets = \n                        {\n                            \"51.51.51.51\",\n                        },\n                        HttpFilter = \"regex\",\n                        HttpFilterValues = \n                        {\n                            \"^foo*bar$\",\n                        },\n                    },\n                },\n                new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n                {\n                    Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                    {\n                        Type = \"allow\",\n                    },\n                    Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                    {\n                        HttpFilter = \"path_begin\",\n                        HttpFilterValues = \n                        {\n                            \"foo\",\n                            \"bar\",\n                        },\n                    },\n                },\n                new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n                {\n                    Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                    {\n                        Type = \"allow\",\n                    },\n                    Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                    {\n                        HttpFilter = \"path_begin\",\n                        HttpFilterValues = \n                        {\n                            \"hi\",\n                        },\n                        Invert = true,\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerFrontend(ctx, \"frontend01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        pulumi.Any(scaleway_lb.Lb01.Id),\n\t\t\tBackendId:   pulumi.Any(scaleway_lb_backend.Backend01.Id),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t\tAcls: LoadbalancerFrontendAclArray{\n\t\t\t\t\u0026LoadbalancerFrontendAclArgs{\n\t\t\t\t\tName: pulumi.String(\"blacklist wellknwon IPs\"),\n\t\t\t\t\tAction: \u0026LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"allow\"),\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tIpSubnets: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"192.168.0.1\"),\n\t\t\t\t\t\t\tpulumi.String(\"192.168.0.2\"),\n\t\t\t\t\t\t\tpulumi.String(\"192.168.10.0/24\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026LoadbalancerFrontendAclArgs{\n\t\t\t\t\tAction: \u0026LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"deny\"),\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tIpSubnets: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"51.51.51.51\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tHttpFilter: pulumi.String(\"regex\"),\n\t\t\t\t\t\tHttpFilterValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(fmt.Sprintf(\"%v%v\", \"^foo*bar\", \"$\")),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026LoadbalancerFrontendAclArgs{\n\t\t\t\t\tAction: \u0026LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"allow\"),\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tHttpFilter: pulumi.String(\"path_begin\"),\n\t\t\t\t\t\tHttpFilterValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\t\t\t\tpulumi.String(\"bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026LoadbalancerFrontendAclArgs{\n\t\t\t\t\tAction: \u0026LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"allow\"),\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tHttpFilter: pulumi.String(\"path_begin\"),\n\t\t\t\t\t\tHttpFilterValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"hi\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tInvert: pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nLoad-Balancer frontend can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/loadbalancerFrontend:LoadbalancerFrontend frontend01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl"
                    },
                    "description": "A list of ACL rules to apply to the load-balancer frontend.  Defined below.\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The load-balancer backend ID this frontend is attached to.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "Certificate ID that should be used by the frontend.\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen on the front side.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this frontend is attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side. (e.g.: `1s`)\n"
                }
            },
            "required": [
                "backendId",
                "inboundPort",
                "lbId",
                "name"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl"
                    },
                    "description": "A list of ACL rules to apply to the load-balancer frontend.  Defined below.\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The load-balancer backend ID this frontend is attached to.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "Certificate ID that should be used by the frontend.\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen on the front side.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID this frontend is attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side. (e.g.: `1s`)\n"
                }
            },
            "requiredInputs": [
                "backendId",
                "inboundPort",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerFrontend resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl"
                        },
                        "description": "A list of ACL rules to apply to the load-balancer frontend.  Defined below.\n"
                    },
                    "backendId": {
                        "type": "string",
                        "description": "The load-balancer backend ID this frontend is attached to.\n"
                    },
                    "certificateId": {
                        "type": "string",
                        "description": "Certificate ID that should be used by the frontend.\n"
                    },
                    "inboundPort": {
                        "type": "integer",
                        "description": "TCP port to listen on the front side.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID this frontend is attached to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The ACL name. If not provided it will be randomly generated.\n"
                    },
                    "timeoutClient": {
                        "type": "string",
                        "description": "Maximum inactivity time on the client side. (e.g.: `1s`)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerIp:LoadbalancerIp": {
            "description": "Creates and manages Scaleway Load-Balancers IPs.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/lb/zoned_api).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst ip = new scaleway.LoadbalancerIp(\"ip\", {\n    reverse: \"my-reverse.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nip = scaleway.LoadbalancerIp(\"ip\", reverse=\"my-reverse.com\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ip = new Scaleway.LoadbalancerIp(\"ip\", new Scaleway.LoadbalancerIpArgs\n        {\n            Reverse = \"my-reverse.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerIp(ctx, \"ip\", \u0026scaleway.LoadbalancerIpArgs{\n\t\t\tReverse: pulumi.String(\"my-reverse.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nIPs can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/loadbalancerIp:LoadbalancerIp ip01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP Address\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The associated load-balance ID if any\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the resource\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "required": [
                "ipAddress",
                "lbId",
                "organizationId",
                "projectId",
                "region",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerIp resources.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP Address\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The associated load-balance ID if any\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the resource\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone you want to attach the resource to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerRoute:LoadbalancerRoute": {
            "properties": {
                "backendId": {
                    "type": "string",
                    "description": "The backend ID destination of redirection\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The frontend ID origin of redirection\n"
                },
                "matchSni": {
                    "type": "string",
                    "description": "The domain to match against\n"
                }
            },
            "required": [
                "backendId",
                "frontendId"
            ],
            "inputProperties": {
                "backendId": {
                    "type": "string",
                    "description": "The backend ID destination of redirection\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The frontend ID origin of redirection\n"
                },
                "matchSni": {
                    "type": "string",
                    "description": "The domain to match against\n"
                }
            },
            "requiredInputs": [
                "backendId",
                "frontendId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerRoute resources.\n",
                "properties": {
                    "backendId": {
                        "type": "string",
                        "description": "The backend ID destination of redirection\n"
                    },
                    "frontendId": {
                        "type": "string",
                        "description": "The frontend ID origin of redirection\n"
                    },
                    "matchSni": {
                        "type": "string",
                        "description": "The domain to match against\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucket:ObjectBucket": {
            "description": "Creates and manages Scaleway object storage buckets.\nFor more information, see [the documentation](https://www.scaleway.com/en/docs/object-storage-feature/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst someBucket = new scaleway.ObjectBucket(\"some_bucket\", {\n    acl: \"private\",\n    tags: {\n        key: \"value\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nsome_bucket = scaleway.ObjectBucket(\"someBucket\",\n    acl=\"private\",\n    tags={\n        \"key\": \"value\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var someBucket = new Scaleway.ObjectBucket(\"someBucket\", new Scaleway.ObjectBucketArgs\n        {\n            Acl = \"private\",\n            Tags = \n            {\n                { \"key\", \"value\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"someBucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tAcl: pulumi.String(\"private\"),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBuckets can be imported using the `{region}/{bucketName}` identifier, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/objectBucket:ObjectBucket some_bucket fr-par/some-bucket\n```\n\n ",
            "properties": {
                "acl": {
                    "type": "string",
                    "description": "The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) you want to apply to the bucket.\n"
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                    },
                    "description": "A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint URL of the bucket\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of tags (key / value) for the bucket.\n"
                },
                "versioning": {
                    "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                    "description": "A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "region",
                "versioning"
            ],
            "inputProperties": {
                "acl": {
                    "type": "string",
                    "description": "The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) you want to apply to the bucket.\n"
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                    },
                    "description": "A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of tags (key / value) for the bucket.\n"
                },
                "versioning": {
                    "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                    "description": "A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucket resources.\n",
                "properties": {
                    "acl": {
                        "type": "string",
                        "description": "The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) you want to apply to the bucket.\n"
                    },
                    "corsRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                        },
                        "description": "A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint URL of the bucket\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the bucket.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of tags (key / value) for the bucket.\n"
                    },
                    "versioning": {
                        "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                        "description": "A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/registryNamespace:RegistryNamespace": {
            "description": "Creates and manages Scaleway Container Registry.\nFor more information see [the documentation](https://developers.scaleway.com/en/products/registry/api/).\n\n## Examples\n\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.RegistryNamespace(\"main\", {\n    description: \"Main container registry\",\n    isPublic: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.RegistryNamespace(\"main\",\n    description=\"Main container registry\",\n    is_public=False)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.RegistryNamespace(\"main\", new Scaleway.RegistryNamespaceArgs\n        {\n            Description = \"Main container registry\",\n            IsPublic = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRegistryNamespace(ctx, \"main\", \u0026scaleway.RegistryNamespaceArgs{\n\t\t\tDescription: pulumi.String(\"Main container registry\"),\n\t\t\tIsPublic:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/registryNamespace:RegistryNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint reachable by Docker.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the namespace is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "organizationId",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RegistryNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Endpoint reachable by Docker.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the namespace.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork": {
            "description": "Creates and manages Scaleway VPC Public Gateway Network.\nIt allows attaching Private Networks to the VPC Public Gateway and your DHCP config\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#step-3-attach-private-networks-to-the-vpc-public-gateway).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst gw01 = new scaleway.VpcPublicGatewayIp(\"gw01\", {});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {subnet: \"192.168.1.0/24\"});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {\n    type: \"VPC-GW-S\",\n    ipId: gw01.id,\n});\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\ngw01 = scaleway.VpcPublicGatewayIp(\"gw01\")\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\", subnet=\"192.168.1.0/24\")\npg01 = scaleway.VpcPublicGateway(\"pg01\",\n    type=\"VPC-GW-S\",\n    ip_id=gw01.id)\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new Scaleway.VpcPrivateNetworkArgs\n        {\n        });\n        var gw01 = new Scaleway.VpcPublicGatewayIp(\"gw01\", new Scaleway.VpcPublicGatewayIpArgs\n        {\n        });\n        var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new Scaleway.VpcPublicGatewayDhcpArgs\n        {\n            Subnet = \"192.168.1.0/24\",\n        });\n        var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new Scaleway.VpcPublicGatewayArgs\n        {\n            Type = \"VPC-GW-S\",\n            IpId = gw01.Id,\n        });\n        var main = new Scaleway.VpcGatewayNetwork(\"main\", new Scaleway.VpcGatewayNetworkArgs\n        {\n            GatewayId = pg01.Id,\n            PrivateNetworkId = pn01.Id,\n            DhcpId = dhcp01.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgw01, err := scaleway.NewVpcPublicGatewayIp(ctx, \"gw01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: gw01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nGateway network can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "cleanupDhcp": {
                    "type": "boolean",
                    "description": "Remove DHCP config on this network on destroy. It requires DHCP id.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the gateway network.\n"
                },
                "dhcpId": {
                    "type": "string",
                    "description": "The ID of the public gateway DHCP config.\n"
                },
                "enableDhcp": {
                    "type": "boolean",
                    "description": "Enable DHCP config on this network. It requires DHCP id.\n"
                },
                "enableMasquerade": {
                    "type": "boolean",
                    "description": "Enable masquerade on this network\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The mac address of the creation of the gateway network.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network.\n"
                },
                "staticAddress": {
                    "type": "string",
                    "description": "Enable DHCP config on this network\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the gateway network.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the gateway network should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayId",
                "macAddress",
                "privateNetworkId",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "cleanupDhcp": {
                    "type": "boolean",
                    "description": "Remove DHCP config on this network on destroy. It requires DHCP id.\n"
                },
                "dhcpId": {
                    "type": "string",
                    "description": "The ID of the public gateway DHCP config.\n"
                },
                "enableDhcp": {
                    "type": "boolean",
                    "description": "Enable DHCP config on this network. It requires DHCP id.\n"
                },
                "enableMasquerade": {
                    "type": "boolean",
                    "description": "Enable masquerade on this network\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network.\n"
                },
                "staticAddress": {
                    "type": "string",
                    "description": "Enable DHCP config on this network\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the gateway network should be created.\n"
                }
            },
            "requiredInputs": [
                "gatewayId",
                "privateNetworkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcGatewayNetwork resources.\n",
                "properties": {
                    "cleanupDhcp": {
                        "type": "boolean",
                        "description": "Remove DHCP config on this network on destroy. It requires DHCP id.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the gateway network.\n"
                    },
                    "dhcpId": {
                        "type": "string",
                        "description": "The ID of the public gateway DHCP config.\n"
                    },
                    "enableDhcp": {
                        "type": "boolean",
                        "description": "Enable DHCP config on this network. It requires DHCP id.\n"
                    },
                    "enableMasquerade": {
                        "type": "boolean",
                        "description": "Enable masquerade on this network\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the public gateway.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The mac address of the creation of the gateway network.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network.\n"
                    },
                    "staticAddress": {
                        "type": "string",
                        "description": "Enable DHCP config on this network\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the gateway network.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the gateway network should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork": {
            "description": "Creates and manages Scaleway VPC Private Networks.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc/api/#private-networks-ac2df4).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst pnPriv = new scaleway.VpcPrivateNetwork(\"pn_priv\", {\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\npn_priv = scaleway.VpcPrivateNetwork(\"pnPriv\", tags=[\n    \"demo\",\n    \"terraform\",\n])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pnPriv = new Scaleway.VpcPrivateNetwork(\"pnPriv\", new Scaleway.VpcPrivateNetworkArgs\n        {\n            Tags = \n            {\n                \"demo\",\n                \"terraform\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPrivateNetwork(ctx, \"pnPriv\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nPrivate networks can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork vpc_demo fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the private network\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the private network. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the private network is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the private network is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private network.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the private network\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the private network should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "projectId",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the private network. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the private network is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private network.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the private network should be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPrivateNetwork resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the private network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the private network. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the private network is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the private network is associated with.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the private network.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the private network\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the private network should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGateway:VpcPublicGateway": {
            "description": "Creates and manages Scaleway VPC Public Gateway.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGateway(\"main\", {\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n    type: \"VPC-GW-S\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGateway(\"main\",\n    tags=[\n        \"demo\",\n        \"terraform\",\n    ],\n    type=\"VPC-GW-S\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.VpcPublicGateway(\"main\", new Scaleway.VpcPublicGatewayArgs\n        {\n            Tags = \n            {\n                \"demo\",\n                \"terraform\",\n            },\n            Type = \"VPC-GW-S\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nPublic gateway can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGateway:VpcPublicGateway main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "attach an existing flexible IP to the gateway\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the public gateway. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the public gateway is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The gateway type.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway.\n"
                },
                "upstreamDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "ipId",
                "name",
                "organizationId",
                "projectId",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "ipId": {
                    "type": "string",
                    "description": "attach an existing flexible IP to the gateway\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the public gateway. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The gateway type.\n"
                },
                "upstreamDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway should be created.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGateway resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway.\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "attach an existing flexible IP to the gateway\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the public gateway. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the public gateway is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway is associated with.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the public gateway.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The gateway type.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway.\n"
                    },
                    "upstreamDnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp": {
            "description": "Creates and manages Scaleway VPC Public Gateway DHCP.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayDhcp(\"main\", {\n    subnet: \"192.168.1.0/24\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.1.0/24\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.VpcPublicGatewayDhcp(\"main\", new Scaleway.VpcPublicGatewayDhcpArgs\n        {\n            Subnet = \"192.168.1.0/24\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nPublic gateway DHCP config can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address: address of the DHCP server. This will be the gateway's address in the private network. Defaults to the first\naddress of the subnet\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway DHCP config.\n"
                },
                "dnsLocalName": {
                    "type": "string",
                    "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private\nNetwork name if created along a GatewayNetwork, or else to `priv`.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional DNS search paths\n"
                },
                "dnsServerOverrides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself\n"
                },
                "enableDynamic": {
                    "type": "boolean",
                    "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be\nhanded out. Defaults to true.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the public gateway DHCP config is associated with.\n"
                },
                "poolHigh": {
                    "type": "string",
                    "description": "High IP (included) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                },
                "poolLow": {
                    "type": "string",
                    "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway DHCP config is associated with.\n"
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to true\n"
                },
                "pushDnsServer": {
                    "type": "boolean",
                    "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname -\u003e IP resolution.\nDefaults to true.\n"
                },
                "rebindTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than\n`valid_lifetime`. Defaults to 51m (3060s).\n"
                },
                "renewTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a renew will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Subnet for the DHCP server\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway DHCP config.\n"
                },
                "validLifetime": {
                    "type": "integer",
                    "description": "For how long, in seconds, will DHCP entries will be valid. Defaults to 1h (3600s).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "dnsLocalName",
                "enableDynamic",
                "organizationId",
                "poolHigh",
                "poolLow",
                "projectId",
                "pushDefaultRoute",
                "pushDnsServer",
                "rebindTimer",
                "renewTimer",
                "subnet",
                "updatedAt",
                "validLifetime",
                "zone"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "Address: address of the DHCP server. This will be the gateway's address in the private network. Defaults to the first\naddress of the subnet\n"
                },
                "dnsLocalName": {
                    "type": "string",
                    "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private\nNetwork name if created along a GatewayNetwork, or else to `priv`.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional DNS search paths\n"
                },
                "dnsServerOverrides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself\n"
                },
                "enableDynamic": {
                    "type": "boolean",
                    "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be\nhanded out. Defaults to true.\n"
                },
                "poolHigh": {
                    "type": "string",
                    "description": "High IP (included) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                },
                "poolLow": {
                    "type": "string",
                    "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway DHCP config is associated with.\n"
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to true\n"
                },
                "pushDnsServer": {
                    "type": "boolean",
                    "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname -\u003e IP resolution.\nDefaults to true.\n"
                },
                "rebindTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than\n`valid_lifetime`. Defaults to 51m (3060s).\n"
                },
                "renewTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a renew will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Subnet for the DHCP server\n"
                },
                "validLifetime": {
                    "type": "integer",
                    "description": "For how long, in seconds, will DHCP entries will be valid. Defaults to 1h (3600s).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "requiredInputs": [
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayDhcp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Address: address of the DHCP server. This will be the gateway's address in the private network. Defaults to the first\naddress of the subnet\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway DHCP config.\n"
                    },
                    "dnsLocalName": {
                        "type": "string",
                        "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private\nNetwork name if created along a GatewayNetwork, or else to `priv`.\n"
                    },
                    "dnsSearches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional DNS search paths\n"
                    },
                    "dnsServerOverrides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself\n"
                    },
                    "enableDynamic": {
                        "type": "boolean",
                        "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be\nhanded out. Defaults to true.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the public gateway DHCP config is associated with.\n"
                    },
                    "poolHigh": {
                        "type": "string",
                        "description": "High IP (included) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                    },
                    "poolLow": {
                        "type": "string",
                        "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway DHCP config is associated with.\n"
                    },
                    "pushDefaultRoute": {
                        "type": "boolean",
                        "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to true\n"
                    },
                    "pushDnsServer": {
                        "type": "boolean",
                        "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname -\u003e IP resolution.\nDefaults to true.\n"
                    },
                    "rebindTimer": {
                        "type": "integer",
                        "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than\n`valid_lifetime`. Defaults to 51m (3060s).\n"
                    },
                    "renewTimer": {
                        "type": "integer",
                        "description": "After how long, in seconds, a renew will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "Subnet for the DHCP server\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway DHCP config.\n"
                    },
                    "validLifetime": {
                        "type": "integer",
                        "description": "For how long, in seconds, will DHCP entries will be valid. Defaults to 1h (3600s).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp": {
            "description": "Creates and manages Scaleway VPC Public Gateway IP.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayIp(\"main\", {\n    reverse: \"example.com\",\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayIp(\"main\",\n    reverse=\"example.com\",\n    tags=[\n        \"demo\",\n        \"terraform\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.VpcPublicGatewayIp(\"main\", new Scaleway.VpcPublicGatewayIpArgs\n        {\n            Reverse = \"example.com\",\n            Tags = \n            {\n                \"demo\",\n                \"terraform\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayIpArgs{\n\t\t\tReverse: pulumi.String(\"example.com\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nPublic gateway can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address itself.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the public gateway ip.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the public gateway ip is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway ip is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for the IP address\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway IP.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the public gateway ip.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway ip should be created.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "organizationId",
                "projectId",
                "reverse",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway ip is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for the IP address\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the public gateway IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway ip should be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address itself.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the public gateway ip.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the public gateway ip is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway ip is associated with.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain name for the IP address\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the public gateway IP.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the public gateway ip.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway ip should be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule": {
            "description": "Creates and manages Scaleway VPC Public Gateway PAT (Port Address Translation).\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1#pat-rules-e75d10).\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {type: \"VPC-GW-S\"});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {subnet: \"192.168.1.0/24\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {});\nconst gn01 = new scaleway.VpcGatewayNetwork(\"gn01\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n});\nconst main = new scaleway.VpcPublicGatewayPatRule(\"main\", {\n    gatewayId: pg01.id,\n    privateIp: dhcp01.address,\n    privatePort: 42,\n    publicPort: 42,\n    protocol: \"both\",\n}, {\n    dependsOn: [\n        gn01,\n        pn01,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\npg01 = scaleway.VpcPublicGateway(\"pg01\", type=\"VPC-GW-S\")\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\", subnet=\"192.168.1.0/24\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\")\ngn01 = scaleway.VpcGatewayNetwork(\"gn01\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id,\n    cleanup_dhcp=True)\nmain = scaleway.VpcPublicGatewayPatRule(\"main\",\n    gateway_id=pg01.id,\n    private_ip=dhcp01.address,\n    private_port=42,\n    public_port=42,\n    protocol=\"both\",\n    opts=pulumi.ResourceOptions(depends_on=[\n            gn01,\n            pn01,\n        ]))\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new Scaleway.VpcPublicGatewayArgs\n        {\n            Type = \"VPC-GW-S\",\n        });\n        var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new Scaleway.VpcPublicGatewayDhcpArgs\n        {\n            Subnet = \"192.168.1.0/24\",\n        });\n        var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new Scaleway.VpcPrivateNetworkArgs\n        {\n        });\n        var gn01 = new Scaleway.VpcGatewayNetwork(\"gn01\", new Scaleway.VpcGatewayNetworkArgs\n        {\n            GatewayId = pg01.Id,\n            PrivateNetworkId = pn01.Id,\n            DhcpId = dhcp01.Id,\n            CleanupDhcp = true,\n        });\n        var main = new Scaleway.VpcPublicGatewayPatRule(\"main\", new Scaleway.VpcPublicGatewayPatRuleArgs\n        {\n            GatewayId = pg01.Id,\n            PrivateIp = dhcp01.Address,\n            PrivatePort = 42,\n            PublicPort = 42,\n            Protocol = \"both\",\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                gn01,\n                pn01,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgn01, err := scaleway.NewVpcGatewayNetwork(ctx, \"gn01\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayPatRule(ctx, \"main\", \u0026scaleway.VpcPublicGatewayPatRuleArgs{\n\t\t\tGatewayId:   pg01.ID(),\n\t\t\tPrivateIp:   dhcp01.Address,\n\t\t\tPrivatePort: pulumi.Int(42),\n\t\t\tPublicPort:  pulumi.Int(42),\n\t\t\tProtocol:    pulumi.String(\"both\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tgn01,\n\t\t\tpn01,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n## Import\n\nPublic gateway PAT rules config can be imported using the `{zone}/{id}`, e.g. bash\n\n```sh\n $ pulumi import scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the pat rule config.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the pat rule config is associated with.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Private IP to forward data to (IP address).\n"
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The Private port to translate to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The Public port to listen on.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the pat rule config.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayId",
                "organizationId",
                "privateIp",
                "privatePort",
                "publicPort",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the public gateway.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Private IP to forward data to (IP address).\n"
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The Private port to translate to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The Public port to listen on.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "requiredInputs": [
                "gatewayId",
                "privateIp",
                "privatePort",
                "publicPort"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayPatRule resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the pat rule config.\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the public gateway.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the pat rule config is associated with.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Private IP to forward data to (IP address).\n"
                    },
                    "privatePort": {
                        "type": "integer",
                        "description": "The Private port to translate to.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The Protocol the rule should apply to. Possible values are both, tcp and udp.\n"
                    },
                    "publicPort": {
                        "type": "integer",
                        "description": "The Public port to listen on.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the pat rule config.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "scaleway:index/getAccountSshKey:getAccountSshKey": {
            "description": "Use this data source to get SSH key information based on its ID or name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by SSH key id\nconst myKey = pulumi.output(scaleway.getAccountSshKey({\n    sshKeyId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_account_ssh_key(ssh_key_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myKey = Output.Create(Scaleway.GetAccountSshKey.InvokeAsync(new Scaleway.GetAccountSshKeyArgs\n        {\n            SshKeyId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupAccountSshKey(ctx, \u0026GetAccountSshKeyArgs{\n\t\t\tSshKeyId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountSshKey.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The SSH key name. Only one of `name` and `ssh_key_id` should be specified.\n"
                    },
                    "sshKeyId": {
                        "type": "string",
                        "description": "The SSH key id. Only one of `name` and `ssh_key_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountSshKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The SSH public key string\n"
                    },
                    "sshKeyId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationId",
                    "projectId",
                    "publicKey",
                    "id"
                ]
            }
        },
        "scaleway:index/getBaremetalOffer:getBaremetalOffer": {
            "description": "Gets information about a baremetal offer. For more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by offer id\nconst myOffer = pulumi.output(scaleway.getBaremetalOffer({\n    offerId: \"3ab0dc29-2fd4-486e-88bf-d08fbf49214b\",\n    zone: \"fr-par-2\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_offer = scaleway.get_baremetal_offer(offer_id=\"3ab0dc29-2fd4-486e-88bf-d08fbf49214b\",\n    zone=\"fr-par-2\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myOffer = Output.Create(Scaleway.GetBaremetalOffer.InvokeAsync(new Scaleway.GetBaremetalOfferArgs\n        {\n            OfferId = \"3ab0dc29-2fd4-486e-88bf-d08fbf49214b\",\n            Zone = \"fr-par-2\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"3ab0dc29-2fd4-486e-88bf-d08fbf49214b\"\n\t\topt1 := \"fr-par-2\"\n\t\t_, err := scaleway.GetBaremetalOffer(ctx, \u0026GetBaremetalOfferArgs{\n\t\t\tOfferId: \u0026opt0,\n\t\t\tZone:    \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOffer.\n",
                "properties": {
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The offer id. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the offer should be created.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOffer.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "Available Bandwidth with the offer.\n"
                    },
                    "commercialRange": {
                        "type": "string",
                        "description": "Commercial range of the offer.\n"
                    },
                    "cpu": {
                        "$ref": "#/types/scaleway:index/getBaremetalOfferCpu:getBaremetalOfferCpu",
                        "description": "A list of cpu specifications. (Structure is documented below.)\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalOfferDisk:getBaremetalOfferDisk"
                        },
                        "description": "A list of disk specifications. (Structure is documented below.)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "memories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalOfferMemory:getBaremetalOfferMemory"
                        },
                        "description": "A list of memory specifications. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the CPU.\n"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "stock": {
                        "type": "string",
                        "description": "Stock status for this offer. Possible values are: `empty`, `low` or `available`.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bandwidth",
                    "commercialRange",
                    "cpu",
                    "disks",
                    "memories",
                    "stock",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getDatabase:getDatabase": {
            "description": "Gets information about a RDB database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\nconst myDb = pulumi.output(scaleway.getDatabase({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    name: \"foobar\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_db = scaleway.get_database(instance_id=\"11111111-1111-1111-1111-111111111111\",\n    name=\"foobar\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myDb = Output.Create(Scaleway.GetDatabase.InvokeAsync(new Scaleway.GetDatabaseArgs\n        {\n            InstanceId = \"11111111-1111-1111-1111-111111111111\",\n            Name = \"foobar\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupDatabase(ctx, \u0026GetDatabaseArgs{\n\t\t\tInstanceId: \"11111111-1111-1111-1111-111111111111\",\n\t\t\tName:       \"foobar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether or not the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database (in bytes).\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "managed",
                    "name",
                    "owner",
                    "size",
                    "id"
                ]
            }
        },
        "scaleway:index/getDatabaseAcl:getDatabaseAcl": {
            "description": "Gets information about the RDB instance network Access Control List.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database ACL for the instanceid 11111111-1111-1111-1111-111111111111 located in fr-par\nconst myAcl = pulumi.output(scaleway.getDatabaseAcl({\n    instanceId: \"fr-par/11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_acl = scaleway.get_database_acl(instance_id=\"fr-par/11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myAcl = Output.Create(Scaleway.GetDatabaseAcl.InvokeAsync(new Scaleway.GetDatabaseAclArgs\n        {\n            InstanceId = \"fr-par/11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupDatabaseAcl(ctx, \u0026GetDatabaseAclArgs{\n\t\t\tInstanceId: \"fr-par/11111111-1111-1111-1111-111111111111\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseAcl.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseAcl.\n",
                "properties": {
                    "aclRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseAclAclRule:getDatabaseAclAclRule"
                        },
                        "description": "A list of ACLs (structure is described below)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "aclRules",
                    "instanceId",
                    "region",
                    "id"
                ]
            }
        },
        "scaleway:index/getDatabaseInstance:getDatabaseInstance": {
            "description": "Gets information about a RDB instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by instance ID\nconst myInstance = pulumi.output(scaleway.getDatabaseInstance({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_instance = scaleway.get_database_instance(instance_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myInstance = Output.Create(Scaleway.GetDatabaseInstance.InvokeAsync(new Scaleway.GetDatabaseInstanceArgs\n        {\n            InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupDatabaseInstance(ctx, \u0026GetDatabaseInstanceArgs{\n\t\t\tInstanceId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\nOnly one of `name` and `instance_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\nOnly one of `name` and `instance_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseInstance.\n",
                "properties": {
                    "backupScheduleFrequency": {
                        "type": "integer"
                    },
                    "backupScheduleRetention": {
                        "type": "integer"
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "disableBackup": {
                        "type": "boolean"
                    },
                    "endpointIp": {
                        "type": "string"
                    },
                    "endpointPort": {
                        "type": "integer"
                    },
                    "engine": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "isHaCluster": {
                        "type": "boolean"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstanceLoadBalancer:getDatabaseInstanceLoadBalancer"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstancePrivateNetwork:getDatabaseInstancePrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "readReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstanceReadReplica:getDatabaseInstanceReadReplica"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userName": {
                        "type": "string"
                    },
                    "volumeSizeInGb": {
                        "type": "integer"
                    },
                    "volumeType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backupScheduleFrequency",
                    "backupScheduleRetention",
                    "certificate",
                    "disableBackup",
                    "endpointIp",
                    "endpointPort",
                    "engine",
                    "isHaCluster",
                    "loadBalancers",
                    "nodeType",
                    "organizationId",
                    "password",
                    "privateNetworks",
                    "projectId",
                    "readReplicas",
                    "region",
                    "settings",
                    "tags",
                    "userName",
                    "volumeSizeInGb",
                    "volumeType",
                    "id"
                ]
            }
        },
        "scaleway:index/getDatabasePrivilege:getDatabasePrivilege": {
            "description": "Gets information about the privilege on a RDB database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database privilege for the user \"my-user\" on the database \"my-database\" hosted on instance id fr-par/11111111-1111-1111-1111-111111111111\nconst findPriv = pulumi.output(scaleway.getDatabasePrivilege({\n    databaseName: \"my-database\",\n    instanceId: \"fr-par/11111111-1111-111111111111\",\n    userName: \"my-user\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfind_priv = scaleway.get_database_privilege(database_name=\"my-database\",\n    instance_id=\"fr-par/11111111-1111-111111111111\",\n    user_name=\"my-user\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var findPriv = Output.Create(Scaleway.GetDatabasePrivilege.InvokeAsync(new Scaleway.GetDatabasePrivilegeArgs\n        {\n            DatabaseName = \"my-database\",\n            InstanceId = \"fr-par/11111111-1111-111111111111\",\n            UserName = \"my-user\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupDatabasePrivilege(ctx, \u0026GetDatabasePrivilegeArgs{\n\t\t\tDatabaseName: \"my-database\",\n\t\t\tInstanceId:   \"fr-par/11111111-1111-111111111111\",\n\t\t\tUserName:     \"my-user\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabasePrivilege.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database name.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "instanceId",
                    "userName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabasePrivilege.\n",
                "properties": {
                    "databaseName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission for this user on the database. Possible values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "instanceId",
                    "permission",
                    "userName",
                    "id"
                ]
            }
        },
        "scaleway:index/getDomainRecord:getDomainRecord": {
            "description": "Gets information about a domain record.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get record by name, type and data\nconst byContent = pulumi.output(scaleway.getDomainRecord({\n    data: \"1.2.3.4\",\n    dnsZone: \"domain.tld\",\n    name: \"www\",\n    type: \"A\",\n}));\n// Get info by ID\nconst byId = pulumi.output(scaleway.getDomainRecord({\n    dnsZone: \"domain.tld\",\n    recordId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_content = scaleway.get_domain_record(data=\"1.2.3.4\",\n    dns_zone=\"domain.tld\",\n    name=\"www\",\n    type=\"A\")\nby_id = scaleway.get_domain_record(dns_zone=\"domain.tld\",\n    record_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var byContent = Output.Create(Scaleway.GetDomainRecord.InvokeAsync(new Scaleway.GetDomainRecordArgs\n        {\n            Data = \"1.2.3.4\",\n            DnsZone = \"domain.tld\",\n            Name = \"www\",\n            Type = \"A\",\n        }));\n        var byId = Output.Create(Scaleway.GetDomainRecord.InvokeAsync(new Scaleway.GetDomainRecordArgs\n        {\n            DnsZone = \"domain.tld\",\n            RecordId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"1.2.3.4\"\n\t\topt1 := \"domain.tld\"\n\t\topt2 := \"www\"\n\t\topt3 := \"A\"\n\t\t_, err := scaleway.LookupDomainRecord(ctx, \u0026GetDomainRecordArgs{\n\t\t\tData:    \u0026opt0,\n\t\t\tDnsZone: \u0026opt1,\n\t\t\tName:    \u0026opt2,\n\t\t\tType:    \u0026opt3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt4 := \"domain.tld\"\n\t\topt5 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err = scaleway.LookupDomainRecord(ctx, \u0026GetDomainRecordArgs{\n\t\t\tDnsZone:  \u0026opt4,\n\t\t\tRecordId: \u0026opt5,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainRecord.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The content of the record (an IPv4 for an `A`, a string for a `TXT`...).\nCannot be used with `record_id`.\n"
                    },
                    "dnsZone": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record (can be an empty string for a root record).\nCannot be used with `record_id`.\n"
                    },
                    "recordId": {
                        "type": "string",
                        "description": "The record ID.\nCannot be used with `name`, `type` and `data`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\nCannot be used with `record_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomainRecord.\n",
                "properties": {
                    "data": {
                        "type": "string"
                    },
                    "dnsZone": {
                        "type": "string"
                    },
                    "geoIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordGeoIp:getDomainRecordGeoIp"
                        },
                        "description": "Dynamic record base on user geolocalisation (More information about dynamic records)\n"
                    },
                    "httpServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordHttpService:getDomainRecordHttpService"
                        },
                        "description": "Dynamic record base on URL resolve (More information about dynamic records)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keepEmptyZone": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the record (mostly used with an `MX` record)\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "recordId": {
                        "type": "string"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time To Tive of the record in seconds.\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "views": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordView:getDomainRecordView"
                        },
                        "description": "Dynamic record based on the client’s (resolver) subnet (More information about dynamic records)\n"
                    },
                    "weighteds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordWeighted:getDomainRecordWeighted"
                        },
                        "description": "Dynamic record base on IP weights (More information about dynamic records)\n"
                    }
                },
                "type": "object",
                "required": [
                    "geoIps",
                    "httpServices",
                    "keepEmptyZone",
                    "priority",
                    "projectId",
                    "ttl",
                    "views",
                    "weighteds",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceImage:getInstanceImage": {
            "description": "Gets information about an instance image.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by image id\nconst myImage = pulumi.output(scaleway.getInstanceImage({\n    imageId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_instance_image(image_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myImage = Output.Create(Scaleway.GetInstanceImage.InvokeAsync(new Scaleway.GetInstanceImageArgs\n        {\n            ImageId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.GetInstanceImage(ctx, \u0026GetInstanceImageArgs{\n\t\t\tImageId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceImage.\n",
                "properties": {
                    "architecture": {
                        "type": "string",
                        "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image id. Only one of `name` and `image_id` should be specified.\n"
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "Use the latest image ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The image name. Only one of `name` and `image_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the image exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceImage.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the additional volumes in this image.\n"
                    },
                    "architecture": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date of the image creation.\n"
                    },
                    "defaultBootscriptId": {
                        "type": "string",
                        "description": "ID of the default bootscript for this image.\n"
                    },
                    "fromServerId": {
                        "type": "string",
                        "description": "ID of the server the image if based from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "modificationDate": {
                        "type": "string",
                        "description": "Date of image latest update.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the image is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Set to `true` if the image is public.\n"
                    },
                    "rootVolumeId": {
                        "type": "string",
                        "description": "ID of the root volume in this image.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the image. Possible values are: `available`, `creating` or `error`.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "additionalVolumeIds",
                    "creationDate",
                    "defaultBootscriptId",
                    "fromServerId",
                    "modificationDate",
                    "organizationId",
                    "projectId",
                    "public",
                    "rootVolumeId",
                    "state",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceIp:getInstanceIp": {
            "description": "Gets information about an instance IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by ID\nconst myIp = pulumi.output(scaleway.getInstanceIp({\n    id: \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_ip = scaleway.get_instance_ip(id=\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myIp = Output.Create(Scaleway.GetInstanceIp.InvokeAsync(new Scaleway.GetInstanceIpArgs\n        {\n            Id = \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"fr-par-1/11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupInstanceIp(ctx, \u0026GetInstanceIpArgs{\n\t\t\tId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 address to retrieve\nOnly one of `address` and `id` should be specified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the IP address to retrieve\nOnly one of `address` and `id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the IP.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the IP is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse dns attached to this IP\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationId",
                    "projectId",
                    "reverse",
                    "serverId",
                    "zone"
                ]
            }
        },
        "scaleway:index/getInstanceSecurityGroup:getInstanceSecurityGroup": {
            "description": "Gets information about a Security Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by security group id\nconst myKey = pulumi.output(scaleway.getInstanceSecurityGroup({\n    securityGroupId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_instance_security_group(security_group_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myKey = Output.Create(Scaleway.GetInstanceSecurityGroup.InvokeAsync(new Scaleway.GetInstanceSecurityGroupArgs\n        {\n            SecurityGroupId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupInstanceSecurityGroup(ctx, \u0026GetInstanceSecurityGroupArgs{\n\t\t\tSecurityGroupId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceSecurityGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The security group name. Only one of `name` and `security_group_id` should be specified.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group id. Only one of `name` and `security_group_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the security group exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceSecurityGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean"
                    },
                    "externalRules": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the security group is associated with.\n"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the security group is associated with.\n"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "stateful": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "enableDefaultSecurity",
                    "externalRules",
                    "inboundDefaultPolicy",
                    "inboundRules",
                    "organizationId",
                    "outboundDefaultPolicy",
                    "outboundRules",
                    "projectId",
                    "stateful",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceServer:getInstanceServer": {
            "description": "Gets information about an instance server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by server id\nconst myKey = pulumi.output(scaleway.getInstanceServer({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_instance_server(server_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myKey = Output.Create(Scaleway.GetInstanceServer.InvokeAsync(new Scaleway.GetInstanceServerArgs\n        {\n            ServerId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupInstanceServer(ctx, \u0026GetInstanceServerArgs{\n\t\t\tServerId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceServer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server id. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceServer.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server.\n"
                    },
                    "bootType": {
                        "type": "string"
                    },
                    "bootscriptId": {
                        "type": "string"
                    },
                    "cloudInit": {
                        "type": "string",
                        "description": "The cloud init script associated with this server.\n"
                    },
                    "enableDynamicIp": {
                        "type": "boolean",
                        "description": "True is dynamic IP in enable on the server.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Determines if IPv6 is enabled for the server.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "The UUID and the label of the base image used by the server.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the server is associated with.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                    },
                    "placementGroupPolicyRespected": {
                        "type": "boolean",
                        "description": "True when the placement group policy is respected.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Scaleway internal IP address of the server.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerPrivateNetwork:getInstanceServerPrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the server is associated with.\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IPv4 address of the server.\n"
                    },
                    "rootVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerRootVolume:getInstanceServerRootVolume"
                        },
                        "description": "Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\n"
                    },
                    "userData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The user data associated with the server.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "additionalVolumeIds",
                    "bootType",
                    "bootscriptId",
                    "cloudInit",
                    "enableDynamicIp",
                    "enableIpv6",
                    "image",
                    "ipId",
                    "ipv6Address",
                    "ipv6Gateway",
                    "ipv6PrefixLength",
                    "organizationId",
                    "placementGroupId",
                    "placementGroupPolicyRespected",
                    "privateIp",
                    "privateNetworks",
                    "projectId",
                    "publicIp",
                    "rootVolumes",
                    "securityGroupId",
                    "state",
                    "tags",
                    "type",
                    "userData",
                    "id"
                ]
            }
        },
        "scaleway:index/getInstanceVolume:getInstanceVolume": {
            "description": "Gets information about an instance volume.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by volume ID\nconst myVolume = pulumi.output(scaleway.getInstanceVolume({\n    volumeId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_volume = scaleway.get_instance_volume(volume_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myVolume = Output.Create(Scaleway.GetInstanceVolume.InvokeAsync(new Scaleway.GetInstanceVolumeArgs\n        {\n            VolumeId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupInstanceVolume(ctx, \u0026GetInstanceVolumeArgs{\n\t\t\tVolumeId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceVolume.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The volume name.\nOnly one of `name` and `volume_id` should be specified.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The volume id.\nOnly one of `name` and `volume_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the volume exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceVolume.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string"
                    },
                    "fromVolumeId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the volume is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fromSnapshotId",
                    "fromVolumeId",
                    "organizationId",
                    "projectId",
                    "serverId",
                    "sizeInGb",
                    "type",
                    "id"
                ]
            }
        },
        "scaleway:index/getKubernetesCluster:getKubernetesCluster": {
            "description": "Gets information about a Kubernetes Cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by cluster id\nconst myKey = pulumi.output(scaleway.getKubernetesCluster({\n    clusterId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_kubernetes_cluster(cluster_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myKey = Output.Create(Scaleway.GetKubernetesCluster.InvokeAsync(new Scaleway.GetKubernetesClusterArgs\n        {\n            ClusterId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupKubernetesCluster(ctx, \u0026GetKubernetesClusterArgs{\n\t\t\tClusterId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID. Only one of `name` and `cluster_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster name. Only one of `name` and `cluster_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the cluster exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesCluster.\n",
                "properties": {
                    "admissionPlugins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) enabled on the cluster.\n"
                    },
                    "apiserverCertSans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The URL of the Kubernetes API server.\n"
                    },
                    "autoUpgrades": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterAutoUpgrade:getKubernetesClusterAutoUpgrade"
                        },
                        "description": "The auto upgrade configuration.\n"
                    },
                    "autoscalerConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterAutoscalerConfig:getKubernetesClusterAutoscalerConfig"
                        },
                        "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the cluster.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Kubernetes cluster.\n"
                    },
                    "featureGates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) enabled on the cluster.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterKubeconfig:getKubernetesClusterKubeconfig"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "openIdConnectConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterOpenIdConnectConfig:getKubernetesClusterOpenIdConnectConfig"
                        }
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the cluster is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the cluster is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the cluster is.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Kubernetes cluster.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Kubernetes cluster.\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the cluster.\n"
                    },
                    "upgradeAvailable": {
                        "type": "boolean",
                        "description": "True if a newer Kubernetes version is available.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the Kubernetes cluster.\n"
                    },
                    "wildcardDns": {
                        "type": "string",
                        "description": "The DNS wildcard that points to all ready nodes.\n"
                    }
                },
                "type": "object",
                "required": [
                    "admissionPlugins",
                    "apiserverCertSans",
                    "apiserverUrl",
                    "autoUpgrades",
                    "autoscalerConfigs",
                    "cni",
                    "createdAt",
                    "description",
                    "featureGates",
                    "kubeconfigs",
                    "openIdConnectConfigs",
                    "organizationId",
                    "projectId",
                    "status",
                    "tags",
                    "type",
                    "updatedAt",
                    "upgradeAvailable",
                    "version",
                    "wildcardDns",
                    "id"
                ]
            }
        },
        "scaleway:index/getKubernetesNodePool:getKubernetesNodePool": {
            "description": "Gets information about a Kubernetes Cluster's Pool.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by pool id\nconst myKey = pulumi.output(scaleway.getKubernetesNodePool({\n    poolId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_key = scaleway.get_kubernetes_node_pool(pool_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myKey = Output.Create(Scaleway.GetKubernetesNodePool.InvokeAsync(new Scaleway.GetKubernetesNodePoolArgs\n        {\n            PoolId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupKubernetesNodePool(ctx, \u0026GetKubernetesNodePoolArgs{\n\t\t\tPoolId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesNodePool.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID. Required when `name` is set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The pool name. Only one of `name` and `pool_id` should be specified. `cluster_id` should be specified with `name`.\n"
                    },
                    "poolId": {
                        "type": "string",
                        "description": "The pool's ID. Only one of `name` and `pool_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the pool exists.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesNodePool.\n",
                "properties": {
                    "autohealing": {
                        "type": "boolean",
                        "description": "True if the autohealing feature is enabled for this pool.\n"
                    },
                    "autoscaling": {
                        "type": "boolean",
                        "description": "True if the autoscaling feature is enabled for this pool.\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "The container runtime of the pool.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the pool.\n"
                    },
                    "currentSize": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kubeletArgs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the node.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The commercial type of the pool instances.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesNodePoolNode:getKubernetesNodePoolNode"
                        },
                        "description": "(List of) The nodes in the default pool.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "[placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool are attached to.\n"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the pool.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the pool.\n"
                    },
                    "upgradePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesNodePoolUpgradePolicy:getKubernetesNodePoolUpgradePolicy"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the pool.\n"
                    },
                    "waitForPoolReady": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autohealing",
                    "autoscaling",
                    "containerRuntime",
                    "createdAt",
                    "currentSize",
                    "kubeletArgs",
                    "maxSize",
                    "minSize",
                    "nodeType",
                    "nodes",
                    "placementGroupId",
                    "status",
                    "tags",
                    "updatedAt",
                    "upgradePolicies",
                    "version",
                    "waitForPoolReady",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getLoadbalancer:getLoadbalancer": {
            "description": "Gets information about a Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by name\nconst byName = pulumi.output(scaleway.getLoadbalancer({\n    name: \"foobar\",\n}));\n// Get info by ID\nconst byId = pulumi.output(scaleway.getLoadbalancer({\n    lbId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_loadbalancer(name=\"foobar\")\nby_id = scaleway.get_loadbalancer(lb_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var byName = Output.Create(Scaleway.GetLoadbalancer.InvokeAsync(new Scaleway.GetLoadbalancerArgs\n        {\n            Name = \"foobar\",\n        }));\n        var byId = Output.Create(Scaleway.GetLoadbalancer.InvokeAsync(new Scaleway.GetLoadbalancerArgs\n        {\n            LbId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"foobar\"\n\t\t_, err := scaleway.LookupLoadbalancer(ctx, \u0026GetLoadbalancerArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err = scaleway.LookupLoadbalancer(ctx, \u0026GetLoadbalancerArgs{\n\t\t\tLbId: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadbalancer.\n",
                "properties": {
                    "lbId": {
                        "type": "string",
                        "description": "The ID.\nOnly one of `ip_address` and `lb_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The IP address.\nOnly one of `name` and `lb_id` should be specified.\n"
                    },
                    "releaseIp": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`region`) The region in which the LB exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadbalancer.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The load-balancer public IP Address\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the load-balancer is associated with.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLoadbalancerPrivateNetwork:getLoadbalancerPrivateNetwork"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "releaseIp": {
                        "type": "boolean"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) The tags associated with the load-balancers.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Required) The type of the load-balancer.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ipAddress",
                    "ipId",
                    "organizationId",
                    "privateNetworks",
                    "projectId",
                    "region",
                    "tags",
                    "type",
                    "id"
                ]
            }
        },
        "scaleway:index/getLoadbalancerIp:getLoadbalancerIp": {
            "description": "Gets information about a Load Balancer IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by IP ID\nconst myIp = pulumi.output(scaleway.getLoadbalancerIp({\n    ipId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_ip = scaleway.get_loadbalancer_ip(ip_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myIp = Output.Create(Scaleway.GetLoadbalancerIp.InvokeAsync(new Scaleway.GetLoadbalancerIpArgs\n        {\n            IpId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupLoadbalancerIp(ctx, \u0026GetLoadbalancerIpArgs{\n\t\t\tIpId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadbalancerIp.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address.\nOnly one of `ip_address` and `lb_id` should be specified.\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The IP ID.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadbalancerIp.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The associated load-balance ID if any\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "(Defaults to provider `organization_id`) The ID of the organization the LB IP is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this IP.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "lbId",
                    "organizationId",
                    "projectId",
                    "region",
                    "reverse",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getMarketplaceImage:getMarketplaceImage": {
            "description": "Gets local image ID of an image from its label name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myImage = pulumi.output(scaleway.getMarketplaceImage({\n    label: \"ubuntu_focal\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_marketplace_image(label=\"ubuntu_focal\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myImage = Output.Create(Scaleway.GetMarketplaceImage.InvokeAsync(new Scaleway.GetMarketplaceImageArgs\n        {\n            Label = \"ubuntu_focal\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetMarketplaceImage(ctx, \u0026GetMarketplaceImageArgs{\n\t\t\tLabel: \"ubuntu_focal\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMarketplaceImage.\n",
                "properties": {
                    "instanceType": {
                        "type": "string",
                        "description": "The instance type the image is compatible with.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Exact label of the desired image. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1\u0026per_page=100)\nto find the right `label`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the image exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMarketplaceImage.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getRegistryImage:getRegistryImage": {
            "description": "Gets information about a registry image.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by image ID\nconst myImage = pulumi.output(scaleway.getRegistryImage({\n    imageId: \"11111111-1111-1111-1111-111111111111\",\n    namespaceId: \"11111111-1111-1111-1111-111111111111\", // Optional\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_registry_image(image_id=\"11111111-1111-1111-1111-111111111111\",\n    namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myImage = Output.Create(Scaleway.GetRegistryImage.InvokeAsync(new Scaleway.GetRegistryImageArgs\n        {\n            ImageId = \"11111111-1111-1111-1111-111111111111\",\n            NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\topt1 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.GetRegistryImage(ctx, \u0026GetRegistryImageArgs{\n\t\t\tImageId:     \u0026opt0,\n\t\t\tNamespaceId: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryImage.\n",
                "properties": {
                    "imageId": {
                        "type": "string",
                        "description": "The image ID.\nOnly one of `name` and `image_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The image name.\nOnly one of `name` and `image_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace ID in which the image is.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the image is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the image exists.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the registry image\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryImage.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the image is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the registry image.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the registry image\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The privacy policy of the registry image.\n"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId",
                    "organizationId",
                    "projectId",
                    "region",
                    "size",
                    "tags",
                    "visibility",
                    "id"
                ]
            }
        },
        "scaleway:index/getRegistryNamespace:getRegistryNamespace": {
            "description": "Gets information about a registry namespace.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by namespace ID\nconst myNamespace = pulumi.output(scaleway.getRegistryNamespace({\n    namespaceId: \"11111111-1111-1111-1111-111111111111\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_namespace = scaleway.get_registry_namespace(namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myNamespace = Output.Create(Scaleway.GetRegistryNamespace.InvokeAsync(new Scaleway.GetRegistryNamespaceArgs\n        {\n            NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"11111111-1111-1111-1111-111111111111\"\n\t\t_, err := scaleway.LookupRegistryNamespace(ctx, \u0026GetRegistryNamespaceArgs{\n\t\t\tNamespaceId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The namespace name.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id.\nOnly one of `name` and `namespace_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryNamespace.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the Registry Namespace.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "The Namespace Privacy Policy: whether or not the images are public.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "endpoint",
                    "isPublic",
                    "organizationId",
                    "projectId",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPrivateNetwork:getVpcPrivateNetwork": {
            "description": "Gets information about a private network.\n\n{{% examples %}}\n## Example Usage\n\nN/A, the usage will be meaningful in the next releases of VPC.\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPrivateNetwork.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Exact name of the private network.\n"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPrivateNetwork.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "organizationId",
                    "projectId",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGateway:getVpcPublicGateway": {
            "description": "Gets information about a public gateway.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGateway(\"main\", {\n    type: \"VPC-GW-S\",\n});\nconst pgTestByName = main.name.apply(name =\u003e scaleway.getVpcPublicGateway({\n    name: name,\n}));\nconst pgTestById = main.id.apply(id =\u003e scaleway.getVpcPublicGateway({\n    publicGatewayId: id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGateway(\"main\", type=\"VPC-GW-S\")\npg_test_by_name = scaleway.get_vpc_public_gateway_output(name=main.name)\npg_test_by_id = scaleway.get_vpc_public_gateway_output(public_gateway_id=main.id)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.VpcPublicGateway(\"main\", new Scaleway.VpcPublicGatewayArgs\n        {\n            Type = \"VPC-GW-S\",\n        });\n        var pgTestByName = Scaleway.GetVpcPublicGateway.Invoke(new Scaleway.GetVpcPublicGatewayInvokeArgs\n        {\n            Name = main.Name,\n        });\n        var pgTestById = Scaleway.GetVpcPublicGateway.Invoke(new Scaleway.GetVpcPublicGatewayInvokeArgs\n        {\n            PublicGatewayId = main.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayOutput(ctx, GetVpcPublicGatewayOutputArgs{\n\t\t\tName: main.Name,\n\t\t}, nil)\n\t\t_ = scaleway.LookupVpcPublicGatewayOutput(ctx, GetVpcPublicGatewayOutputArgs{\n\t\t\tPublicGatewayId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGateway.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Exact name of the public gateway.\n"
                    },
                    "publicGatewayId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGateway.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicGatewayId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "upstreamDnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "ipId",
                    "organizationId",
                    "projectId",
                    "tags",
                    "type",
                    "updatedAt",
                    "upstreamDnsServers",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGatewayDhcp:getVpcPublicGatewayDhcp": {
            "description": "Gets information about a public gateway DHCP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayDhcp(\"main\", {\n    subnet: \"192.168.0.0/24\",\n});\nconst dhcpById = main.id.apply(id =\u003e scaleway.getVpcPublicGatewayDhcp({\n    dhcpId: id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.0.0/24\")\ndhcp_by_id = scaleway.get_vpc_public_gateway_dhcp_output(dhcp_id=main.id)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.VpcPublicGatewayDhcp(\"main\", new Scaleway.VpcPublicGatewayDhcpArgs\n        {\n            Subnet = \"192.168.0.0/24\",\n        });\n        var dhcpById = Scaleway.GetVpcPublicGatewayDhcp.Invoke(new Scaleway.GetVpcPublicGatewayDhcpInvokeArgs\n        {\n            DhcpId = main.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.0.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayDhcpOutput(ctx, GetVpcPublicGatewayDhcpOutputArgs{\n\t\t\tDhcpId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayDhcp.\n",
                "properties": {
                    "dhcpId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dhcpId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayDhcp.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dhcpId": {
                        "type": "string"
                    },
                    "dnsLocalName": {
                        "type": "string"
                    },
                    "dnsSearches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dnsServerOverrides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "enableDynamic": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "poolHigh": {
                        "type": "string"
                    },
                    "poolLow": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "pushDefaultRoute": {
                        "type": "boolean"
                    },
                    "pushDnsServer": {
                        "type": "boolean"
                    },
                    "rebindTimer": {
                        "type": "integer"
                    },
                    "renewTimer": {
                        "type": "integer"
                    },
                    "subnet": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "validLifetime": {
                        "type": "integer"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "createdAt",
                    "dhcpId",
                    "dnsLocalName",
                    "dnsSearches",
                    "dnsServerOverrides",
                    "enableDynamic",
                    "organizationId",
                    "poolHigh",
                    "poolLow",
                    "projectId",
                    "pushDefaultRoute",
                    "pushDnsServer",
                    "rebindTimer",
                    "renewTimer",
                    "subnet",
                    "updatedAt",
                    "validLifetime",
                    "zone",
                    "id"
                ]
            }
        },
        "scaleway:index/getVpcPublicGatewayIp:getVpcPublicGatewayIp": {
            "description": "Gets information about a public gateway IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayIp(\"main\", {});\nconst ipById = main.id.apply(id =\u003e scaleway.getVpcPublicGatewayIp({\n    ipId: id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayIp(\"main\")\nip_by_id = scaleway.get_vpc_public_gateway_ip_output(ip_id=main.id)\n```\n```csharp\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var main = new Scaleway.VpcPublicGatewayIp(\"main\", new Scaleway.VpcPublicGatewayIpArgs\n        {\n        });\n        var ipById = Scaleway.GetVpcPublicGatewayIp.Invoke(new Scaleway.GetVpcPublicGatewayIpInvokeArgs\n        {\n            IpId = main.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayIpOutput(ctx, GetVpcPublicGatewayIpOutputArgs{\n\t\t\tIpId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayIp.\n",
                "properties": {
                    "ipId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayIp.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "createdAt",
                    "organizationId",
                    "projectId",
                    "reverse",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing scaleway cloud resources.",
            "packageName": "@jaxxstorm/pulumi-scaleway",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-scaleway` repo](https://github.com/pulumi/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`scaleway/terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-scaleway` repo](https://github.com/pulumi/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`scaleway/terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}